// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dbroot_v2.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Keyhole.Dbroot {

  /// <summary>Holder for reflection information generated from dbroot_v2.proto</summary>
  public static partial class DbrootV2Reflection {

    #region Descriptor
    /// <summary>File descriptor for dbroot_v2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DbrootV2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
            "Cg9kYnJvb3RfdjIucHJvdG8SDmtleWhvbGUuZGJyb290IjsKEFN0cmluZ0Vu" +
            "dHJ5UHJvdG8SEQoJc3RyaW5nX2lkGAEgAigHEhQKDHN0cmluZ192YWx1ZRgC" +
            "IAIoCSI4ChRTdHJpbmdJZE9yVmFsdWVQcm90bxIRCglzdHJpbmdfaWQYASAB" +
            "KAcSDQoFdmFsdWUYAiABKAkixgEKEFBsYW5ldE1vZGVsUHJvdG8SGAoGcmFk" +
            "aXVzGAEgASgBOgg2Mzc4LjEzNxInCgpmbGF0dGVuaW5nGAIgASgBOhMwLjAw" +
            "MzM1MjgxMDY2NDc0NzQ4EhYKDmVsZXZhdGlvbl9iaWFzGAQgASgBEicKH25l" +
            "Z2F0aXZlX2FsdGl0dWRlX2V4cG9uZW50X2JpYXMYBSABKAUSLgomY29tcHJl" +
            "c3NlZF9uZWdhdGl2ZV9hbHRpdHVkZV90aHJlc2hvbGQYBiABKAEiiwEKEVBy" +
            "b3ZpZGVySW5mb1Byb3RvEhMKC3Byb3ZpZGVyX2lkGAEgAigFEj4KEGNvcHly" +
            "aWdodF9zdHJpbmcYAiABKAsyJC5rZXlob2xlLmRicm9vdC5TdHJpbmdJZE9y" +
            "VmFsdWVQcm90bxIhChV2ZXJ0aWNhbF9waXhlbF9vZmZzZXQYAyABKAU6Ai0x" +
            "IrEBCgpQb3BVcFByb3RvEh8KEGlzX2JhbGxvb25fc3R5bGUYASABKAg6BWZh" +
            "bHNlEjIKBHRleHQYAiABKAsyJC5rZXlob2xlLmRicm9vdC5TdHJpbmdJZE9y" +
            "VmFsdWVQcm90bxIpChViYWNrZ3JvdW5kX2NvbG9yX2FiZ3IYAyABKAc6CjQy" +
            "OTQ5NjcyOTUSIwoPdGV4dF9jb2xvcl9hYmdyGAQgASgHOgo0Mjc4MTkwMDgw" +
            "IssEChNTdHlsZUF0dHJpYnV0ZVByb3RvEhAKCHN0eWxlX2lkGAEgAigJEhMK" +
            "C3Byb3ZpZGVyX2lkGAMgASgFEiMKD3BvbHlfY29sb3JfYWJnchgEIAEoBzoK" +
            "NDI5NDk2NzI5NRIjCg9saW5lX2NvbG9yX2FiZ3IYBSABKAc6CjQyOTQ5Njcy" +
            "OTUSFQoKbGluZV93aWR0aBgGIAEoAjoBMRIkChBsYWJlbF9jb2xvcl9hYmdy" +
            "GAcgASgHOgo0Mjk0OTY3Mjk1EhYKC2xhYmVsX3NjYWxlGAggASgCOgExEi0K" +
            "GXBsYWNlbWFya19pY29uX2NvbG9yX2FiZ3IYCSABKAc6CjQyOTQ5NjcyOTUS" +
            "HwoUcGxhY2VtYXJrX2ljb25fc2NhbGUYCiABKAI6ATESQQoTcGxhY2VtYXJr" +
            "X2ljb25fcGF0aBgLIAEoCzIkLmtleWhvbGUuZGJyb290LlN0cmluZ0lkT3JW" +
            "YWx1ZVByb3RvEhsKEHBsYWNlbWFya19pY29uX3gYDCABKAU6ATASGwoQcGxh" +
            "Y2VtYXJrX2ljb25feRgNIAEoBToBMBIgChRwbGFjZW1hcmtfaWNvbl93aWR0" +
            "aBgOIAEoBToCMzISIQoVcGxhY2VtYXJrX2ljb25faGVpZ2h0GA8gASgFOgIz" +
            "MhIqCgZwb3BfdXAYECABKAsyGi5rZXlob2xlLmRicm9vdC5Qb3BVcFByb3Rv" +
            "EjAKCWRyYXdfZmxhZxgRIAMoCzIdLmtleWhvbGUuZGJyb290LkRyYXdGbGFn" +
            "UHJvdG8ifAoNU3R5bGVNYXBQcm90bxIUCgxzdHlsZV9tYXBfaWQYASACKAUS" +
            "EgoKY2hhbm5lbF9pZBgCIAMoBRIeChZub3JtYWxfc3R5bGVfYXR0cmlidXRl" +
            "GAMgASgFEiEKGWhpZ2hsaWdodF9zdHlsZV9hdHRyaWJ1dGUYBCABKAUiNAoO" +
            "Wm9vbVJhbmdlUHJvdG8SEAoIbWluX3pvb20YASACKAUSEAoIbWF4X3pvb20Y" +
            "AiACKAUi2AEKDURyYXdGbGFnUHJvdG8SQgoOZHJhd19mbGFnX3R5cGUYASAC" +
            "KA4yKi5rZXlob2xlLmRicm9vdC5EcmF3RmxhZ1Byb3RvLkRyYXdGbGFnVHlw" +
            "ZSKCAQoMRHJhd0ZsYWdUeXBlEhIKDlRZUEVfRklMTF9PTkxZEAESFQoRVFlQ" +
            "RV9PVVRMSU5FX09OTFkQAhIZChVUWVBFX0ZJTExfQU5EX09VVExJTkUQAxIV" +
            "ChFUWVBFX0FOVElBTElBU0lORxAEEhUKEVRZUEVfQ0VOVEVSX0xBQkVMEAUi" +
            "mwEKCkxheWVyUHJvdG8SMgoKem9vbV9yYW5nZRgBIAMoCzIeLmtleWhvbGUu" +
            "ZGJyb290Llpvb21SYW5nZVByb3RvEh8KE3ByZXNlcnZlX3RleHRfbGV2ZWwY" +
            "AiABKAU6AjMwEhwKFGxvZF9iZWdpbl90cmFuc2l0aW9uGAQgASgIEhoKEmxv" +
            "ZF9lbmRfdHJhbnNpdGlvbhgFIAEoCCIqCgtGb2xkZXJQcm90bxIbCg1pc19l" +
            "eHBhbmRhYmxlGAEgASgIOgR0cnVlIp4BChBSZXF1aXJlbWVudFByb3RvEhUK" +
            "DXJlcXVpcmVkX3ZyYW0YAyABKAkSGwoTcmVxdWlyZWRfY2xpZW50X3ZlchgE" +
            "IAEoCRITCgtwcm9iYWJpbGl0eRgFIAEoCRIbChNyZXF1aXJlZF91c2VyX2Fn" +
            "ZW50GAYgASgJEiQKHHJlcXVpcmVkX2NsaWVudF9jYXBhYmlsaXRpZXMYByAB" +
            "KAkiYAoLTG9va0F0UHJvdG8SEQoJbG9uZ2l0dWRlGAEgAigCEhAKCGxhdGl0" +
            "dWRlGAIgAigCEg0KBXJhbmdlGAMgASgCEgwKBHRpbHQYBCABKAISDwoHaGVh" +
            "ZGluZxgFIAEoAiKeBwoSTmVzdGVkRmVhdHVyZVByb3RvEkQKDGZlYXR1cmVf" +
            "dHlwZRgBIAEoDjIuLmtleWhvbGUuZGJyb290Lk5lc3RlZEZlYXR1cmVQcm90" +
            "by5GZWF0dXJlVHlwZRI1CgdrbWxfdXJsGAIgASgLMiQua2V5aG9sZS5kYnJv" +
            "b3QuU3RyaW5nSWRPclZhbHVlUHJvdG8SFAoMZGF0YWJhc2VfdXJsGBUgASgJ" +
            "EikKBWxheWVyGAMgASgLMhoua2V5aG9sZS5kYnJvb3QuTGF5ZXJQcm90bxIr" +
            "CgZmb2xkZXIYBCABKAsyGy5rZXlob2xlLmRicm9vdC5Gb2xkZXJQcm90bxI1" +
            "CgtyZXF1aXJlbWVudBgFIAEoCzIgLmtleWhvbGUuZGJyb290LlJlcXVpcmVt" +
            "ZW50UHJvdG8SEgoKY2hhbm5lbF9pZBgGIAIoBRI6CgxkaXNwbGF5X25hbWUY" +
            "ByABKAsyJC5rZXlob2xlLmRicm9vdC5TdHJpbmdJZE9yVmFsdWVQcm90bxIY" +
            "Cgppc192aXNpYmxlGAggASgIOgR0cnVlEhgKCmlzX2VuYWJsZWQYCSABKAg6" +
            "BHRydWUSGQoKaXNfY2hlY2tlZBgKIAEoCDoFZmFsc2USLQoUbGF5ZXJfbWVu" +
            "dV9pY29uX3BhdGgYCyABKAk6D2ljb25zLzc3M19sLnBuZxI5CgtkZXNjcmlw" +
            "dGlvbhgMIAEoCzIkLmtleWhvbGUuZGJyb290LlN0cmluZ0lkT3JWYWx1ZVBy" +
            "b3RvEiwKB2xvb2tfYXQYDSABKAsyGy5rZXlob2xlLmRicm9vdC5Mb29rQXRQ" +
            "cm90bxISCgphc3NldF91dWlkGA8gASgJEhwKDmlzX3NhdmVfbG9ja2VkGBAg" +
            "ASgIOgR0cnVlEjQKCGNoaWxkcmVuGBEgAygLMiIua2V5aG9sZS5kYnJvb3Qu" +
            "TmVzdGVkRmVhdHVyZVByb3RvEiEKGWNsaWVudF9jb25maWdfc2NyaXB0X25h" +
            "bWUYEiABKAkSJQoZZGlvcmFtYV9kYXRhX2NoYW5uZWxfYmFzZRgTIAEoBToC" +
            "LTESJQoZcmVwbGljYV9kYXRhX2NoYW5uZWxfYmFzZRgUIAEoBToCLTEiVgoL" +
            "RmVhdHVyZVR5cGUSEAoMVFlQRV9QT0lOVF9aEAESEgoOVFlQRV9QT0xZR09O" +
            "X1oQAhIPCgtUWVBFX0xJTkVfWhADEhAKDFRZUEVfVEVSUkFJThAEIuUBChZN" +
            "ZmVEb21haW5GZWF0dXJlc1Byb3RvEhQKDGNvdW50cnlfY29kZRgBIAIoCRIT" +
            "Cgtkb21haW5fbmFtZRgCIAIoCRJTChJzdXBwb3J0ZWRfZmVhdHVyZXMYAyAD" +
            "KA4yNy5rZXlob2xlLmRicm9vdC5NZmVEb21haW5GZWF0dXJlc1Byb3RvLlN1" +
            "cHBvcnRlZEZlYXR1cmUiSwoQU3VwcG9ydGVkRmVhdHVyZRINCglHRU9DT0RJ" +
            "TkcQABIQCgxMT0NBTF9TRUFSQ0gQARIWChJEUklWSU5HX0RJUkVDVElPTlMQ" +
            "AiKADQoSQ2xpZW50T3B0aW9uc1Byb3RvEhoKEmRpc2FibGVfZGlza19jYWNo" +
            "ZRgBIAEoCBImCh5kaXNhYmxlX2VtYmVkZGVkX2Jyb3dzZXJfdmlzdGEYAiAB" +
            "KAgSHQoPZHJhd19hdG1vc3BoZXJlGAMgASgIOgR0cnVlEhgKCmRyYXdfc3Rh" +
            "cnMYBCABKAg6BHRydWUSGgoSc2hhZGVyX2ZpbGVfcHJlZml4GAUgASgJEiUK" +
            "HXVzZV9wcm90b2J1Zl9xdWFkdHJlZV9wYWNrZXRzGAYgASgIEigKGnVzZV9l" +
            "eHRlbmRlZF9jb3B5cmlnaHRfaWRzGAcgASgIOgR0cnVlElgKFnByZWNpcGl0" +
            "YXRpb25zX29wdGlvbnMYCCABKAsyOC5rZXlob2xlLmRicm9vdC5DbGllbnRP" +
            "cHRpb25zUHJvdG8uUHJlY2lwaXRhdGlvbnNPcHRpb25zEkoKD2NhcHR1cmVf" +
            "b3B0aW9ucxgJIAEoCzIxLmtleWhvbGUuZGJyb290LkNsaWVudE9wdGlvbnNQ" +
            "cm90by5DYXB0dXJlT3B0aW9ucxIfChFzaG93XzJkX21hcHNfaWNvbhgKIAEo" +
            "CDoEdHJ1ZRIgChhkaXNhYmxlX2ludGVybmFsX2Jyb3dzZXIYCyABKAgSIgoa" +
            "aW50ZXJuYWxfYnJvd3Nlcl9ibGFja2xpc3QYDCABKAkSLAohaW50ZXJuYWxf" +
            "YnJvd3Nlcl9vcmlnaW5fd2hpdGVsaXN0GA0gASgJOgEqEiAKGHBvbGFyX3Rp" +
            "bGVfbWVyZ2luZ19sZXZlbBgOIAEoBRI6Chtqc19icmlkZ2VfcmVxdWVzdF93" +
            "aGl0ZWxpc3QYDyABKAk6FWh0dHA6Ly8qLmdvb2dsZS5jb20vKhJECgxtYXBz" +
            "X29wdGlvbnMYECABKAsyLi5rZXlob2xlLmRicm9vdC5DbGllbnRPcHRpb25z" +
            "UHJvdG8uTWFwc09wdGlvbnMa8AQKFVByZWNpcGl0YXRpb25zT3B0aW9ucxIR" +
            "CglpbWFnZV91cmwYASABKAkSHgoRaW1hZ2VfZXhwaXJlX3RpbWUYAiABKAU6" +
            "AzkwMBIeChJtYXhfY29sb3JfZGlzdGFuY2UYAyABKAU6AjIwEhYKC2ltYWdl" +
            "X2xldmVsGAQgASgFOgE1EmAKD3dlYXRoZXJfbWFwcGluZxgFIAMoCzJHLmtl" +
            "eWhvbGUuZGJyb290LkNsaWVudE9wdGlvbnNQcm90by5QcmVjaXBpdGF0aW9u" +
            "c09wdGlvbnMuV2VhdGhlck1hcHBpbmcSGAoQY2xvdWRzX2xheWVyX3VybBgG" +
            "IAEoCRIoChxhbmltYXRpb25fZGVjZWxlcmF0aW9uX2RlbGF5GAcgASgCOgIy" +
            "MBrFAgoOV2VhdGhlck1hcHBpbmcSEgoKY29sb3JfYWJnchgBIAIoDRJpCgx3" +
            "ZWF0aGVyX3R5cGUYAiACKA4yUy5rZXlob2xlLmRicm9vdC5DbGllbnRPcHRp" +
            "b25zUHJvdG8uUHJlY2lwaXRhdGlvbnNPcHRpb25zLldlYXRoZXJNYXBwaW5n" +
            "LldlYXRoZXJUeXBlEhUKCmVsb25nYXRpb24YAyABKAI6ATESDwoHb3BhY2l0" +
            "eRgEIAEoAhITCgtmb2dfZGVuc2l0eRgFIAEoAhIOCgZzcGVlZDAYBiABKAIS" +
            "DgoGc3BlZWQxGAcgASgCEg4KBnNwZWVkMhgIIAEoAhIOCgZzcGVlZDMYCSAB" +
            "KAIiNwoLV2VhdGhlclR5cGUSFAoQTk9fUFJFQ0lQSVRBVElPThAAEggKBFJB" +
            "SU4QARIICgRTTk9XEAIafgoOQ2FwdHVyZU9wdGlvbnMSIQoTYWxsb3dfc2F2" +
            "ZV9hc19pbWFnZRgBIAEoCDoEdHJ1ZRIiChRtYXhfZnJlZV9jYXB0dXJlX3Jl" +
            "cxgCIAEoBToEMjQwMBIlChdtYXhfcHJlbWl1bV9jYXB0dXJlX3JlcxgDIAEo" +
            "BToENDgwMBqtAQoLTWFwc09wdGlvbnMSEwoLZW5hYmxlX21hcHMYASABKAgS" +
            "IgoaZG9jc19hdXRvX2Rvd25sb2FkX2VuYWJsZWQYAiABKAgSIwobZG9jc19h" +
            "dXRvX2Rvd25sb2FkX2ludGVydmFsGAMgASgFEiAKGGRvY3NfYXV0b191cGxv" +
            "YWRfZW5hYmxlZBgEIAEoCBIeChZkb2NzX2F1dG9fdXBsb2FkX2RlbGF5GAUg" +
            "ASgFItwDChRGZXRjaGluZ09wdGlvbnNQcm90bxIhChZtYXhfcmVxdWVzdHNf" +
            "cGVyX3F1ZXJ5GAEgASgFOgExEiQKHGZvcmNlX21heF9yZXF1ZXN0c19wZXJf" +
            "cXVlcnkYDCABKAgSFAoMc29ydF9iYXRjaGVzGA0gASgIEhcKDG1heF9kcmF3" +
            "YWJsZRgCIAEoBToBMhIWCgttYXhfaW1hZ2VyeRgDIAEoBToBMhIWCgttYXhf" +
            "dGVycmFpbhgEIAEoBToBNRIXCgxtYXhfcXVhZHRyZWUYBSABKAU6ATUSHwoU" +
            "bWF4X2Rpb3JhbWFfbWV0YWRhdGEYBiABKAU6ATESGwoQbWF4X2Rpb3JhbWFf" +
            "ZGF0YRgHIAEoBToBMBIjChhtYXhfY29uc3VtZXJfZmV0Y2hfcmF0aW8YCCAB" +
            "KAI6ATESIQoWbWF4X3Byb19lY19mZXRjaF9yYXRpbxgJIAEoAjoBMBIYChBz" +
            "YWZlX292ZXJhbGxfcXBzGAogASgCEhgKEHNhZmVfaW1hZ2VyeV9xcHMYCyAB" +
            "KAISMQoRZG9tYWluc19mb3JfaHR0cHMYDiABKAk6Fmdvb2dsZS5jb20gZ3N0" +
            "YXRpYy5jb20SFgoOaG9zdHNfZm9yX2h0dHAYDyABKAkikQEKF1RpbWVNYWNo" +
            "aW5lT3B0aW9uc1Byb3RvEhIKCnNlcnZlcl91cmwYASABKAkSFgoOaXNfdGlt" +
            "ZW1hY2hpbmUYAiABKAgSGgoNZHdlbGxfdGltZV9tcxgDIAEoBToDNTAwEi4K" +
            "H2Rpc2NvdmVyYWJpbGl0eV9hbHRpdHVkZV9tZXRlcnMYBCABKAU6BTE1MDAw" +
            "IuMBChNBdXRvcGlhT3B0aW9uc1Byb3RvEjcKE21ldGFkYXRhX3NlcnZlcl91" +
            "cmwYASABKAk6Gmh0dHA6Ly9jYmswLmdvb2dsZS5jb20vY2JrEjcKE2RlcHRo" +
            "bWFwX3NlcnZlcl91cmwYAiABKAk6Gmh0dHA6Ly9jYmswLmdvb2dsZS5jb20v" +
            "Y2JrEh4KFGNvdmVyYWdlX292ZXJsYXlfdXJsGAMgASgJOgASFwoPbWF4X2lt" +
            "YWdlcnlfcXBzGAQgASgCEiEKGW1heF9tZXRhZGF0YV9kZXB0aG1hcF9xcHMY" +
            "BSABKAIiRQoPQ1NJT3B0aW9uc1Byb3RvEhsKE3NhbXBsaW5nX3BlcmNlbnRh" +
            "Z2UYASABKAUSFQoNZXhwZXJpbWVudF9pZBgCIAEoCSLvAgoOU2VhcmNoVGFi" +
            "UHJvdG8SEgoKaXNfdmlzaWJsZRgBIAIoCBI3Cgl0YWJfbGFiZWwYAiABKAsy" +
            "JC5rZXlob2xlLmRicm9vdC5TdHJpbmdJZE9yVmFsdWVQcm90bxIQCghiYXNl" +
            "X3VybBgDIAEoCRIXCg92aWV3cG9ydF9wcmVmaXgYBCABKAkSPgoJaW5wdXRf" +
            "Ym94GAUgAygLMisua2V5aG9sZS5kYnJvb3QuU2VhcmNoVGFiUHJvdG8uSW5w" +
            "dXRCb3hJbmZvEjUKC3JlcXVpcmVtZW50GAYgASgLMiAua2V5aG9sZS5kYnJv" +
            "b3QuUmVxdWlyZW1lbnRQcm90bxpuCgxJbnB1dEJveEluZm8SMwoFbGFiZWwY" +
            "ASACKAsyJC5rZXlob2xlLmRicm9vdC5TdHJpbmdJZE9yVmFsdWVQcm90bxIS" +
            "CgpxdWVyeV92ZXJiGAIgAigJEhUKDXF1ZXJ5X3ByZXBlbmQYAyABKAkivQMK" +
            "DENvYnJhbmRQcm90bxIQCghsb2dvX3VybBgBIAIoCRIzCgd4X2Nvb3JkGAIg" +
            "ASgLMiIua2V5aG9sZS5kYnJvb3QuQ29icmFuZFByb3RvLkNvb3JkEjMKB3lf" +
            "Y29vcmQYAyABKAsyIi5rZXlob2xlLmRicm9vdC5Db2JyYW5kUHJvdG8uQ29v" +
            "cmQSRQoJdGllX3BvaW50GAQgASgOMiUua2V5aG9sZS5kYnJvb3QuQ29icmFu" +
            "ZFByb3RvLlRpZVBvaW50OgtCT1RUT01fTEVGVBIWCgtzY3JlZW5fc2l6ZRgF" +
            "IAEoAToBMBo1CgVDb29yZBIQCgV2YWx1ZRgBIAIoAToBMBIaCgtpc19yZWxh" +
            "dGl2ZRgCIAEoCDoFZmFsc2UimgEKCFRpZVBvaW50EgwKCFRPUF9MRUZUEAAS" +
            "DgoKVE9QX0NFTlRFUhABEg0KCVRPUF9SSUdIVBACEgwKCE1JRF9MRUZUEAMS" +
            "DgoKTUlEX0NFTlRFUhAEEg0KCU1JRF9SSUdIVBAFEg8KC0JPVFRPTV9MRUZU" +
            "EAYSEQoNQk9UVE9NX0NFTlRFUhAHEhAKDEJPVFRPTV9SSUdIVBAIIm0KGERh" +
            "dGFiYXNlRGVzY3JpcHRpb25Qcm90bxI7Cg1kYXRhYmFzZV9uYW1lGAEgASgL" +
            "MiQua2V5aG9sZS5kYnJvb3QuU3RyaW5nSWRPclZhbHVlUHJvdG8SFAoMZGF0" +
            "YWJhc2VfdXJsGAIgAigJIj0KEUNvbmZpZ1NjcmlwdFByb3RvEhMKC3Njcmlw" +
            "dF9uYW1lGAEgAigJEhMKC3NjcmlwdF9kYXRhGAIgAigJIjAKEFN3b29wUGFy" +
            "YW1zUHJvdG8SHAoUc3RhcnRfZGlzdF9pbl9tZXRlcnMYASABKAEigAIKElBv" +
            "c3RpbmdTZXJ2ZXJQcm90bxIyCgRuYW1lGAEgASgLMiQua2V5aG9sZS5kYnJv" +
            "b3QuU3RyaW5nSWRPclZhbHVlUHJvdG8SNgoIYmFzZV91cmwYAiABKAsyJC5r" +
            "ZXlob2xlLmRicm9vdC5TdHJpbmdJZE9yVmFsdWVQcm90bxI+ChBwb3N0X3dp" +
            "emFyZF9wYXRoGAMgASgLMiQua2V5aG9sZS5kYnJvb3QuU3RyaW5nSWRPclZh" +
            "bHVlUHJvdG8SPgoQZmlsZV9zdWJtaXRfcGF0aBgEIAEoCzIkLmtleWhvbGUu" +
            "ZGJyb290LlN0cmluZ0lkT3JWYWx1ZVByb3RvIn8KFlBsYW5ldGFyeURhdGFi" +
            "YXNlUHJvdG8SMQoDdXJsGAEgAigLMiQua2V5aG9sZS5kYnJvb3QuU3RyaW5n" +
            "SWRPclZhbHVlUHJvdG8SMgoEbmFtZRgCIAIoCzIkLmtleWhvbGUuZGJyb290" +
            "LlN0cmluZ0lkT3JWYWx1ZVByb3RvInEKDkxvZ1NlcnZlclByb3RvEjEKA3Vy" +
            "bBgBIAEoCzIkLmtleWhvbGUuZGJyb290LlN0cmluZ0lkT3JWYWx1ZVByb3Rv" +
            "Eg4KBmVuYWJsZRgCIAEoCBIcChF0aHJvdHRsaW5nX2ZhY3RvchgDIAEoBToB" +
            "MSKHNwoPRW5kU25pcHBldFByb3RvEi8KBW1vZGVsGAEgASgLMiAua2V5aG9s" +
            "ZS5kYnJvb3QuUGxhbmV0TW9kZWxQcm90bxI9Cg9hdXRoX3NlcnZlcl91cmwY" +
            "AiABKAsyJC5rZXlob2xlLmRicm9vdC5TdHJpbmdJZE9yVmFsdWVQcm90bxIe" +
            "ChZkaXNhYmxlX2F1dGhlbnRpY2F0aW9uGAMgASgIEjsKC21mZV9kb21haW5z" +
            "GAQgAygLMiYua2V5aG9sZS5kYnJvb3QuTWZlRG9tYWluRmVhdHVyZXNQcm90" +
            "bxIgCg5tZmVfbGFuZ19wYXJhbRgFIAEoCToIaGw9JFtobF0SGAoQYWRzX3Vy" +
            "bF9wYXR0ZXJucxgGIAEoCRJCChRyZXZlcnNlX2dlb2NvZGVyX3VybBgHIAEo" +
            "CzIkLmtleWhvbGUuZGJyb290LlN0cmluZ0lkT3JWYWx1ZVByb3RvEiwKIXJl" +
            "dmVyc2VfZ2VvY29kZXJfcHJvdG9jb2xfdmVyc2lvbhgIIAEoBToBMxInChlz" +
            "a3lfZGF0YWJhc2VfaXNfYXZhaWxhYmxlGAkgASgIOgR0cnVlEj4KEHNreV9k" +
            "YXRhYmFzZV91cmwYCiABKAsyJC5rZXlob2xlLmRicm9vdC5TdHJpbmdJZE9y" +
            "VmFsdWVQcm90bxJHChlkZWZhdWx0X3dlYl9wYWdlX2ludGxfdXJsGAsgASgL" +
            "MiQua2V5aG9sZS5kYnJvb3QuU3RyaW5nSWRPclZhbHVlUHJvdG8SHQoRbnVt" +
            "X3N0YXJ0X3VwX3RpcHMYDCABKAU6AjE3Ej8KEXN0YXJ0X3VwX3RpcHNfdXJs" +
            "GA0gASgLMiQua2V5aG9sZS5kYnJvb3QuU3RyaW5nSWRPclZhbHVlUHJvdG8S" +
            "HQoVbnVtX3Byb19zdGFydF91cF90aXBzGDMgASgFEkMKFXByb19zdGFydF91" +
            "cF90aXBzX3VybBg0IAEoCzIkLmtleWhvbGUuZGJyb290LlN0cmluZ0lkT3JW" +
            "YWx1ZVByb3RvEkMKFXN0YXJ0dXBfdGlwc19pbnRsX3VybBhAIAEoCzIkLmtl" +
            "eWhvbGUuZGJyb290LlN0cmluZ0lkT3JWYWx1ZVByb3RvEkEKE3VzZXJfZ3Vp" +
            "ZGVfaW50bF91cmwYDiABKAsyJC5rZXlob2xlLmRicm9vdC5TdHJpbmdJZE9y" +
            "VmFsdWVQcm90bxJFChdzdXBwb3J0X2NlbnRlcl9pbnRsX3VybBgPIAEoCzIk" +
            "LmtleWhvbGUuZGJyb290LlN0cmluZ0lkT3JWYWx1ZVByb3RvEkcKGWJ1c2lu" +
            "ZXNzX2xpc3RpbmdfaW50bF91cmwYECABKAsyJC5rZXlob2xlLmRicm9vdC5T" +
            "dHJpbmdJZE9yVmFsdWVQcm90bxJFChdzdXBwb3J0X2Fuc3dlcl9pbnRsX3Vy" +
            "bBgRIAEoCzIkLmtleWhvbGUuZGJyb290LlN0cmluZ0lkT3JWYWx1ZVByb3Rv" +
            "EkQKFnN1cHBvcnRfdG9waWNfaW50bF91cmwYEiABKAsyJC5rZXlob2xlLmRi" +
            "cm9vdC5TdHJpbmdJZE9yVmFsdWVQcm90bxJGChhzdXBwb3J0X3JlcXVlc3Rf" +
            "aW50bF91cmwYEyABKAsyJC5rZXlob2xlLmRicm9vdC5TdHJpbmdJZE9yVmFs" +
            "dWVQcm90bxI8Cg5lYXJ0aF9pbnRsX3VybBgUIAEoCzIkLmtleWhvbGUuZGJy" +
            "b290LlN0cmluZ0lkT3JWYWx1ZVByb3RvEj0KD2FkZF9jb250ZW50X3VybBgV" +
            "IAEoCzIkLmtleWhvbGUuZGJyb290LlN0cmluZ0lkT3JWYWx1ZVByb3RvEkgK" +
            "GnNrZXRjaHVwX25vdF9pbnN0YWxsZWRfdXJsGBYgASgLMiQua2V5aG9sZS5k" +
            "YnJvb3QuU3RyaW5nSWRPclZhbHVlUHJvdG8SQAoSc2tldGNodXBfZXJyb3Jf" +
            "dXJsGBcgASgLMiQua2V5aG9sZS5kYnJvb3QuU3RyaW5nSWRPclZhbHVlUHJv" +
            "dG8SPgoQZnJlZV9saWNlbnNlX3VybBgYIAEoCzIkLmtleWhvbGUuZGJyb290" +
            "LlN0cmluZ0lkT3JWYWx1ZVByb3RvEj0KD3Byb19saWNlbnNlX3VybBgZIAEo" +
            "CzIkLmtleWhvbGUuZGJyb290LlN0cmluZ0lkT3JWYWx1ZVByb3RvEjoKDHR1" +
            "dG9yaWFsX3VybBgwIAEoCzIkLmtleWhvbGUuZGJyb290LlN0cmluZ0lkT3JW" +
            "YWx1ZVByb3RvEkQKFmtleWJvYXJkX3Nob3J0Y3V0c191cmwYMSABKAsyJC5r" +
            "ZXlob2xlLmRicm9vdC5TdHJpbmdJZE9yVmFsdWVQcm90bxI/ChFyZWxlYXNl" +
            "X25vdGVzX3VybBgyIAEoCzIkLmtleWhvbGUuZGJyb290LlN0cmluZ0lkT3JW" +
            "YWx1ZVByb3RvEh0KDmhpZGVfdXNlcl9kYXRhGBogASgIOgVmYWxzZRIZCgt1" +
            "c2VfZ2VfbG9nbxgbIAEoCDoEdHJ1ZRJKChxkaW9yYW1hX2Rlc2NyaXB0aW9u" +
            "X3VybF9iYXNlGBwgASgLMiQua2V5aG9sZS5kYnJvb3QuU3RyaW5nSWRPclZh" +
            "bHVlUHJvdG8SKQoVZGlvcmFtYV9kZWZhdWx0X2NvbG9yGB0gASgNOgo0Mjkx" +
            "MjgxNjA3EkMKFWRpb3JhbWFfYmxhY2tsaXN0X3VybBg1IAEoCzIkLmtleWhv" +
            "bGUuZGJyb290LlN0cmluZ0lkT3JWYWx1ZVByb3RvEjoKDmNsaWVudF9vcHRp" +
            "b25zGB4gASgLMiIua2V5aG9sZS5kYnJvb3QuQ2xpZW50T3B0aW9uc1Byb3Rv" +
            "Ej4KEGZldGNoaW5nX29wdGlvbnMYHyABKAsyJC5rZXlob2xlLmRicm9vdC5G" +
            "ZXRjaGluZ09wdGlvbnNQcm90bxJFChR0aW1lX21hY2hpbmVfb3B0aW9ucxgg" +
            "IAEoCzInLmtleWhvbGUuZGJyb290LlRpbWVNYWNoaW5lT3B0aW9uc1Byb3Rv" +
            "EjQKC2NzaV9vcHRpb25zGCEgASgLMh8ua2V5aG9sZS5kYnJvb3QuQ1NJT3B0" +
            "aW9uc1Byb3RvEjIKCnNlYXJjaF90YWIYIiADKAsyHi5rZXlob2xlLmRicm9v" +
            "dC5TZWFyY2hUYWJQcm90bxIyCgxjb2JyYW5kX2luZm8YIyADKAsyHC5rZXlo" +
            "b2xlLmRicm9vdC5Db2JyYW5kUHJvdG8SQAoOdmFsaWRfZGF0YWJhc2UYJCAD" +
            "KAsyKC5rZXlob2xlLmRicm9vdC5EYXRhYmFzZURlc2NyaXB0aW9uUHJvdG8S" +
            "OAoNY29uZmlnX3NjcmlwdBglIAMoCzIhLmtleWhvbGUuZGJyb290LkNvbmZp" +
            "Z1NjcmlwdFByb3RvEj8KEWRlYXV0aF9zZXJ2ZXJfdXJsGCYgASgLMiQua2V5" +
            "aG9sZS5kYnJvb3QuU3RyaW5nSWRPclZhbHVlUHJvdG8SOgoQc3dvb3BfcGFy" +
            "YW1ldGVycxgnIAEoCzIgLmtleWhvbGUuZGJyb290LlN3b29wUGFyYW1zUHJv" +
            "dG8SOwoPYmJzX3NlcnZlcl9pbmZvGCggASgLMiIua2V5aG9sZS5kYnJvb3Qu" +
            "UG9zdGluZ1NlcnZlclByb3RvEkIKFmRhdGFfZXJyb3Jfc2VydmVyX2luZm8Y" +
            "KSABKAsyIi5rZXlob2xlLmRicm9vdC5Qb3N0aW5nU2VydmVyUHJvdG8SQgoS" +
            "cGxhbmV0YXJ5X2RhdGFiYXNlGCogAygLMiYua2V5aG9sZS5kYnJvb3QuUGxh" +
            "bmV0YXJ5RGF0YWJhc2VQcm90bxIyCgpsb2dfc2VydmVyGCsgASgLMh4ua2V5" +
            "aG9sZS5kYnJvb3QuTG9nU2VydmVyUHJvdG8SPAoPYXV0b3BpYV9vcHRpb25z" +
            "GCwgASgLMiMua2V5aG9sZS5kYnJvb3QuQXV0b3BpYU9wdGlvbnNQcm90bxJI" +
            "Cg1zZWFyY2hfY29uZmlnGDYgASgLMjEua2V5aG9sZS5kYnJvb3QuRW5kU25p" +
            "cHBldFByb3RvLlNlYXJjaENvbmZpZ1Byb3RvEkQKC3NlYXJjaF9pbmZvGC0g" +
            "ASgLMi8ua2V5aG9sZS5kYnJvb3QuRW5kU25pcHBldFByb3RvLlNlYXJjaElu" +
            "Zm9Qcm90bxJOChplbGV2YXRpb25fc2VydmljZV9iYXNlX3VybBguIAEoCToq" +
            "aHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzL2FwaS9lbGV2YXRpb24vEioK" +
            "HWVsZXZhdGlvbl9wcm9maWxlX3F1ZXJ5X2RlbGF5GC8gASgFOgM1MDASPQoP" +
            "cHJvX3VwZ3JhZGVfdXJsGDcgASgLMiQua2V5aG9sZS5kYnJvb3QuU3RyaW5n" +
            "SWRPclZhbHVlUHJvdG8SQQoTZWFydGhfY29tbXVuaXR5X3VybBg4IAEoCzIk" +
            "LmtleWhvbGUuZGJyb290LlN0cmluZ0lkT3JWYWx1ZVByb3RvEj0KD2dvb2ds" +
            "ZV9tYXBzX3VybBg5IAEoCzIkLmtleWhvbGUuZGJyb290LlN0cmluZ0lkT3JW" +
            "YWx1ZVByb3RvEjkKC3NoYXJpbmdfdXJsGDogASgLMiQua2V5aG9sZS5kYnJv" +
            "b3QuU3RyaW5nSWRPclZhbHVlUHJvdG8SQAoScHJpdmFjeV9wb2xpY3lfdXJs" +
            "GDsgASgLMiQua2V5aG9sZS5kYnJvb3QuU3RyaW5nSWRPclZhbHVlUHJvdG8S" +
            "IgoTZG9fZ3BsdXNfdXNlcl9jaGVjaxg8IAEoCDoFZmFsc2USTgoTcm9ja3Ry" +
            "ZWVfZGF0YV9wcm90bxg9IAEoCzIxLmtleWhvbGUuZGJyb290LkVuZFNuaXBw" +
            "ZXRQcm90by5Sb2NrVHJlZURhdGFQcm90bxJOChBmaWxtc3RyaXBfY29uZmln" +
            "GD4gAygLMjQua2V5aG9sZS5kYnJvb3QuRW5kU25pcHBldFByb3RvLkZpbG1z" +
            "dHJpcENvbmZpZ1Byb3RvEhoKEnNob3dfc2lnbmluX2J1dHRvbhg/IAEoCBJE" +
            "ChZwcm9fbWVhc3VyZV91cHNlbGxfdXJsGEEgASgLMiQua2V5aG9sZS5kYnJv" +
            "b3QuU3RyaW5nSWRPclZhbHVlUHJvdG8SQgoUcHJvX3ByaW50X3Vwc2VsbF91" +
            "cmwYQiABKAsyJC5rZXlob2xlLmRicm9vdC5TdHJpbmdJZE9yVmFsdWVQcm90" +
            "bxJGCg9zdGFyX2RhdGFfcHJvdG8YQyABKAsyLS5rZXlob2xlLmRicm9vdC5F" +
            "bmRTbmlwcGV0UHJvdG8uU3RhckRhdGFQcm90bxI6CgxmZWVkYmFja191cmwY" +
            "RCABKAsyJC5rZXlob2xlLmRicm9vdC5TdHJpbmdJZE9yVmFsdWVQcm90bxI+" +
            "ChBvYXV0aDJfbG9naW5fdXJsGEUgASgLMiQua2V5aG9sZS5kYnJvb3QuU3Ry" +
            "aW5nSWRPclZhbHVlUHJvdG8apw0KEVNlYXJjaENvbmZpZ1Byb3RvElUKDXNl" +
            "YXJjaF9zZXJ2ZXIYASADKAsyPi5rZXlob2xlLmRicm9vdC5FbmRTbmlwcGV0" +
            "UHJvdG8uU2VhcmNoQ29uZmlnUHJvdG8uU2VhcmNoU2VydmVyElwKDm9uZWJv" +
            "eF9zZXJ2aWNlGAIgAygLMkQua2V5aG9sZS5kYnJvb3QuRW5kU25pcHBldFBy" +
            "b3RvLlNlYXJjaENvbmZpZ1Byb3RvLk9uZWJveFNlcnZpY2VQcm90bxI8Cg5r" +
            "bWxfc2VhcmNoX3VybBgDIAEoCzIkLmtleWhvbGUuZGJyb290LlN0cmluZ0lk" +
            "T3JWYWx1ZVByb3RvEjwKDmttbF9yZW5kZXJfdXJsGAQgASgLMiQua2V5aG9s" +
            "ZS5kYnJvb3QuU3RyaW5nSWRPclZhbHVlUHJvdG8SQAoSc2VhcmNoX2hpc3Rv" +
            "cnlfdXJsGAYgASgLMiQua2V5aG9sZS5kYnJvb3QuU3RyaW5nSWRPclZhbHVl" +
            "UHJvdG8SPAoOZXJyb3JfcGFnZV91cmwYBSABKAsyJC5rZXlob2xlLmRicm9v" +
            "dC5TdHJpbmdJZE9yVmFsdWVQcm90bxrWCAoMU2VhcmNoU2VydmVyEjIKBG5h" +
            "bWUYASABKAsyJC5rZXlob2xlLmRicm9vdC5TdHJpbmdJZE9yVmFsdWVQcm90" +
            "bxIxCgN1cmwYAiABKAsyJC5rZXlob2xlLmRicm9vdC5TdHJpbmdJZE9yVmFs" +
            "dWVQcm90bxJoCgR0eXBlGAMgASgOMkkua2V5aG9sZS5kYnJvb3QuRW5kU25p" +
            "cHBldFByb3RvLlNlYXJjaENvbmZpZ1Byb3RvLlNlYXJjaFNlcnZlci5SZXN1" +
            "bHRUeXBlOg9SRVNVTFRfVFlQRV9LTUwSQAoSaHRtbF90cmFuc2Zvcm1fdXJs" +
            "GAQgASgLMiQua2V5aG9sZS5kYnJvb3QuU3RyaW5nSWRPclZhbHVlUHJvdG8S" +
            "PwoRa21sX3RyYW5zZm9ybV91cmwYBSABKAsyJC5rZXlob2xlLmRicm9vdC5T" +
            "dHJpbmdJZE9yVmFsdWVQcm90bxJmCg9zdXBwbGVtZW50YWxfdWkYBiABKAsy" +
            "TS5rZXlob2xlLmRicm9vdC5FbmRTbmlwcGV0UHJvdG8uU2VhcmNoQ29uZmln" +
            "UHJvdG8uU2VhcmNoU2VydmVyLlN1cHBsZW1lbnRhbFVpEjgKCnN1Z2dlc3Rp" +
            "b24YCSADKAsyJC5rZXlob2xlLmRicm9vdC5TdHJpbmdJZE9yVmFsdWVQcm90" +
            "bxJgCglzZWFyY2hsZXQYByADKAsyTS5rZXlob2xlLmRicm9vdC5FbmRTbmlw" +
            "cGV0UHJvdG8uU2VhcmNoQ29uZmlnUHJvdG8uU2VhcmNoU2VydmVyLlNlYXJj" +
            "aGxldFByb3RvEjYKDHJlcXVpcmVtZW50cxgIIAEoCzIgLmtleWhvbGUuZGJy" +
            "b290LlJlcXVpcmVtZW50UHJvdG8SPAoOc3VnZ2VzdF9zZXJ2ZXIYCiABKAsy" +
            "JC5rZXlob2xlLmRicm9vdC5TdHJpbmdJZE9yVmFsdWVQcm90bxqNAQoOU3Vw" +
            "cGxlbWVudGFsVWkSMQoDdXJsGAEgASgLMiQua2V5aG9sZS5kYnJvb3QuU3Ry" +
            "aW5nSWRPclZhbHVlUHJvdG8SMwoFbGFiZWwYAiABKAsyJC5rZXlob2xlLmRi" +
            "cm9vdC5TdHJpbmdJZE9yVmFsdWVQcm90bxITCgZoZWlnaHQYAyABKAU6AzE2" +
            "MBqvAQoOU2VhcmNobGV0UHJvdG8SMQoDdXJsGAEgASgLMiQua2V5aG9sZS5k" +
            "YnJvb3QuU3RyaW5nSWRPclZhbHVlUHJvdG8SMgoEbmFtZRgCIAEoCzIkLmtl" +
            "eWhvbGUuZGJyb290LlN0cmluZ0lkT3JWYWx1ZVByb3RvEjYKDHJlcXVpcmVt" +
            "ZW50cxgDIAEoCzIgLmtleWhvbGUuZGJyb290LlJlcXVpcmVtZW50UHJvdG8i" +
            "NgoKUmVzdWx0VHlwZRITCg9SRVNVTFRfVFlQRV9LTUwQABITCg9SRVNVTFRf" +
            "VFlQRV9YTUwQARqHAQoST25lYm94U2VydmljZVByb3RvEjkKC3NlcnZpY2Vf" +
            "dXJsGAEgASgLMiQua2V5aG9sZS5kYnJvb3QuU3RyaW5nSWRPclZhbHVlUHJv" +
            "dG8SNgoMcmVxdWlyZW1lbnRzGAIgASgLMiAua2V5aG9sZS5kYnJvb3QuUmVx" +
            "dWlyZW1lbnRQcm90bxpdCg9TZWFyY2hJbmZvUHJvdG8SMAoLZGVmYXVsdF91" +
            "cmwYASABKAk6G2h0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcxIYCg1nZW9j" +
            "b2RlX3BhcmFtGAIgASgJOgFxGkYKEVJvY2tUcmVlRGF0YVByb3RvEjEKA3Vy" +
            "bBgBIAEoCzIkLmtleWhvbGUuZGJyb290LlN0cmluZ0lkT3JWYWx1ZVByb3Rv" +
            "GrYHChRGaWxtc3RyaXBDb25maWdQcm90bxI2CgxyZXF1aXJlbWVudHMYASAB" +
            "KAsyIC5rZXlob2xlLmRicm9vdC5SZXF1aXJlbWVudFByb3RvEkMKFWFsbGV5" +
            "Y2F0X3VybF90ZW1wbGF0ZRgCIAEoCzIkLmtleWhvbGUuZGJyb290LlN0cmlu" +
            "Z0lkT3JWYWx1ZVByb3RvEkwKHmZhbGxiYWNrX2FsbGV5Y2F0X3VybF90ZW1w" +
            "bGF0ZRgJIAEoCzIkLmtleWhvbGUuZGJyb290LlN0cmluZ0lkT3JWYWx1ZVBy" +
            "b3RvEkMKFW1ldGFkYXRhX3VybF90ZW1wbGF0ZRgDIAEoCzIkLmtleWhvbGUu" +
            "ZGJyb290LlN0cmluZ0lkT3JWYWx1ZVByb3RvEkQKFnRodW1ibmFpbF91cmxf" +
            "dGVtcGxhdGUYBCABKAsyJC5rZXlob2xlLmRicm9vdC5TdHJpbmdJZE9yVmFs" +
            "dWVQcm90bxI+ChBrbWxfdXJsX3RlbXBsYXRlGAUgASgLMiQua2V5aG9sZS5k" +
            "YnJvb3QuU3RyaW5nSWRPclZhbHVlUHJvdG8SQAoSZmVhdHVyZWRfdG91cnNf" +
            "dXJsGAYgASgLMiQua2V5aG9sZS5kYnJvb3QuU3RyaW5nSWRPclZhbHVlUHJv" +
            "dG8SIAoYZW5hYmxlX3ZpZXdwb3J0X2ZhbGxiYWNrGAcgASgIEiIKGnZpZXdw" +
            "b3J0X2ZhbGxiYWNrX2Rpc3RhbmNlGAggASgNEmMKDGltYWdlcnlfdHlwZRgK" +
            "IAMoCzJNLmtleWhvbGUuZGJyb290LkVuZFNuaXBwZXRQcm90by5GaWxtc3Ry" +
            "aXBDb25maWdQcm90by5BbGxleWNhdEltYWdlcnlUeXBlUHJvdG8amgIKGEFs" +
            "bGV5Y2F0SW1hZ2VyeVR5cGVQcm90bxIXCg9pbWFnZXJ5X3R5cGVfaWQYASAB" +
            "KAUSGgoSaW1hZ2VyeV90eXBlX2xhYmVsGAIgASgJEkMKFW1ldGFkYXRhX3Vy" +
            "bF90ZW1wbGF0ZRgDIAEoCzIkLmtleWhvbGUuZGJyb290LlN0cmluZ0lkT3JW" +
            "YWx1ZVByb3RvEkQKFnRodW1ibmFpbF91cmxfdGVtcGxhdGUYBCABKAsyJC5r" +
            "ZXlob2xlLmRicm9vdC5TdHJpbmdJZE9yVmFsdWVQcm90bxI+ChBrbWxfdXJs" +
            "X3RlbXBsYXRlGAUgASgLMiQua2V5aG9sZS5kYnJvb3QuU3RyaW5nSWRPclZh" +
            "bHVlUHJvdG8aQgoNU3RhckRhdGFQcm90bxIxCgN1cmwYASABKAsyJC5rZXlo" +
            "b2xlLmRicm9vdC5TdHJpbmdJZE9yVmFsdWVQcm90byJxCg5EYlJvb3RSZWZQ" +
            "cm90bxILCgN1cmwYAiACKAkSGgoLaXNfY3JpdGljYWwYASABKAg6BWZhbHNl" +
            "EjYKDHJlcXVpcmVtZW50cxgDIAEoCzIgLmtleWhvbGUuZGJyb290LlJlcXVp" +
            "cmVtZW50UHJvdG8iMAoURGF0YWJhc2VWZXJzaW9uUHJvdG8SGAoQcXVhZHRy" +
            "ZWVfdmVyc2lvbhgBIAIoDSK9BQoLRGJSb290UHJvdG8SOwoNZGF0YWJhc2Vf" +
            "bmFtZRgPIAEoCzIkLmtleWhvbGUuZGJyb290LlN0cmluZ0lkT3JWYWx1ZVBy" +
            "b3RvEh0KD2ltYWdlcnlfcHJlc2VudBgBIAEoCDoEdHJ1ZRIcCg1wcm90b19p" +
            "bWFnZXJ5GA4gASgIOgVmYWxzZRIeCg90ZXJyYWluX3ByZXNlbnQYAiABKAg6" +
            "BWZhbHNlEjgKDXByb3ZpZGVyX2luZm8YAyADKAsyIS5rZXlob2xlLmRicm9v" +
            "dC5Qcm92aWRlckluZm9Qcm90bxI6Cg5uZXN0ZWRfZmVhdHVyZRgEIAMoCzIi" +
            "LmtleWhvbGUuZGJyb290Lk5lc3RlZEZlYXR1cmVQcm90bxI8Cg9zdHlsZV9h" +
            "dHRyaWJ1dGUYBSADKAsyIy5rZXlob2xlLmRicm9vdC5TdHlsZUF0dHJpYnV0" +
            "ZVByb3RvEjAKCXN0eWxlX21hcBgGIAMoCzIdLmtleWhvbGUuZGJyb290LlN0" +
            "eWxlTWFwUHJvdG8SNAoLZW5kX3NuaXBwZXQYByABKAsyHy5rZXlob2xlLmRi" +
            "cm9vdC5FbmRTbmlwcGV0UHJvdG8SOwoRdHJhbnNsYXRpb25fZW50cnkYCCAD" +
            "KAsyIC5rZXlob2xlLmRicm9vdC5TdHJpbmdFbnRyeVByb3RvEhQKCGxhbmd1" +
            "YWdlGAkgASgJOgJlbhISCgd2ZXJzaW9uGAogASgFOgE1EjgKEGRicm9vdF9y" +
            "ZWZlcmVuY2UYCyADKAsyHi5rZXlob2xlLmRicm9vdC5EYlJvb3RSZWZQcm90" +
            "bxI+ChBkYXRhYmFzZV92ZXJzaW9uGA0gASgLMiQua2V5aG9sZS5kYnJvb3Qu" +
            "RGF0YWJhc2VWZXJzaW9uUHJvdG8SFwoPcmVmcmVzaF90aW1lb3V0GBAgASgF" +
            "IrgBChRFbmNyeXB0ZWREYlJvb3RQcm90bxJMCg9lbmNyeXB0aW9uX3R5cGUY" +
            "ASABKA4yMy5rZXlob2xlLmRicm9vdC5FbmNyeXB0ZWREYlJvb3RQcm90by5F" +
            "bmNyeXB0aW9uVHlwZRIXCg9lbmNyeXB0aW9uX2RhdGEYAiABKAwSEwoLZGJy" +
            "b290X2RhdGEYAyABKAwiJAoORW5jcnlwdGlvblR5cGUSEgoORU5DUllQVElP" +
            "Tl9YT1IQAEIhCh9jb20uZ29vZ2xlLmtleWhvbGUudG9vbHMuZGJyb290");
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.StringEntryProto), global::Keyhole.Dbroot.StringEntryProto.Parser, new[]{ "StringId", "StringValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.StringIdOrValueProto), global::Keyhole.Dbroot.StringIdOrValueProto.Parser, new[]{ "StringId", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.PlanetModelProto), global::Keyhole.Dbroot.PlanetModelProto.Parser, new[]{ "Radius", "Flattening", "ElevationBias", "NegativeAltitudeExponentBias", "CompressedNegativeAltitudeThreshold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.ProviderInfoProto), global::Keyhole.Dbroot.ProviderInfoProto.Parser, new[]{ "ProviderId", "CopyrightString", "VerticalPixelOffset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.PopUpProto), global::Keyhole.Dbroot.PopUpProto.Parser, new[]{ "IsBalloonStyle", "Text", "BackgroundColorAbgr", "TextColorAbgr" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.StyleAttributeProto), global::Keyhole.Dbroot.StyleAttributeProto.Parser, new[]{ "StyleId", "ProviderId", "PolyColorAbgr", "LineColorAbgr", "LineWidth", "LabelColorAbgr", "LabelScale", "PlacemarkIconColorAbgr", "PlacemarkIconScale", "PlacemarkIconPath", "PlacemarkIconX", "PlacemarkIconY", "PlacemarkIconWidth", "PlacemarkIconHeight", "PopUp", "DrawFlag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.StyleMapProto), global::Keyhole.Dbroot.StyleMapProto.Parser, new[]{ "StyleMapId", "ChannelId", "NormalStyleAttribute", "HighlightStyleAttribute" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.ZoomRangeProto), global::Keyhole.Dbroot.ZoomRangeProto.Parser, new[]{ "MinZoom", "MaxZoom" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.DrawFlagProto), global::Keyhole.Dbroot.DrawFlagProto.Parser, new[]{ "DrawFlagType" }, null, new[]{ typeof(global::Keyhole.Dbroot.DrawFlagProto.Types.DrawFlagType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.LayerProto), global::Keyhole.Dbroot.LayerProto.Parser, new[]{ "ZoomRange", "PreserveTextLevel", "LodBeginTransition", "LodEndTransition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.FolderProto), global::Keyhole.Dbroot.FolderProto.Parser, new[]{ "IsExpandable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.RequirementProto), global::Keyhole.Dbroot.RequirementProto.Parser, new[]{ "RequiredVram", "RequiredClientVer", "Probability", "RequiredUserAgent", "RequiredClientCapabilities" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.LookAtProto), global::Keyhole.Dbroot.LookAtProto.Parser, new[]{ "Longitude", "Latitude", "Range", "Tilt", "Heading" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.NestedFeatureProto), global::Keyhole.Dbroot.NestedFeatureProto.Parser, new[]{ "FeatureType", "KmlUrl", "DatabaseUrl", "Layer", "Folder", "Requirement", "ChannelId", "DisplayName", "IsVisible", "IsEnabled", "IsChecked", "LayerMenuIconPath", "Description", "LookAt", "AssetUuid", "IsSaveLocked", "Children", "ClientConfigScriptName", "DioramaDataChannelBase", "ReplicaDataChannelBase" }, null, new[]{ typeof(global::Keyhole.Dbroot.NestedFeatureProto.Types.FeatureType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.MfeDomainFeaturesProto), global::Keyhole.Dbroot.MfeDomainFeaturesProto.Parser, new[]{ "CountryCode", "DomainName", "SupportedFeatures" }, null, new[]{ typeof(global::Keyhole.Dbroot.MfeDomainFeaturesProto.Types.SupportedFeature) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.ClientOptionsProto), global::Keyhole.Dbroot.ClientOptionsProto.Parser, new[]{ "DisableDiskCache", "DisableEmbeddedBrowserVista", "DrawAtmosphere", "DrawStars", "ShaderFilePrefix", "UseProtobufQuadtreePackets", "UseExtendedCopyrightIds", "PrecipitationsOptions", "CaptureOptions", "Show2DMapsIcon", "DisableInternalBrowser", "InternalBrowserBlacklist", "InternalBrowserOriginWhitelist", "PolarTileMergingLevel", "JsBridgeRequestWhitelist", "MapsOptions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions), global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions.Parser, new[]{ "ImageUrl", "ImageExpireTime", "MaxColorDistance", "ImageLevel", "WeatherMapping", "CloudsLayerUrl", "AnimationDecelerationDelay" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions.Types.WeatherMapping), global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions.Types.WeatherMapping.Parser, new[]{ "ColorAbgr", "WeatherType", "Elongation", "Opacity", "FogDensity", "Speed0", "Speed1", "Speed2", "Speed3" }, null, new[]{ typeof(global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions.Types.WeatherMapping.Types.WeatherType) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.ClientOptionsProto.Types.CaptureOptions), global::Keyhole.Dbroot.ClientOptionsProto.Types.CaptureOptions.Parser, new[]{ "AllowSaveAsImage", "MaxFreeCaptureRes", "MaxPremiumCaptureRes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.ClientOptionsProto.Types.MapsOptions), global::Keyhole.Dbroot.ClientOptionsProto.Types.MapsOptions.Parser, new[]{ "EnableMaps", "DocsAutoDownloadEnabled", "DocsAutoDownloadInterval", "DocsAutoUploadEnabled", "DocsAutoUploadDelay" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.FetchingOptionsProto), global::Keyhole.Dbroot.FetchingOptionsProto.Parser, new[]{ "MaxRequestsPerQuery", "ForceMaxRequestsPerQuery", "SortBatches", "MaxDrawable", "MaxImagery", "MaxTerrain", "MaxQuadtree", "MaxDioramaMetadata", "MaxDioramaData", "MaxConsumerFetchRatio", "MaxProEcFetchRatio", "SafeOverallQps", "SafeImageryQps", "DomainsForHttps", "HostsForHttp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.TimeMachineOptionsProto), global::Keyhole.Dbroot.TimeMachineOptionsProto.Parser, new[]{ "ServerUrl", "IsTimemachine", "DwellTimeMs", "DiscoverabilityAltitudeMeters" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.AutopiaOptionsProto), global::Keyhole.Dbroot.AutopiaOptionsProto.Parser, new[]{ "MetadataServerUrl", "DepthmapServerUrl", "CoverageOverlayUrl", "MaxImageryQps", "MaxMetadataDepthmapQps" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.CSIOptionsProto), global::Keyhole.Dbroot.CSIOptionsProto.Parser, new[]{ "SamplingPercentage", "ExperimentId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.SearchTabProto), global::Keyhole.Dbroot.SearchTabProto.Parser, new[]{ "IsVisible", "TabLabel", "BaseUrl", "ViewportPrefix", "InputBox", "Requirement" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.SearchTabProto.Types.InputBoxInfo), global::Keyhole.Dbroot.SearchTabProto.Types.InputBoxInfo.Parser, new[]{ "Label", "QueryVerb", "QueryPrepend" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.CobrandProto), global::Keyhole.Dbroot.CobrandProto.Parser, new[]{ "LogoUrl", "XCoord", "YCoord", "TiePoint", "ScreenSize" }, null, new[]{ typeof(global::Keyhole.Dbroot.CobrandProto.Types.TiePoint) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.CobrandProto.Types.Coord), global::Keyhole.Dbroot.CobrandProto.Types.Coord.Parser, new[]{ "Value", "IsRelative" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.DatabaseDescriptionProto), global::Keyhole.Dbroot.DatabaseDescriptionProto.Parser, new[]{ "DatabaseName", "DatabaseUrl" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.ConfigScriptProto), global::Keyhole.Dbroot.ConfigScriptProto.Parser, new[]{ "ScriptName", "ScriptData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.SwoopParamsProto), global::Keyhole.Dbroot.SwoopParamsProto.Parser, new[]{ "StartDistInMeters" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.PostingServerProto), global::Keyhole.Dbroot.PostingServerProto.Parser, new[]{ "Name", "BaseUrl", "PostWizardPath", "FileSubmitPath" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.PlanetaryDatabaseProto), global::Keyhole.Dbroot.PlanetaryDatabaseProto.Parser, new[]{ "Url", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.LogServerProto), global::Keyhole.Dbroot.LogServerProto.Parser, new[]{ "Url", "Enable", "ThrottlingFactor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.EndSnippetProto), global::Keyhole.Dbroot.EndSnippetProto.Parser, new[]{ "Model", "AuthServerUrl", "DisableAuthentication", "MfeDomains", "MfeLangParam", "AdsUrlPatterns", "ReverseGeocoderUrl", "ReverseGeocoderProtocolVersion", "SkyDatabaseIsAvailable", "SkyDatabaseUrl", "DefaultWebPageIntlUrl", "NumStartUpTips", "StartUpTipsUrl", "NumProStartUpTips", "ProStartUpTipsUrl", "StartupTipsIntlUrl", "UserGuideIntlUrl", "SupportCenterIntlUrl", "BusinessListingIntlUrl", "SupportAnswerIntlUrl", "SupportTopicIntlUrl", "SupportRequestIntlUrl", "EarthIntlUrl", "AddContentUrl", "SketchupNotInstalledUrl", "SketchupErrorUrl", "FreeLicenseUrl", "ProLicenseUrl", "TutorialUrl", "KeyboardShortcutsUrl", "ReleaseNotesUrl", "HideUserData", "UseGeLogo", "DioramaDescriptionUrlBase", "DioramaDefaultColor", "DioramaBlacklistUrl", "ClientOptions", "FetchingOptions", "TimeMachineOptions", "CsiOptions", "SearchTab", "CobrandInfo", "ValidDatabase", "ConfigScript", "DeauthServerUrl", "SwoopParameters", "BbsServerInfo", "DataErrorServerInfo", "PlanetaryDatabase", "LogServer", "AutopiaOptions", "SearchConfig", "SearchInfo", "ElevationServiceBaseUrl", "ElevationProfileQueryDelay", "ProUpgradeUrl", "EarthCommunityUrl", "GoogleMapsUrl", "SharingUrl", "PrivacyPolicyUrl", "DoGplusUserCheck", "RocktreeDataProto", "FilmstripConfig", "ShowSigninButton", "ProMeasureUpsellUrl", "ProPrintUpsellUrl", "StarDataProto", "FeedbackUrl", "Oauth2LoginUrl" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto), global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Parser, new[]{ "SearchServer", "OneboxService", "KmlSearchUrl", "KmlRenderUrl", "SearchHistoryUrl", "ErrorPageUrl" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer), global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Parser, new[]{ "Name", "Url", "Type", "HtmlTransformUrl", "KmlTransformUrl", "SupplementalUi", "Suggestion", "Searchlet", "Requirements", "SuggestServer" }, null, new[]{ typeof(global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.ResultType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.SupplementalUi), global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.SupplementalUi.Parser, new[]{ "Url", "Label", "Height" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.SearchletProto), global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.SearchletProto.Parser, new[]{ "Url", "Name", "Requirements" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.OneboxServiceProto), global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.OneboxServiceProto.Parser, new[]{ "ServiceUrl", "Requirements" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.EndSnippetProto.Types.SearchInfoProto), global::Keyhole.Dbroot.EndSnippetProto.Types.SearchInfoProto.Parser, new[]{ "DefaultUrl", "GeocodeParam" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.EndSnippetProto.Types.RockTreeDataProto), global::Keyhole.Dbroot.EndSnippetProto.Types.RockTreeDataProto.Parser, new[]{ "Url" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.EndSnippetProto.Types.FilmstripConfigProto), global::Keyhole.Dbroot.EndSnippetProto.Types.FilmstripConfigProto.Parser, new[]{ "Requirements", "AlleycatUrlTemplate", "FallbackAlleycatUrlTemplate", "MetadataUrlTemplate", "ThumbnailUrlTemplate", "KmlUrlTemplate", "FeaturedToursUrl", "EnableViewportFallback", "ViewportFallbackDistance", "ImageryType" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.EndSnippetProto.Types.FilmstripConfigProto.Types.AlleycatImageryTypeProto), global::Keyhole.Dbroot.EndSnippetProto.Types.FilmstripConfigProto.Types.AlleycatImageryTypeProto.Parser, new[]{ "ImageryTypeId", "ImageryTypeLabel", "MetadataUrlTemplate", "ThumbnailUrlTemplate", "KmlUrlTemplate" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.EndSnippetProto.Types.StarDataProto), global::Keyhole.Dbroot.EndSnippetProto.Types.StarDataProto.Parser, new[]{ "Url" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.DbRootRefProto), global::Keyhole.Dbroot.DbRootRefProto.Parser, new[]{ "Url", "IsCritical", "Requirements" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.DatabaseVersionProto), global::Keyhole.Dbroot.DatabaseVersionProto.Parser, new[]{ "QuadtreeVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.DbRootProto), global::Keyhole.Dbroot.DbRootProto.Parser, new[]{ "DatabaseName", "ImageryPresent", "ProtoImagery", "TerrainPresent", "ProviderInfo", "NestedFeature", "StyleAttribute", "StyleMap", "EndSnippet", "TranslationEntry", "Language", "Version", "DbrootReference", "DatabaseVersion", "RefreshTimeout" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keyhole.Dbroot.EncryptedDbRootProto), global::Keyhole.Dbroot.EncryptedDbRootProto.Parser, new[]{ "EncryptionType", "EncryptionData", "DbrootData" }, null, new[]{ typeof(global::Keyhole.Dbroot.EncryptedDbRootProto.Types.EncryptionType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Protocol message that pairs an ID (which must be unique in the entire dbroot
  /// hierarchy downloaded in one session) with an actual string.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class StringEntryProto : pb::IMessage<StringEntryProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StringEntryProto> _parser = new pb::MessageParser<StringEntryProto>(() => new StringEntryProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StringEntryProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StringEntryProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StringEntryProto(StringEntryProto other) : this() {
      _hasBits0 = other._hasBits0;
      stringId_ = other.stringId_;
      stringValue_ = other.stringValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StringEntryProto Clone() {
      return new StringEntryProto(this);
    }

    /// <summary>Field number for the "string_id" field.</summary>
    public const int StringIdFieldNumber = 1;
    private readonly static uint StringIdDefaultValue = 0;

    private uint stringId_;
    /// <summary>
    /// Unique ID of string used in other parts of dbroot. Always use 4 bytes
    /// for storage to avoid ints taking way more space than this, since we will
    /// use large numbers frequently.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint StringId {
      get { if ((_hasBits0 & 1) != 0) { return stringId_; } else { return StringIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        stringId_ = value;
      }
    }
    /// <summary>Gets whether the "string_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStringId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "string_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStringId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 2;
    private readonly static string StringValueDefaultValue = "";

    private string stringValue_;
    /// <summary>
    /// Actual value of string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StringValue {
      get { return stringValue_ ?? StringValueDefaultValue; }
      set {
        stringValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "string_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStringValue {
      get { return stringValue_ != null; }
    }
    /// <summary>Clears the value of the "string_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStringValue() {
      stringValue_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StringEntryProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StringEntryProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StringId != other.StringId) return false;
      if (StringValue != other.StringValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStringId) hash ^= StringId.GetHashCode();
      if (HasStringValue) hash ^= StringValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStringId) {
        output.WriteRawTag(13);
        output.WriteFixed32(StringId);
      }
      if (HasStringValue) {
        output.WriteRawTag(18);
        output.WriteString(StringValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStringId) {
        output.WriteRawTag(13);
        output.WriteFixed32(StringId);
      }
      if (HasStringValue) {
        output.WriteRawTag(18);
        output.WriteString(StringValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasStringId) {
        size += 1 + 4;
      }
      if (HasStringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StringEntryProto other) {
      if (other == null) {
        return;
      }
      if (other.HasStringId) {
        StringId = other.StringId;
      }
      if (other.HasStringValue) {
        StringValue = other.StringValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            StringId = input.ReadFixed32();
            break;
          }
          case 18: {
            StringValue = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            StringId = input.ReadFixed32();
            break;
          }
          case 18: {
            StringValue = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Simple pair that can contain either a string id (which must be unique across
  /// all ids in the dbroot hierarchy) or an actual value. If both values are
  /// present, behavior of the client is undefined and implementation dependent.
  /// Nearly all string values in other protocol messages use this message to
  /// allow strings to be specified as an index in the translation table, or
  /// directly (which eliminates the need for any lookup)
  /// Strings that must be translated (e.g. not the same across all languages)
  /// should probably use the string_id field so that the translation (which
  /// varies) can be put in the translation table portion of the dbroot
  /// (see DbRootProto below). This allows the part that references string_id
  /// to be the same across all language versions of dbroot, and have only one
  /// dbroot object that changes across different languages.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class StringIdOrValueProto : pb::IMessage<StringIdOrValueProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StringIdOrValueProto> _parser = new pb::MessageParser<StringIdOrValueProto>(() => new StringIdOrValueProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StringIdOrValueProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StringIdOrValueProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StringIdOrValueProto(StringIdOrValueProto other) : this() {
      _hasBits0 = other._hasBits0;
      stringId_ = other.stringId_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StringIdOrValueProto Clone() {
      return new StringIdOrValueProto(this);
    }

    /// <summary>Field number for the "string_id" field.</summary>
    public const int StringIdFieldNumber = 1;
    private readonly static uint StringIdDefaultValue = 0;

    private uint stringId_;
    /// <summary>
    /// Id of string to look up in translation table (see DbRootProto)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint StringId {
      get { if ((_hasBits0 & 1) != 0) { return stringId_; } else { return StringIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        stringId_ = value;
      }
    }
    /// <summary>Gets whether the "string_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStringId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "string_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStringId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static string ValueDefaultValue = "";

    private string value_;
    /// <summary>
    /// Actual value of string, if present - does not require any lookup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValue() {
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StringIdOrValueProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StringIdOrValueProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StringId != other.StringId) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStringId) hash ^= StringId.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStringId) {
        output.WriteRawTag(13);
        output.WriteFixed32(StringId);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStringId) {
        output.WriteRawTag(13);
        output.WriteFixed32(StringId);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasStringId) {
        size += 1 + 4;
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StringIdOrValueProto other) {
      if (other == null) {
        return;
      }
      if (other.HasStringId) {
        StringId = other.StringId;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            StringId = input.ReadFixed32();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            StringId = input.ReadFixed32();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// List of values that describe the planet size and shape (assumed to be an
  /// oblate spheroid) and extra data that allow encoding negative altitudes under
  /// the water surface
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PlanetModelProto : pb::IMessage<PlanetModelProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlanetModelProto> _parser = new pb::MessageParser<PlanetModelProto>(() => new PlanetModelProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlanetModelProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlanetModelProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlanetModelProto(PlanetModelProto other) : this() {
      _hasBits0 = other._hasBits0;
      radius_ = other.radius_;
      flattening_ = other.flattening_;
      elevationBias_ = other.elevationBias_;
      negativeAltitudeExponentBias_ = other.negativeAltitudeExponentBias_;
      compressedNegativeAltitudeThreshold_ = other.compressedNegativeAltitudeThreshold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlanetModelProto Clone() {
      return new PlanetModelProto(this);
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 1;
    private readonly static double RadiusDefaultValue = 6378.14D;

    private double radius_;
    /// <summary>
    /// Mean planet radius. Default value is the WGS84 model for earth.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Radius {
      get { if ((_hasBits0 & 1) != 0) { return radius_; } else { return RadiusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        radius_ = value;
      }
    }
    /// <summary>Gets whether the "radius" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRadius {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "radius" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRadius() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "flattening" field.</summary>
    public const int FlatteningFieldNumber = 2;
    private readonly static double FlatteningDefaultValue = 0.00335281D;

    private double flattening_;
    /// <summary>
    /// Planet flattening. Default value is 1.0/298.257223563 (from  WGS84)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Flattening {
      get { if ((_hasBits0 & 2) != 0) { return flattening_; } else { return FlatteningDefaultValue; } }
      set {
        _hasBits0 |= 2;
        flattening_ = value;
      }
    }
    /// <summary>Gets whether the "flattening" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlattening {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "flattening" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlattening() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "elevation_bias" field.</summary>
    public const int ElevationBiasFieldNumber = 4;
    private readonly static double ElevationBiasDefaultValue = 0D;

    private double elevationBias_;
    /// <summary>
    /// Elevation bias
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ElevationBias {
      get { if ((_hasBits0 & 4) != 0) { return elevationBias_; } else { return ElevationBiasDefaultValue; } }
      set {
        _hasBits0 |= 4;
        elevationBias_ = value;
      }
    }
    /// <summary>Gets whether the "elevation_bias" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasElevationBias {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "elevation_bias" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearElevationBias() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "negative_altitude_exponent_bias" field.</summary>
    public const int NegativeAltitudeExponentBiasFieldNumber = 5;
    private readonly static int NegativeAltitudeExponentBiasDefaultValue = 0;

    private int negativeAltitudeExponentBias_;
    /// <summary>
    /// Bias for negative altitude so that ocean tiles can be streamed to older
    /// clients
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NegativeAltitudeExponentBias {
      get { if ((_hasBits0 & 8) != 0) { return negativeAltitudeExponentBias_; } else { return NegativeAltitudeExponentBiasDefaultValue; } }
      set {
        _hasBits0 |= 8;
        negativeAltitudeExponentBias_ = value;
      }
    }
    /// <summary>Gets whether the "negative_altitude_exponent_bias" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNegativeAltitudeExponentBias {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "negative_altitude_exponent_bias" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNegativeAltitudeExponentBias() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "compressed_negative_altitude_threshold" field.</summary>
    public const int CompressedNegativeAltitudeThresholdFieldNumber = 6;
    private readonly static double CompressedNegativeAltitudeThresholdDefaultValue = 0D;

    private double compressedNegativeAltitudeThreshold_;
    /// <summary>
    /// Threshold below which negative altitudes are compressed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CompressedNegativeAltitudeThreshold {
      get { if ((_hasBits0 & 16) != 0) { return compressedNegativeAltitudeThreshold_; } else { return CompressedNegativeAltitudeThresholdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        compressedNegativeAltitudeThreshold_ = value;
      }
    }
    /// <summary>Gets whether the "compressed_negative_altitude_threshold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCompressedNegativeAltitudeThreshold {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "compressed_negative_altitude_threshold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCompressedNegativeAltitudeThreshold() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlanetModelProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlanetModelProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Radius, other.Radius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Flattening, other.Flattening)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ElevationBias, other.ElevationBias)) return false;
      if (NegativeAltitudeExponentBias != other.NegativeAltitudeExponentBias) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CompressedNegativeAltitudeThreshold, other.CompressedNegativeAltitudeThreshold)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Radius);
      if (HasFlattening) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Flattening);
      if (HasElevationBias) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ElevationBias);
      if (HasNegativeAltitudeExponentBias) hash ^= NegativeAltitudeExponentBias.GetHashCode();
      if (HasCompressedNegativeAltitudeThreshold) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CompressedNegativeAltitudeThreshold);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRadius) {
        output.WriteRawTag(9);
        output.WriteDouble(Radius);
      }
      if (HasFlattening) {
        output.WriteRawTag(17);
        output.WriteDouble(Flattening);
      }
      if (HasElevationBias) {
        output.WriteRawTag(33);
        output.WriteDouble(ElevationBias);
      }
      if (HasNegativeAltitudeExponentBias) {
        output.WriteRawTag(40);
        output.WriteInt32(NegativeAltitudeExponentBias);
      }
      if (HasCompressedNegativeAltitudeThreshold) {
        output.WriteRawTag(49);
        output.WriteDouble(CompressedNegativeAltitudeThreshold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRadius) {
        output.WriteRawTag(9);
        output.WriteDouble(Radius);
      }
      if (HasFlattening) {
        output.WriteRawTag(17);
        output.WriteDouble(Flattening);
      }
      if (HasElevationBias) {
        output.WriteRawTag(33);
        output.WriteDouble(ElevationBias);
      }
      if (HasNegativeAltitudeExponentBias) {
        output.WriteRawTag(40);
        output.WriteInt32(NegativeAltitudeExponentBias);
      }
      if (HasCompressedNegativeAltitudeThreshold) {
        output.WriteRawTag(49);
        output.WriteDouble(CompressedNegativeAltitudeThreshold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRadius) {
        size += 1 + 8;
      }
      if (HasFlattening) {
        size += 1 + 8;
      }
      if (HasElevationBias) {
        size += 1 + 8;
      }
      if (HasNegativeAltitudeExponentBias) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NegativeAltitudeExponentBias);
      }
      if (HasCompressedNegativeAltitudeThreshold) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlanetModelProto other) {
      if (other == null) {
        return;
      }
      if (other.HasRadius) {
        Radius = other.Radius;
      }
      if (other.HasFlattening) {
        Flattening = other.Flattening;
      }
      if (other.HasElevationBias) {
        ElevationBias = other.ElevationBias;
      }
      if (other.HasNegativeAltitudeExponentBias) {
        NegativeAltitudeExponentBias = other.NegativeAltitudeExponentBias;
      }
      if (other.HasCompressedNegativeAltitudeThreshold) {
        CompressedNegativeAltitudeThreshold = other.CompressedNegativeAltitudeThreshold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Radius = input.ReadDouble();
            break;
          }
          case 17: {
            Flattening = input.ReadDouble();
            break;
          }
          case 33: {
            ElevationBias = input.ReadDouble();
            break;
          }
          case 40: {
            NegativeAltitudeExponentBias = input.ReadInt32();
            break;
          }
          case 49: {
            CompressedNegativeAltitudeThreshold = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Radius = input.ReadDouble();
            break;
          }
          case 17: {
            Flattening = input.ReadDouble();
            break;
          }
          case 33: {
            ElevationBias = input.ReadDouble();
            break;
          }
          case 40: {
            NegativeAltitudeExponentBias = input.ReadInt32();
            break;
          }
          case 49: {
            CompressedNegativeAltitudeThreshold = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The client has the ability to display a copyright message on a per-layer
  /// basis only. If you have multiple providers' data contained in one layer and
  /// need to display a copyright for each, you'll have to break the layer into
  /// multiples, each with its own provider specified.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ProviderInfoProto : pb::IMessage<ProviderInfoProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProviderInfoProto> _parser = new pb::MessageParser<ProviderInfoProto>(() => new ProviderInfoProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProviderInfoProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProviderInfoProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProviderInfoProto(ProviderInfoProto other) : this() {
      _hasBits0 = other._hasBits0;
      providerId_ = other.providerId_;
      copyrightString_ = other.copyrightString_ != null ? other.copyrightString_.Clone() : null;
      verticalPixelOffset_ = other.verticalPixelOffset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProviderInfoProto Clone() {
      return new ProviderInfoProto(this);
    }

    /// <summary>Field number for the "provider_id" field.</summary>
    public const int ProviderIdFieldNumber = 1;
    private readonly static int ProviderIdDefaultValue = 0;

    private int providerId_;
    /// <summary>
    /// Must be unique across all providers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ProviderId {
      get { if ((_hasBits0 & 1) != 0) { return providerId_; } else { return ProviderIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        providerId_ = value;
      }
    }
    /// <summary>Gets whether the "provider_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProviderId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "provider_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProviderId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "copyright_string" field.</summary>
    public const int CopyrightStringFieldNumber = 2;
    private global::Keyhole.Dbroot.StringIdOrValueProto copyrightString_;
    /// <summary>
    /// Contents of the copyright as an actual string or index in translation
    /// table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto CopyrightString {
      get { return copyrightString_; }
      set {
        copyrightString_ = value;
      }
    }

    /// <summary>Field number for the "vertical_pixel_offset" field.</summary>
    public const int VerticalPixelOffsetFieldNumber = 3;
    private readonly static int VerticalPixelOffsetDefaultValue = -1;

    private int verticalPixelOffset_;
    /// <summary>
    /// Distance in pixels that indicates how far from the bottom of the screen
    /// the copyright appears for that provider.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VerticalPixelOffset {
      get { if ((_hasBits0 & 2) != 0) { return verticalPixelOffset_; } else { return VerticalPixelOffsetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        verticalPixelOffset_ = value;
      }
    }
    /// <summary>Gets whether the "vertical_pixel_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVerticalPixelOffset {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "vertical_pixel_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVerticalPixelOffset() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProviderInfoProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProviderInfoProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProviderId != other.ProviderId) return false;
      if (!object.Equals(CopyrightString, other.CopyrightString)) return false;
      if (VerticalPixelOffset != other.VerticalPixelOffset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProviderId) hash ^= ProviderId.GetHashCode();
      if (copyrightString_ != null) hash ^= CopyrightString.GetHashCode();
      if (HasVerticalPixelOffset) hash ^= VerticalPixelOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasProviderId) {
        output.WriteRawTag(8);
        output.WriteInt32(ProviderId);
      }
      if (copyrightString_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CopyrightString);
      }
      if (HasVerticalPixelOffset) {
        output.WriteRawTag(24);
        output.WriteInt32(VerticalPixelOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasProviderId) {
        output.WriteRawTag(8);
        output.WriteInt32(ProviderId);
      }
      if (copyrightString_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CopyrightString);
      }
      if (HasVerticalPixelOffset) {
        output.WriteRawTag(24);
        output.WriteInt32(VerticalPixelOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasProviderId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProviderId);
      }
      if (copyrightString_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CopyrightString);
      }
      if (HasVerticalPixelOffset) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VerticalPixelOffset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProviderInfoProto other) {
      if (other == null) {
        return;
      }
      if (other.HasProviderId) {
        ProviderId = other.ProviderId;
      }
      if (other.copyrightString_ != null) {
        if (copyrightString_ == null) {
          CopyrightString = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        CopyrightString.MergeFrom(other.CopyrightString);
      }
      if (other.HasVerticalPixelOffset) {
        VerticalPixelOffset = other.VerticalPixelOffset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProviderId = input.ReadInt32();
            break;
          }
          case 18: {
            if (copyrightString_ == null) {
              CopyrightString = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(CopyrightString);
            break;
          }
          case 24: {
            VerticalPixelOffset = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ProviderId = input.ReadInt32();
            break;
          }
          case 18: {
            if (copyrightString_ == null) {
              CopyrightString = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(CopyrightString);
            break;
          }
          case 24: {
            VerticalPixelOffset = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// When a placemark is clicked on a pop-up bubble 'pops up'. Only enabled for
  /// point layers, the pop-up bubbles support a very limited set of HTML and
  /// image linking. For a full description of what can be contained in the
  /// pop-up bubble description go to:
  /// http://earth.google.com/kml/kml_tags_21.html#description
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PopUpProto : pb::IMessage<PopUpProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PopUpProto> _parser = new pb::MessageParser<PopUpProto>(() => new PopUpProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PopUpProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PopUpProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PopUpProto(PopUpProto other) : this() {
      _hasBits0 = other._hasBits0;
      isBalloonStyle_ = other.isBalloonStyle_;
      text_ = other.text_ != null ? other.text_.Clone() : null;
      backgroundColorAbgr_ = other.backgroundColorAbgr_;
      textColorAbgr_ = other.textColorAbgr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PopUpProto Clone() {
      return new PopUpProto(this);
    }

    /// <summary>Field number for the "is_balloon_style" field.</summary>
    public const int IsBalloonStyleFieldNumber = 1;
    private readonly static bool IsBalloonStyleDefaultValue = false;

    private bool isBalloonStyle_;
    /// <summary>
    /// Over-rides the default client pop-up html which contains entity references
    /// to $[name] and $[geDirections]. Set this field to true if you want
    /// to control all of the HTML behavior in the bubble.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBalloonStyle {
      get { if ((_hasBits0 & 1) != 0) { return isBalloonStyle_; } else { return IsBalloonStyleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isBalloonStyle_ = value;
      }
    }
    /// <summary>Gets whether the "is_balloon_style" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsBalloonStyle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_balloon_style" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsBalloonStyle() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private global::Keyhole.Dbroot.StringIdOrValueProto text_;
    /// <summary>
    /// Text contents of description or balloon style.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "background_color_abgr" field.</summary>
    public const int BackgroundColorAbgrFieldNumber = 3;
    private readonly static uint BackgroundColorAbgrDefaultValue = 4294967295;

    private uint backgroundColorAbgr_;
    /// <summary>
    /// Background and text color in balloon. Both colors must be specified
    /// in abgr format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BackgroundColorAbgr {
      get { if ((_hasBits0 & 2) != 0) { return backgroundColorAbgr_; } else { return BackgroundColorAbgrDefaultValue; } }
      set {
        _hasBits0 |= 2;
        backgroundColorAbgr_ = value;
      }
    }
    /// <summary>Gets whether the "background_color_abgr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBackgroundColorAbgr {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "background_color_abgr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBackgroundColorAbgr() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "text_color_abgr" field.</summary>
    public const int TextColorAbgrFieldNumber = 4;
    private readonly static uint TextColorAbgrDefaultValue = 4278190080;

    private uint textColorAbgr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TextColorAbgr {
      get { if ((_hasBits0 & 4) != 0) { return textColorAbgr_; } else { return TextColorAbgrDefaultValue; } }
      set {
        _hasBits0 |= 4;
        textColorAbgr_ = value;
      }
    }
    /// <summary>Gets whether the "text_color_abgr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTextColorAbgr {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "text_color_abgr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTextColorAbgr() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PopUpProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PopUpProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsBalloonStyle != other.IsBalloonStyle) return false;
      if (!object.Equals(Text, other.Text)) return false;
      if (BackgroundColorAbgr != other.BackgroundColorAbgr) return false;
      if (TextColorAbgr != other.TextColorAbgr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsBalloonStyle) hash ^= IsBalloonStyle.GetHashCode();
      if (text_ != null) hash ^= Text.GetHashCode();
      if (HasBackgroundColorAbgr) hash ^= BackgroundColorAbgr.GetHashCode();
      if (HasTextColorAbgr) hash ^= TextColorAbgr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIsBalloonStyle) {
        output.WriteRawTag(8);
        output.WriteBool(IsBalloonStyle);
      }
      if (text_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Text);
      }
      if (HasBackgroundColorAbgr) {
        output.WriteRawTag(29);
        output.WriteFixed32(BackgroundColorAbgr);
      }
      if (HasTextColorAbgr) {
        output.WriteRawTag(37);
        output.WriteFixed32(TextColorAbgr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIsBalloonStyle) {
        output.WriteRawTag(8);
        output.WriteBool(IsBalloonStyle);
      }
      if (text_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Text);
      }
      if (HasBackgroundColorAbgr) {
        output.WriteRawTag(29);
        output.WriteFixed32(BackgroundColorAbgr);
      }
      if (HasTextColorAbgr) {
        output.WriteRawTag(37);
        output.WriteFixed32(TextColorAbgr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasIsBalloonStyle) {
        size += 1 + 1;
      }
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (HasBackgroundColorAbgr) {
        size += 1 + 4;
      }
      if (HasTextColorAbgr) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PopUpProto other) {
      if (other == null) {
        return;
      }
      if (other.HasIsBalloonStyle) {
        IsBalloonStyle = other.IsBalloonStyle;
      }
      if (other.text_ != null) {
        if (text_ == null) {
          Text = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        Text.MergeFrom(other.Text);
      }
      if (other.HasBackgroundColorAbgr) {
        BackgroundColorAbgr = other.BackgroundColorAbgr;
      }
      if (other.HasTextColorAbgr) {
        TextColorAbgr = other.TextColorAbgr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsBalloonStyle = input.ReadBool();
            break;
          }
          case 18: {
            if (text_ == null) {
              Text = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(Text);
            break;
          }
          case 29: {
            BackgroundColorAbgr = input.ReadFixed32();
            break;
          }
          case 37: {
            TextColorAbgr = input.ReadFixed32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsBalloonStyle = input.ReadBool();
            break;
          }
          case 18: {
            if (text_ == null) {
              Text = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(Text);
            break;
          }
          case 29: {
            BackgroundColorAbgr = input.ReadFixed32();
            break;
          }
          case 37: {
            TextColorAbgr = input.ReadFixed32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class StyleAttributeProto : pb::IMessage<StyleAttributeProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StyleAttributeProto> _parser = new pb::MessageParser<StyleAttributeProto>(() => new StyleAttributeProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StyleAttributeProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StyleAttributeProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StyleAttributeProto(StyleAttributeProto other) : this() {
      _hasBits0 = other._hasBits0;
      styleId_ = other.styleId_;
      providerId_ = other.providerId_;
      polyColorAbgr_ = other.polyColorAbgr_;
      lineColorAbgr_ = other.lineColorAbgr_;
      lineWidth_ = other.lineWidth_;
      labelColorAbgr_ = other.labelColorAbgr_;
      labelScale_ = other.labelScale_;
      placemarkIconColorAbgr_ = other.placemarkIconColorAbgr_;
      placemarkIconScale_ = other.placemarkIconScale_;
      placemarkIconPath_ = other.placemarkIconPath_ != null ? other.placemarkIconPath_.Clone() : null;
      placemarkIconX_ = other.placemarkIconX_;
      placemarkIconY_ = other.placemarkIconY_;
      placemarkIconWidth_ = other.placemarkIconWidth_;
      placemarkIconHeight_ = other.placemarkIconHeight_;
      popUp_ = other.popUp_ != null ? other.popUp_.Clone() : null;
      drawFlag_ = other.drawFlag_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StyleAttributeProto Clone() {
      return new StyleAttributeProto(this);
    }

    /// <summary>Field number for the "style_id" field.</summary>
    public const int StyleIdFieldNumber = 1;
    private readonly static string StyleIdDefaultValue = "";

    private string styleId_;
    /// <summary>
    /// Unique id for this style attribute specification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StyleId {
      get { return styleId_ ?? StyleIdDefaultValue; }
      set {
        styleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "style_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStyleId {
      get { return styleId_ != null; }
    }
    /// <summary>Clears the value of the "style_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStyleId() {
      styleId_ = null;
    }

    /// <summary>Field number for the "provider_id" field.</summary>
    public const int ProviderIdFieldNumber = 3;
    private readonly static int ProviderIdDefaultValue = 0;

    private int providerId_;
    /// <summary>
    /// The provider id used here must be present in the ProviderInfoProto if
    /// other than the default. If you need copyright strings to display make sure
    /// to fill this value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ProviderId {
      get { if ((_hasBits0 & 1) != 0) { return providerId_; } else { return ProviderIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        providerId_ = value;
      }
    }
    /// <summary>Gets whether the "provider_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProviderId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "provider_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProviderId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "poly_color_abgr" field.</summary>
    public const int PolyColorAbgrFieldNumber = 4;
    private readonly static uint PolyColorAbgrDefaultValue = 4294967295;

    private uint polyColorAbgr_;
    /// <summary>
    /// Display color for polygons.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PolyColorAbgr {
      get { if ((_hasBits0 & 2) != 0) { return polyColorAbgr_; } else { return PolyColorAbgrDefaultValue; } }
      set {
        _hasBits0 |= 2;
        polyColorAbgr_ = value;
      }
    }
    /// <summary>Gets whether the "poly_color_abgr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPolyColorAbgr {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "poly_color_abgr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPolyColorAbgr() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "line_color_abgr" field.</summary>
    public const int LineColorAbgrFieldNumber = 5;
    private readonly static uint LineColorAbgrDefaultValue = 4294967295;

    private uint lineColorAbgr_;
    /// <summary>
    /// Display color for lines.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LineColorAbgr {
      get { if ((_hasBits0 & 4) != 0) { return lineColorAbgr_; } else { return LineColorAbgrDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lineColorAbgr_ = value;
      }
    }
    /// <summary>Gets whether the "line_color_abgr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLineColorAbgr {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "line_color_abgr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLineColorAbgr() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "line_width" field.</summary>
    public const int LineWidthFieldNumber = 6;
    private readonly static float LineWidthDefaultValue = 1F;

    private float lineWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LineWidth {
      get { if ((_hasBits0 & 8) != 0) { return lineWidth_; } else { return LineWidthDefaultValue; } }
      set {
        _hasBits0 |= 8;
        lineWidth_ = value;
      }
    }
    /// <summary>Gets whether the "line_width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLineWidth {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "line_width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLineWidth() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "label_color_abgr" field.</summary>
    public const int LabelColorAbgrFieldNumber = 7;
    private readonly static uint LabelColorAbgrDefaultValue = 4294967295;

    private uint labelColorAbgr_;
    /// <summary>
    /// Display color of placemark or road name text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LabelColorAbgr {
      get { if ((_hasBits0 & 16) != 0) { return labelColorAbgr_; } else { return LabelColorAbgrDefaultValue; } }
      set {
        _hasBits0 |= 16;
        labelColorAbgr_ = value;
      }
    }
    /// <summary>Gets whether the "label_color_abgr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLabelColorAbgr {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "label_color_abgr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLabelColorAbgr() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "label_scale" field.</summary>
    public const int LabelScaleFieldNumber = 8;
    private readonly static float LabelScaleDefaultValue = 1F;

    private float labelScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LabelScale {
      get { if ((_hasBits0 & 32) != 0) { return labelScale_; } else { return LabelScaleDefaultValue; } }
      set {
        _hasBits0 |= 32;
        labelScale_ = value;
      }
    }
    /// <summary>Gets whether the "label_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLabelScale {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "label_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLabelScale() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "placemark_icon_color_abgr" field.</summary>
    public const int PlacemarkIconColorAbgrFieldNumber = 9;
    private readonly static uint PlacemarkIconColorAbgrDefaultValue = 4294967295;

    private uint placemarkIconColorAbgr_;
    /// <summary>
    /// Controls icon 'tinting', a color hue will be applied to the con if
    /// specified here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PlacemarkIconColorAbgr {
      get { if ((_hasBits0 & 64) != 0) { return placemarkIconColorAbgr_; } else { return PlacemarkIconColorAbgrDefaultValue; } }
      set {
        _hasBits0 |= 64;
        placemarkIconColorAbgr_ = value;
      }
    }
    /// <summary>Gets whether the "placemark_icon_color_abgr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlacemarkIconColorAbgr {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "placemark_icon_color_abgr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlacemarkIconColorAbgr() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "placemark_icon_scale" field.</summary>
    public const int PlacemarkIconScaleFieldNumber = 10;
    private readonly static float PlacemarkIconScaleDefaultValue = 1F;

    private float placemarkIconScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PlacemarkIconScale {
      get { if ((_hasBits0 & 128) != 0) { return placemarkIconScale_; } else { return PlacemarkIconScaleDefaultValue; } }
      set {
        _hasBits0 |= 128;
        placemarkIconScale_ = value;
      }
    }
    /// <summary>Gets whether the "placemark_icon_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlacemarkIconScale {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "placemark_icon_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlacemarkIconScale() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "placemark_icon_path" field.</summary>
    public const int PlacemarkIconPathFieldNumber = 11;
    private global::Keyhole.Dbroot.StringIdOrValueProto placemarkIconPath_;
    /// <summary>
    /// Path to the icon that will be displayed for placemarks or road shields.
    /// These can be either 32x32 or 64x64 8-bit/color RGBA, non-interlaced png
    /// images. Path can be translated through translation table mechanism (see
    /// definition of StringIdOrValueProto for more info).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto PlacemarkIconPath {
      get { return placemarkIconPath_; }
      set {
        placemarkIconPath_ = value;
      }
    }

    /// <summary>Field number for the "placemark_icon_x" field.</summary>
    public const int PlacemarkIconXFieldNumber = 12;
    private readonly static int PlacemarkIconXDefaultValue = 0;

    private int placemarkIconX_;
    /// <summary>
    /// Specify the offset you'd like from the placemark coordinate point on the X
    /// axis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PlacemarkIconX {
      get { if ((_hasBits0 & 256) != 0) { return placemarkIconX_; } else { return PlacemarkIconXDefaultValue; } }
      set {
        _hasBits0 |= 256;
        placemarkIconX_ = value;
      }
    }
    /// <summary>Gets whether the "placemark_icon_x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlacemarkIconX {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "placemark_icon_x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlacemarkIconX() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "placemark_icon_y" field.</summary>
    public const int PlacemarkIconYFieldNumber = 13;
    private readonly static int PlacemarkIconYDefaultValue = 0;

    private int placemarkIconY_;
    /// <summary>
    /// Specify the offset you'd like from the placemark coordinate point on the Y
    /// axis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PlacemarkIconY {
      get { if ((_hasBits0 & 512) != 0) { return placemarkIconY_; } else { return PlacemarkIconYDefaultValue; } }
      set {
        _hasBits0 |= 512;
        placemarkIconY_ = value;
      }
    }
    /// <summary>Gets whether the "placemark_icon_y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlacemarkIconY {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "placemark_icon_y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlacemarkIconY() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "placemark_icon_width" field.</summary>
    public const int PlacemarkIconWidthFieldNumber = 14;
    private readonly static int PlacemarkIconWidthDefaultValue = 32;

    private int placemarkIconWidth_;
    /// <summary>
    /// Usually, either 32 or 64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PlacemarkIconWidth {
      get { if ((_hasBits0 & 1024) != 0) { return placemarkIconWidth_; } else { return PlacemarkIconWidthDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        placemarkIconWidth_ = value;
      }
    }
    /// <summary>Gets whether the "placemark_icon_width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlacemarkIconWidth {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "placemark_icon_width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlacemarkIconWidth() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "placemark_icon_height" field.</summary>
    public const int PlacemarkIconHeightFieldNumber = 15;
    private readonly static int PlacemarkIconHeightDefaultValue = 32;

    private int placemarkIconHeight_;
    /// <summary>
    /// Usually, either 32 or 64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PlacemarkIconHeight {
      get { if ((_hasBits0 & 2048) != 0) { return placemarkIconHeight_; } else { return PlacemarkIconHeightDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        placemarkIconHeight_ = value;
      }
    }
    /// <summary>Gets whether the "placemark_icon_height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlacemarkIconHeight {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "placemark_icon_height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlacemarkIconHeight() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "pop_up" field.</summary>
    public const int PopUpFieldNumber = 16;
    private global::Keyhole.Dbroot.PopUpProto popUp_;
    /// <summary>
    /// Fields to control behavior in the HTML pop up bubbles when placemarks
    /// are clicked on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.PopUpProto PopUp {
      get { return popUp_; }
      set {
        popUp_ = value;
      }
    }

    /// <summary>Field number for the "draw_flag" field.</summary>
    public const int DrawFlagFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.DrawFlagProto> _repeated_drawFlag_codec
        = pb::FieldCodec.ForMessage(138, global::Keyhole.Dbroot.DrawFlagProto.Parser);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.DrawFlagProto> drawFlag_ = new pbc::RepeatedField<global::Keyhole.Dbroot.DrawFlagProto>();
    /// <summary>
    /// List of draw flags that should be applied to this style. See definition
    /// of DrawFlagProto in dbroot.proto.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.DrawFlagProto> DrawFlag {
      get { return drawFlag_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StyleAttributeProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StyleAttributeProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StyleId != other.StyleId) return false;
      if (ProviderId != other.ProviderId) return false;
      if (PolyColorAbgr != other.PolyColorAbgr) return false;
      if (LineColorAbgr != other.LineColorAbgr) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LineWidth, other.LineWidth)) return false;
      if (LabelColorAbgr != other.LabelColorAbgr) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LabelScale, other.LabelScale)) return false;
      if (PlacemarkIconColorAbgr != other.PlacemarkIconColorAbgr) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlacemarkIconScale, other.PlacemarkIconScale)) return false;
      if (!object.Equals(PlacemarkIconPath, other.PlacemarkIconPath)) return false;
      if (PlacemarkIconX != other.PlacemarkIconX) return false;
      if (PlacemarkIconY != other.PlacemarkIconY) return false;
      if (PlacemarkIconWidth != other.PlacemarkIconWidth) return false;
      if (PlacemarkIconHeight != other.PlacemarkIconHeight) return false;
      if (!object.Equals(PopUp, other.PopUp)) return false;
      if(!drawFlag_.Equals(other.drawFlag_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStyleId) hash ^= StyleId.GetHashCode();
      if (HasProviderId) hash ^= ProviderId.GetHashCode();
      if (HasPolyColorAbgr) hash ^= PolyColorAbgr.GetHashCode();
      if (HasLineColorAbgr) hash ^= LineColorAbgr.GetHashCode();
      if (HasLineWidth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LineWidth);
      if (HasLabelColorAbgr) hash ^= LabelColorAbgr.GetHashCode();
      if (HasLabelScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LabelScale);
      if (HasPlacemarkIconColorAbgr) hash ^= PlacemarkIconColorAbgr.GetHashCode();
      if (HasPlacemarkIconScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlacemarkIconScale);
      if (placemarkIconPath_ != null) hash ^= PlacemarkIconPath.GetHashCode();
      if (HasPlacemarkIconX) hash ^= PlacemarkIconX.GetHashCode();
      if (HasPlacemarkIconY) hash ^= PlacemarkIconY.GetHashCode();
      if (HasPlacemarkIconWidth) hash ^= PlacemarkIconWidth.GetHashCode();
      if (HasPlacemarkIconHeight) hash ^= PlacemarkIconHeight.GetHashCode();
      if (popUp_ != null) hash ^= PopUp.GetHashCode();
      hash ^= drawFlag_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStyleId) {
        output.WriteRawTag(10);
        output.WriteString(StyleId);
      }
      if (HasProviderId) {
        output.WriteRawTag(24);
        output.WriteInt32(ProviderId);
      }
      if (HasPolyColorAbgr) {
        output.WriteRawTag(37);
        output.WriteFixed32(PolyColorAbgr);
      }
      if (HasLineColorAbgr) {
        output.WriteRawTag(45);
        output.WriteFixed32(LineColorAbgr);
      }
      if (HasLineWidth) {
        output.WriteRawTag(53);
        output.WriteFloat(LineWidth);
      }
      if (HasLabelColorAbgr) {
        output.WriteRawTag(61);
        output.WriteFixed32(LabelColorAbgr);
      }
      if (HasLabelScale) {
        output.WriteRawTag(69);
        output.WriteFloat(LabelScale);
      }
      if (HasPlacemarkIconColorAbgr) {
        output.WriteRawTag(77);
        output.WriteFixed32(PlacemarkIconColorAbgr);
      }
      if (HasPlacemarkIconScale) {
        output.WriteRawTag(85);
        output.WriteFloat(PlacemarkIconScale);
      }
      if (placemarkIconPath_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(PlacemarkIconPath);
      }
      if (HasPlacemarkIconX) {
        output.WriteRawTag(96);
        output.WriteInt32(PlacemarkIconX);
      }
      if (HasPlacemarkIconY) {
        output.WriteRawTag(104);
        output.WriteInt32(PlacemarkIconY);
      }
      if (HasPlacemarkIconWidth) {
        output.WriteRawTag(112);
        output.WriteInt32(PlacemarkIconWidth);
      }
      if (HasPlacemarkIconHeight) {
        output.WriteRawTag(120);
        output.WriteInt32(PlacemarkIconHeight);
      }
      if (popUp_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(PopUp);
      }
      drawFlag_.WriteTo(output, _repeated_drawFlag_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStyleId) {
        output.WriteRawTag(10);
        output.WriteString(StyleId);
      }
      if (HasProviderId) {
        output.WriteRawTag(24);
        output.WriteInt32(ProviderId);
      }
      if (HasPolyColorAbgr) {
        output.WriteRawTag(37);
        output.WriteFixed32(PolyColorAbgr);
      }
      if (HasLineColorAbgr) {
        output.WriteRawTag(45);
        output.WriteFixed32(LineColorAbgr);
      }
      if (HasLineWidth) {
        output.WriteRawTag(53);
        output.WriteFloat(LineWidth);
      }
      if (HasLabelColorAbgr) {
        output.WriteRawTag(61);
        output.WriteFixed32(LabelColorAbgr);
      }
      if (HasLabelScale) {
        output.WriteRawTag(69);
        output.WriteFloat(LabelScale);
      }
      if (HasPlacemarkIconColorAbgr) {
        output.WriteRawTag(77);
        output.WriteFixed32(PlacemarkIconColorAbgr);
      }
      if (HasPlacemarkIconScale) {
        output.WriteRawTag(85);
        output.WriteFloat(PlacemarkIconScale);
      }
      if (placemarkIconPath_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(PlacemarkIconPath);
      }
      if (HasPlacemarkIconX) {
        output.WriteRawTag(96);
        output.WriteInt32(PlacemarkIconX);
      }
      if (HasPlacemarkIconY) {
        output.WriteRawTag(104);
        output.WriteInt32(PlacemarkIconY);
      }
      if (HasPlacemarkIconWidth) {
        output.WriteRawTag(112);
        output.WriteInt32(PlacemarkIconWidth);
      }
      if (HasPlacemarkIconHeight) {
        output.WriteRawTag(120);
        output.WriteInt32(PlacemarkIconHeight);
      }
      if (popUp_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(PopUp);
      }
      drawFlag_.WriteTo(ref output, _repeated_drawFlag_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasStyleId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StyleId);
      }
      if (HasProviderId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProviderId);
      }
      if (HasPolyColorAbgr) {
        size += 1 + 4;
      }
      if (HasLineColorAbgr) {
        size += 1 + 4;
      }
      if (HasLineWidth) {
        size += 1 + 4;
      }
      if (HasLabelColorAbgr) {
        size += 1 + 4;
      }
      if (HasLabelScale) {
        size += 1 + 4;
      }
      if (HasPlacemarkIconColorAbgr) {
        size += 1 + 4;
      }
      if (HasPlacemarkIconScale) {
        size += 1 + 4;
      }
      if (placemarkIconPath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlacemarkIconPath);
      }
      if (HasPlacemarkIconX) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlacemarkIconX);
      }
      if (HasPlacemarkIconY) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlacemarkIconY);
      }
      if (HasPlacemarkIconWidth) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlacemarkIconWidth);
      }
      if (HasPlacemarkIconHeight) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlacemarkIconHeight);
      }
      if (popUp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PopUp);
      }
      size += drawFlag_.CalculateSize(_repeated_drawFlag_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StyleAttributeProto other) {
      if (other == null) {
        return;
      }
      if (other.HasStyleId) {
        StyleId = other.StyleId;
      }
      if (other.HasProviderId) {
        ProviderId = other.ProviderId;
      }
      if (other.HasPolyColorAbgr) {
        PolyColorAbgr = other.PolyColorAbgr;
      }
      if (other.HasLineColorAbgr) {
        LineColorAbgr = other.LineColorAbgr;
      }
      if (other.HasLineWidth) {
        LineWidth = other.LineWidth;
      }
      if (other.HasLabelColorAbgr) {
        LabelColorAbgr = other.LabelColorAbgr;
      }
      if (other.HasLabelScale) {
        LabelScale = other.LabelScale;
      }
      if (other.HasPlacemarkIconColorAbgr) {
        PlacemarkIconColorAbgr = other.PlacemarkIconColorAbgr;
      }
      if (other.HasPlacemarkIconScale) {
        PlacemarkIconScale = other.PlacemarkIconScale;
      }
      if (other.placemarkIconPath_ != null) {
        if (placemarkIconPath_ == null) {
          PlacemarkIconPath = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        PlacemarkIconPath.MergeFrom(other.PlacemarkIconPath);
      }
      if (other.HasPlacemarkIconX) {
        PlacemarkIconX = other.PlacemarkIconX;
      }
      if (other.HasPlacemarkIconY) {
        PlacemarkIconY = other.PlacemarkIconY;
      }
      if (other.HasPlacemarkIconWidth) {
        PlacemarkIconWidth = other.PlacemarkIconWidth;
      }
      if (other.HasPlacemarkIconHeight) {
        PlacemarkIconHeight = other.PlacemarkIconHeight;
      }
      if (other.popUp_ != null) {
        if (popUp_ == null) {
          PopUp = new global::Keyhole.Dbroot.PopUpProto();
        }
        PopUp.MergeFrom(other.PopUp);
      }
      drawFlag_.Add(other.drawFlag_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StyleId = input.ReadString();
            break;
          }
          case 24: {
            ProviderId = input.ReadInt32();
            break;
          }
          case 37: {
            PolyColorAbgr = input.ReadFixed32();
            break;
          }
          case 45: {
            LineColorAbgr = input.ReadFixed32();
            break;
          }
          case 53: {
            LineWidth = input.ReadFloat();
            break;
          }
          case 61: {
            LabelColorAbgr = input.ReadFixed32();
            break;
          }
          case 69: {
            LabelScale = input.ReadFloat();
            break;
          }
          case 77: {
            PlacemarkIconColorAbgr = input.ReadFixed32();
            break;
          }
          case 85: {
            PlacemarkIconScale = input.ReadFloat();
            break;
          }
          case 90: {
            if (placemarkIconPath_ == null) {
              PlacemarkIconPath = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(PlacemarkIconPath);
            break;
          }
          case 96: {
            PlacemarkIconX = input.ReadInt32();
            break;
          }
          case 104: {
            PlacemarkIconY = input.ReadInt32();
            break;
          }
          case 112: {
            PlacemarkIconWidth = input.ReadInt32();
            break;
          }
          case 120: {
            PlacemarkIconHeight = input.ReadInt32();
            break;
          }
          case 130: {
            if (popUp_ == null) {
              PopUp = new global::Keyhole.Dbroot.PopUpProto();
            }
            input.ReadMessage(PopUp);
            break;
          }
          case 138: {
            drawFlag_.AddEntriesFrom(input, _repeated_drawFlag_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            StyleId = input.ReadString();
            break;
          }
          case 24: {
            ProviderId = input.ReadInt32();
            break;
          }
          case 37: {
            PolyColorAbgr = input.ReadFixed32();
            break;
          }
          case 45: {
            LineColorAbgr = input.ReadFixed32();
            break;
          }
          case 53: {
            LineWidth = input.ReadFloat();
            break;
          }
          case 61: {
            LabelColorAbgr = input.ReadFixed32();
            break;
          }
          case 69: {
            LabelScale = input.ReadFloat();
            break;
          }
          case 77: {
            PlacemarkIconColorAbgr = input.ReadFixed32();
            break;
          }
          case 85: {
            PlacemarkIconScale = input.ReadFloat();
            break;
          }
          case 90: {
            if (placemarkIconPath_ == null) {
              PlacemarkIconPath = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(PlacemarkIconPath);
            break;
          }
          case 96: {
            PlacemarkIconX = input.ReadInt32();
            break;
          }
          case 104: {
            PlacemarkIconY = input.ReadInt32();
            break;
          }
          case 112: {
            PlacemarkIconWidth = input.ReadInt32();
            break;
          }
          case 120: {
            PlacemarkIconHeight = input.ReadInt32();
            break;
          }
          case 130: {
            if (popUp_ == null) {
              PopUp = new global::Keyhole.Dbroot.PopUpProto();
            }
            input.ReadMessage(PopUp);
            break;
          }
          case 138: {
            drawFlag_.AddEntriesFrom(ref input, _repeated_drawFlag_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Each fusion packet for layers has a mapping id number(s) baked into it that
  /// reference the style map postamble in the dbroot. Each style map block
  /// specifies pointers to two style attribute specifications that are used in
  /// rendering the fusion packet. One for 'Normal' view (no mouse over) and
  /// one for 'Highlight' view (mouse over). For non-point features, the normal
  /// and highlight style maps point to the same style specification.
  ///
  /// It is expected and even encouraged to use the same style attribute
  /// specification ids across multiple style maps when they are exactly the same
  /// as this helps shrink the size of the dbroot and improves parsing speed in
  /// the client.
  ///
  /// Example non-point layer: &lt;etStyleMap> [20210] { "A"      "A" }
  /// Meaning: Style map 20210 uses style spec "A" for normal and "A" for
  ///          highlight.
  /// NOTE: For non-point layers only fill one style_attribute message as
  /// normal. The writer will automatically fill in the style map for the
  /// highlight style with the same style id as used for normal.
  ///
  /// Example point layer: &lt;etStyleMap> [20210] { "A"      "B" }
  /// Meaning: Style map 20210 uses style spec "A" for normal and "B" for
  ///          highlight.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class StyleMapProto : pb::IMessage<StyleMapProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StyleMapProto> _parser = new pb::MessageParser<StyleMapProto>(() => new StyleMapProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StyleMapProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StyleMapProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StyleMapProto(StyleMapProto other) : this() {
      _hasBits0 = other._hasBits0;
      styleMapId_ = other.styleMapId_;
      channelId_ = other.channelId_.Clone();
      normalStyleAttribute_ = other.normalStyleAttribute_;
      highlightStyleAttribute_ = other.highlightStyleAttribute_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StyleMapProto Clone() {
      return new StyleMapProto(this);
    }

    /// <summary>Field number for the "style_map_id" field.</summary>
    public const int StyleMapIdFieldNumber = 1;
    private readonly static int StyleMapIdDefaultValue = 0;

    private int styleMapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StyleMapId {
      get { if ((_hasBits0 & 1) != 0) { return styleMapId_; } else { return StyleMapIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        styleMapId_ = value;
      }
    }
    /// <summary>Gets whether the "style_map_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStyleMapId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "style_map_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStyleMapId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_channelId_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> channelId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Specifies which layers this style map is referenced in.
    /// If not provided, one can always inspect all layers to find which ones
    /// reference this style map.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> ChannelId {
      get { return channelId_; }
    }

    /// <summary>Field number for the "normal_style_attribute" field.</summary>
    public const int NormalStyleAttributeFieldNumber = 3;
    private readonly static int NormalStyleAttributeDefaultValue = 0;

    private int normalStyleAttribute_;
    /// <summary>
    /// Styles are associated with their corresponding layer.
    /// If provided, the value is an index into the array of styles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NormalStyleAttribute {
      get { if ((_hasBits0 & 2) != 0) { return normalStyleAttribute_; } else { return NormalStyleAttributeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        normalStyleAttribute_ = value;
      }
    }
    /// <summary>Gets whether the "normal_style_attribute" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNormalStyleAttribute {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "normal_style_attribute" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNormalStyleAttribute() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "highlight_style_attribute" field.</summary>
    public const int HighlightStyleAttributeFieldNumber = 4;
    private readonly static int HighlightStyleAttributeDefaultValue = 0;

    private int highlightStyleAttribute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HighlightStyleAttribute {
      get { if ((_hasBits0 & 4) != 0) { return highlightStyleAttribute_; } else { return HighlightStyleAttributeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        highlightStyleAttribute_ = value;
      }
    }
    /// <summary>Gets whether the "highlight_style_attribute" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHighlightStyleAttribute {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "highlight_style_attribute" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHighlightStyleAttribute() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StyleMapProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StyleMapProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StyleMapId != other.StyleMapId) return false;
      if(!channelId_.Equals(other.channelId_)) return false;
      if (NormalStyleAttribute != other.NormalStyleAttribute) return false;
      if (HighlightStyleAttribute != other.HighlightStyleAttribute) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStyleMapId) hash ^= StyleMapId.GetHashCode();
      hash ^= channelId_.GetHashCode();
      if (HasNormalStyleAttribute) hash ^= NormalStyleAttribute.GetHashCode();
      if (HasHighlightStyleAttribute) hash ^= HighlightStyleAttribute.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStyleMapId) {
        output.WriteRawTag(8);
        output.WriteInt32(StyleMapId);
      }
      channelId_.WriteTo(output, _repeated_channelId_codec);
      if (HasNormalStyleAttribute) {
        output.WriteRawTag(24);
        output.WriteInt32(NormalStyleAttribute);
      }
      if (HasHighlightStyleAttribute) {
        output.WriteRawTag(32);
        output.WriteInt32(HighlightStyleAttribute);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStyleMapId) {
        output.WriteRawTag(8);
        output.WriteInt32(StyleMapId);
      }
      channelId_.WriteTo(ref output, _repeated_channelId_codec);
      if (HasNormalStyleAttribute) {
        output.WriteRawTag(24);
        output.WriteInt32(NormalStyleAttribute);
      }
      if (HasHighlightStyleAttribute) {
        output.WriteRawTag(32);
        output.WriteInt32(HighlightStyleAttribute);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasStyleMapId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StyleMapId);
      }
      size += channelId_.CalculateSize(_repeated_channelId_codec);
      if (HasNormalStyleAttribute) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NormalStyleAttribute);
      }
      if (HasHighlightStyleAttribute) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HighlightStyleAttribute);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StyleMapProto other) {
      if (other == null) {
        return;
      }
      if (other.HasStyleMapId) {
        StyleMapId = other.StyleMapId;
      }
      channelId_.Add(other.channelId_);
      if (other.HasNormalStyleAttribute) {
        NormalStyleAttribute = other.NormalStyleAttribute;
      }
      if (other.HasHighlightStyleAttribute) {
        HighlightStyleAttribute = other.HighlightStyleAttribute;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StyleMapId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            channelId_.AddEntriesFrom(input, _repeated_channelId_codec);
            break;
          }
          case 24: {
            NormalStyleAttribute = input.ReadInt32();
            break;
          }
          case 32: {
            HighlightStyleAttribute = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StyleMapId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            channelId_.AddEntriesFrom(ref input, _repeated_channelId_codec);
            break;
          }
          case 24: {
            NormalStyleAttribute = input.ReadInt32();
            break;
          }
          case 32: {
            HighlightStyleAttribute = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Specifies a range of zoom levels that a style rule will be visible for.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ZoomRangeProto : pb::IMessage<ZoomRangeProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ZoomRangeProto> _parser = new pb::MessageParser<ZoomRangeProto>(() => new ZoomRangeProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ZoomRangeProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ZoomRangeProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ZoomRangeProto(ZoomRangeProto other) : this() {
      _hasBits0 = other._hasBits0;
      minZoom_ = other.minZoom_;
      maxZoom_ = other.maxZoom_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ZoomRangeProto Clone() {
      return new ZoomRangeProto(this);
    }

    /// <summary>Field number for the "min_zoom" field.</summary>
    public const int MinZoomFieldNumber = 1;
    private readonly static int MinZoomDefaultValue = 0;

    private int minZoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinZoom {
      get { if ((_hasBits0 & 1) != 0) { return minZoom_; } else { return MinZoomDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minZoom_ = value;
      }
    }
    /// <summary>Gets whether the "min_zoom" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinZoom {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "min_zoom" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinZoom() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_zoom" field.</summary>
    public const int MaxZoomFieldNumber = 2;
    private readonly static int MaxZoomDefaultValue = 0;

    private int maxZoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxZoom {
      get { if ((_hasBits0 & 2) != 0) { return maxZoom_; } else { return MaxZoomDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxZoom_ = value;
      }
    }
    /// <summary>Gets whether the "max_zoom" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxZoom {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_zoom" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxZoom() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ZoomRangeProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ZoomRangeProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinZoom != other.MinZoom) return false;
      if (MaxZoom != other.MaxZoom) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMinZoom) hash ^= MinZoom.GetHashCode();
      if (HasMaxZoom) hash ^= MaxZoom.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMinZoom) {
        output.WriteRawTag(8);
        output.WriteInt32(MinZoom);
      }
      if (HasMaxZoom) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxZoom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMinZoom) {
        output.WriteRawTag(8);
        output.WriteInt32(MinZoom);
      }
      if (HasMaxZoom) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxZoom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMinZoom) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinZoom);
      }
      if (HasMaxZoom) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxZoom);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ZoomRangeProto other) {
      if (other == null) {
        return;
      }
      if (other.HasMinZoom) {
        MinZoom = other.MinZoom;
      }
      if (other.HasMaxZoom) {
        MaxZoom = other.MaxZoom;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinZoom = input.ReadInt32();
            break;
          }
          case 16: {
            MaxZoom = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MinZoom = input.ReadInt32();
            break;
          }
          case 16: {
            MaxZoom = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Draw flags are used to control cartographic styling. For example, a polygon
  /// layer with flag TYPE_FULL_ONLY would only display the outlines of the
  /// polygon.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DrawFlagProto : pb::IMessage<DrawFlagProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DrawFlagProto> _parser = new pb::MessageParser<DrawFlagProto>(() => new DrawFlagProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DrawFlagProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DrawFlagProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DrawFlagProto(DrawFlagProto other) : this() {
      _hasBits0 = other._hasBits0;
      drawFlagType_ = other.drawFlagType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DrawFlagProto Clone() {
      return new DrawFlagProto(this);
    }

    /// <summary>Field number for the "draw_flag_type" field.</summary>
    public const int DrawFlagTypeFieldNumber = 1;
    private readonly static global::Keyhole.Dbroot.DrawFlagProto.Types.DrawFlagType DrawFlagTypeDefaultValue = global::Keyhole.Dbroot.DrawFlagProto.Types.DrawFlagType.TypeFillOnly;

    private global::Keyhole.Dbroot.DrawFlagProto.Types.DrawFlagType drawFlagType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.DrawFlagProto.Types.DrawFlagType DrawFlagType {
      get { if ((_hasBits0 & 1) != 0) { return drawFlagType_; } else { return DrawFlagTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        drawFlagType_ = value;
      }
    }
    /// <summary>Gets whether the "draw_flag_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDrawFlagType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "draw_flag_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDrawFlagType() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DrawFlagProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DrawFlagProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DrawFlagType != other.DrawFlagType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDrawFlagType) hash ^= DrawFlagType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDrawFlagType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DrawFlagType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDrawFlagType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DrawFlagType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasDrawFlagType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DrawFlagType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DrawFlagProto other) {
      if (other == null) {
        return;
      }
      if (other.HasDrawFlagType) {
        DrawFlagType = other.DrawFlagType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DrawFlagType = (global::Keyhole.Dbroot.DrawFlagProto.Types.DrawFlagType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DrawFlagType = (global::Keyhole.Dbroot.DrawFlagProto.Types.DrawFlagType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the DrawFlagProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum DrawFlagType {
        [pbr::OriginalName("TYPE_FILL_ONLY")] TypeFillOnly = 1,
        [pbr::OriginalName("TYPE_OUTLINE_ONLY")] TypeOutlineOnly = 2,
        [pbr::OriginalName("TYPE_FILL_AND_OUTLINE")] TypeFillAndOutline = 3,
        [pbr::OriginalName("TYPE_ANTIALIASING")] TypeAntialiasing = 4,
        /// <summary>
        /// Points only.
        /// </summary>
        [pbr::OriginalName("TYPE_CENTER_LABEL")] TypeCenterLabel = 5,
      }

    }
    #endregion

  }

  /// <summary>
  /// Specific configurations for layers.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LayerProto : pb::IMessage<LayerProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LayerProto> _parser = new pb::MessageParser<LayerProto>(() => new LayerProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LayerProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LayerProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LayerProto(LayerProto other) : this() {
      _hasBits0 = other._hasBits0;
      zoomRange_ = other.zoomRange_.Clone();
      preserveTextLevel_ = other.preserveTextLevel_;
      lodBeginTransition_ = other.lodBeginTransition_;
      lodEndTransition_ = other.lodEndTransition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LayerProto Clone() {
      return new LayerProto(this);
    }

    /// <summary>Field number for the "zoom_range" field.</summary>
    public const int ZoomRangeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.ZoomRangeProto> _repeated_zoomRange_codec
        = pb::FieldCodec.ForMessage(10, global::Keyhole.Dbroot.ZoomRangeProto.Parser);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.ZoomRangeProto> zoomRange_ = new pbc::RepeatedField<global::Keyhole.Dbroot.ZoomRangeProto>();
    /// <summary>
    /// Specifies the zoom range(s) that layer styles will be valid for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.ZoomRangeProto> ZoomRange {
      get { return zoomRange_; }
    }

    /// <summary>Field number for the "preserve_text_level" field.</summary>
    public const int PreserveTextLevelFieldNumber = 2;
    private readonly static int PreserveTextLevelDefaultValue = 30;

    private int preserveTextLevel_;
    /// <summary>
    /// Controls the zoom level that text labels will be displayed until. For
    /// example with roads, it is common to have the line geometry fade out around
    /// 18-20 but have the label text continue until level 24.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PreserveTextLevel {
      get { if ((_hasBits0 & 1) != 0) { return preserveTextLevel_; } else { return PreserveTextLevelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        preserveTextLevel_ = value;
      }
    }
    /// <summary>Gets whether the "preserve_text_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPreserveTextLevel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "preserve_text_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPreserveTextLevel() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lod_begin_transition" field.</summary>
    public const int LodBeginTransitionFieldNumber = 4;
    private readonly static bool LodBeginTransitionDefaultValue = false;

    private bool lodBeginTransition_;
    /// <summary>
    /// Controls how the client transitions between levels-of-detail (LOD) of this
    /// layer.  If lod_begin_transition is true, the client will fade in the layer
    /// when at the level that it is first displayed.  If lod_end_transition is
    /// true, the client will fade out the layer at the level that it is last
    /// displayed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LodBeginTransition {
      get { if ((_hasBits0 & 2) != 0) { return lodBeginTransition_; } else { return LodBeginTransitionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lodBeginTransition_ = value;
      }
    }
    /// <summary>Gets whether the "lod_begin_transition" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLodBeginTransition {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lod_begin_transition" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLodBeginTransition() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lod_end_transition" field.</summary>
    public const int LodEndTransitionFieldNumber = 5;
    private readonly static bool LodEndTransitionDefaultValue = false;

    private bool lodEndTransition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LodEndTransition {
      get { if ((_hasBits0 & 4) != 0) { return lodEndTransition_; } else { return LodEndTransitionDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lodEndTransition_ = value;
      }
    }
    /// <summary>Gets whether the "lod_end_transition" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLodEndTransition {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lod_end_transition" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLodEndTransition() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LayerProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LayerProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!zoomRange_.Equals(other.zoomRange_)) return false;
      if (PreserveTextLevel != other.PreserveTextLevel) return false;
      if (LodBeginTransition != other.LodBeginTransition) return false;
      if (LodEndTransition != other.LodEndTransition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= zoomRange_.GetHashCode();
      if (HasPreserveTextLevel) hash ^= PreserveTextLevel.GetHashCode();
      if (HasLodBeginTransition) hash ^= LodBeginTransition.GetHashCode();
      if (HasLodEndTransition) hash ^= LodEndTransition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      zoomRange_.WriteTo(output, _repeated_zoomRange_codec);
      if (HasPreserveTextLevel) {
        output.WriteRawTag(16);
        output.WriteInt32(PreserveTextLevel);
      }
      if (HasLodBeginTransition) {
        output.WriteRawTag(32);
        output.WriteBool(LodBeginTransition);
      }
      if (HasLodEndTransition) {
        output.WriteRawTag(40);
        output.WriteBool(LodEndTransition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      zoomRange_.WriteTo(ref output, _repeated_zoomRange_codec);
      if (HasPreserveTextLevel) {
        output.WriteRawTag(16);
        output.WriteInt32(PreserveTextLevel);
      }
      if (HasLodBeginTransition) {
        output.WriteRawTag(32);
        output.WriteBool(LodBeginTransition);
      }
      if (HasLodEndTransition) {
        output.WriteRawTag(40);
        output.WriteBool(LodEndTransition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += zoomRange_.CalculateSize(_repeated_zoomRange_codec);
      if (HasPreserveTextLevel) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PreserveTextLevel);
      }
      if (HasLodBeginTransition) {
        size += 1 + 1;
      }
      if (HasLodEndTransition) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LayerProto other) {
      if (other == null) {
        return;
      }
      zoomRange_.Add(other.zoomRange_);
      if (other.HasPreserveTextLevel) {
        PreserveTextLevel = other.PreserveTextLevel;
      }
      if (other.HasLodBeginTransition) {
        LodBeginTransition = other.LodBeginTransition;
      }
      if (other.HasLodEndTransition) {
        LodEndTransition = other.LodEndTransition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            zoomRange_.AddEntriesFrom(input, _repeated_zoomRange_codec);
            break;
          }
          case 16: {
            PreserveTextLevel = input.ReadInt32();
            break;
          }
          case 32: {
            LodBeginTransition = input.ReadBool();
            break;
          }
          case 40: {
            LodEndTransition = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            zoomRange_.AddEntriesFrom(ref input, _repeated_zoomRange_codec);
            break;
          }
          case 16: {
            PreserveTextLevel = input.ReadInt32();
            break;
          }
          case 32: {
            LodBeginTransition = input.ReadBool();
            break;
          }
          case 40: {
            LodEndTransition = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Specific configuration options for folders.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FolderProto : pb::IMessage<FolderProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FolderProto> _parser = new pb::MessageParser<FolderProto>(() => new FolderProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FolderProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FolderProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FolderProto(FolderProto other) : this() {
      _hasBits0 = other._hasBits0;
      isExpandable_ = other.isExpandable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FolderProto Clone() {
      return new FolderProto(this);
    }

    /// <summary>Field number for the "is_expandable" field.</summary>
    public const int IsExpandableFieldNumber = 1;
    private readonly static bool IsExpandableDefaultValue = true;

    private bool isExpandable_;
    /// <summary>
    /// Controls whether the tree view of child folders or layers is visible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsExpandable {
      get { if ((_hasBits0 & 1) != 0) { return isExpandable_; } else { return IsExpandableDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isExpandable_ = value;
      }
    }
    /// <summary>Gets whether the "is_expandable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsExpandable {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_expandable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsExpandable() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FolderProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FolderProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsExpandable != other.IsExpandable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsExpandable) hash ^= IsExpandable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIsExpandable) {
        output.WriteRawTag(8);
        output.WriteBool(IsExpandable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIsExpandable) {
        output.WriteRawTag(8);
        output.WriteBool(IsExpandable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasIsExpandable) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FolderProto other) {
      if (other == null) {
        return;
      }
      if (other.HasIsExpandable) {
        IsExpandable = other.IsExpandable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsExpandable = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsExpandable = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Requirements are configurations available for NestedFeatures that do not
  /// exist in all client versions. They are all optional and provide additional
  /// control over how and when layers are displayed.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RequirementProto : pb::IMessage<RequirementProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RequirementProto> _parser = new pb::MessageParser<RequirementProto>(() => new RequirementProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RequirementProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RequirementProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RequirementProto(RequirementProto other) : this() {
      requiredVram_ = other.requiredVram_;
      requiredClientVer_ = other.requiredClientVer_;
      probability_ = other.probability_;
      requiredUserAgent_ = other.requiredUserAgent_;
      requiredClientCapabilities_ = other.requiredClientCapabilities_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RequirementProto Clone() {
      return new RequirementProto(this);
    }

    /// <summary>Field number for the "required_vram" field.</summary>
    public const int RequiredVramFieldNumber = 3;
    private readonly static string RequiredVramDefaultValue = "";

    private string requiredVram_;
    /// <summary>
    /// Allows limiting display of a nested feature to computers with a specified
    /// vram threshold or above.
    /// Example: 64-127
    /// Meaning: Show iff 64 to 127MB of VRAM.
    /// Version support: 4.0.2292 +
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RequiredVram {
      get { return requiredVram_ ?? RequiredVramDefaultValue; }
      set {
        requiredVram_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "required_vram" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRequiredVram {
      get { return requiredVram_ != null; }
    }
    /// <summary>Clears the value of the "required_vram" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequiredVram() {
      requiredVram_ = null;
    }

    /// <summary>Field number for the "required_client_ver" field.</summary>
    public const int RequiredClientVerFieldNumber = 4;
    private readonly static string RequiredClientVerDefaultValue = "";

    private string requiredClientVer_;
    /// <summary>
    /// Allows limiting display of a nested feature to those with a client version
    /// at or above the value specified.
    /// Example: -4.0.2291
    /// Meaning: Exclude if 4.0.2292 or later.
    /// Version support: 4.0.2292 +
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RequiredClientVer {
      get { return requiredClientVer_ ?? RequiredClientVerDefaultValue; }
      set {
        requiredClientVer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "required_client_ver" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRequiredClientVer {
      get { return requiredClientVer_ != null; }
    }
    /// <summary>Clears the value of the "required_client_ver" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequiredClientVer() {
      requiredClientVer_ = null;
    }

    /// <summary>Field number for the "probability" field.</summary>
    public const int ProbabilityFieldNumber = 5;
    private readonly static string ProbabilityDefaultValue = "";

    private string probability_;
    /// <summary>
    /// Probability of being shown (preserved across sessions).
    /// Example: Layers: A with "-20" and B with "10-100"
    /// Meaning: 10% get A, 10% get A+B, 80% get B)
    /// Version support: 4.0.2292 +
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Probability {
      get { return probability_ ?? ProbabilityDefaultValue; }
      set {
        probability_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "probability" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProbability {
      get { return probability_ != null; }
    }
    /// <summary>Clears the value of the "probability" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProbability() {
      probability_ = null;
    }

    /// <summary>Field number for the "required_user_agent" field.</summary>
    public const int RequiredUserAgentFieldNumber = 6;
    private readonly static string RequiredUserAgentDefaultValue = "";

    private string requiredUserAgent_;
    /// <summary>
    /// Limit by anything in user agent.
    /// Example: (Windows|Mac)
    /// Meaning: PC &amp; Mac but not Linux Excluded if RegExp is non-empty and match
    ///          fails.
    /// Version support: 4.0.2292 +
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RequiredUserAgent {
      get { return requiredUserAgent_ ?? RequiredUserAgentDefaultValue; }
      set {
        requiredUserAgent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "required_user_agent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRequiredUserAgent {
      get { return requiredUserAgent_ != null; }
    }
    /// <summary>Clears the value of the "required_user_agent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequiredUserAgent() {
      requiredUserAgent_ = null;
    }

    /// <summary>Field number for the "required_client_capabilities" field.</summary>
    public const int RequiredClientCapabilitiesFieldNumber = 7;
    private readonly static string RequiredClientCapabilitiesDefaultValue = "";

    private string requiredClientCapabilities_;
    /// <summary>
    /// Limit by client capability
    /// TODO: update the example.
    /// Example: Not used in production yet, but something like 'supports Flash'.
    /// Version support: 4.3 +.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RequiredClientCapabilities {
      get { return requiredClientCapabilities_ ?? RequiredClientCapabilitiesDefaultValue; }
      set {
        requiredClientCapabilities_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "required_client_capabilities" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRequiredClientCapabilities {
      get { return requiredClientCapabilities_ != null; }
    }
    /// <summary>Clears the value of the "required_client_capabilities" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequiredClientCapabilities() {
      requiredClientCapabilities_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RequirementProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RequirementProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequiredVram != other.RequiredVram) return false;
      if (RequiredClientVer != other.RequiredClientVer) return false;
      if (Probability != other.Probability) return false;
      if (RequiredUserAgent != other.RequiredUserAgent) return false;
      if (RequiredClientCapabilities != other.RequiredClientCapabilities) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequiredVram) hash ^= RequiredVram.GetHashCode();
      if (HasRequiredClientVer) hash ^= RequiredClientVer.GetHashCode();
      if (HasProbability) hash ^= Probability.GetHashCode();
      if (HasRequiredUserAgent) hash ^= RequiredUserAgent.GetHashCode();
      if (HasRequiredClientCapabilities) hash ^= RequiredClientCapabilities.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequiredVram) {
        output.WriteRawTag(26);
        output.WriteString(RequiredVram);
      }
      if (HasRequiredClientVer) {
        output.WriteRawTag(34);
        output.WriteString(RequiredClientVer);
      }
      if (HasProbability) {
        output.WriteRawTag(42);
        output.WriteString(Probability);
      }
      if (HasRequiredUserAgent) {
        output.WriteRawTag(50);
        output.WriteString(RequiredUserAgent);
      }
      if (HasRequiredClientCapabilities) {
        output.WriteRawTag(58);
        output.WriteString(RequiredClientCapabilities);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequiredVram) {
        output.WriteRawTag(26);
        output.WriteString(RequiredVram);
      }
      if (HasRequiredClientVer) {
        output.WriteRawTag(34);
        output.WriteString(RequiredClientVer);
      }
      if (HasProbability) {
        output.WriteRawTag(42);
        output.WriteString(Probability);
      }
      if (HasRequiredUserAgent) {
        output.WriteRawTag(50);
        output.WriteString(RequiredUserAgent);
      }
      if (HasRequiredClientCapabilities) {
        output.WriteRawTag(58);
        output.WriteString(RequiredClientCapabilities);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRequiredVram) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequiredVram);
      }
      if (HasRequiredClientVer) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequiredClientVer);
      }
      if (HasProbability) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Probability);
      }
      if (HasRequiredUserAgent) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequiredUserAgent);
      }
      if (HasRequiredClientCapabilities) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequiredClientCapabilities);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RequirementProto other) {
      if (other == null) {
        return;
      }
      if (other.HasRequiredVram) {
        RequiredVram = other.RequiredVram;
      }
      if (other.HasRequiredClientVer) {
        RequiredClientVer = other.RequiredClientVer;
      }
      if (other.HasProbability) {
        Probability = other.Probability;
      }
      if (other.HasRequiredUserAgent) {
        RequiredUserAgent = other.RequiredUserAgent;
      }
      if (other.HasRequiredClientCapabilities) {
        RequiredClientCapabilities = other.RequiredClientCapabilities;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            RequiredVram = input.ReadString();
            break;
          }
          case 34: {
            RequiredClientVer = input.ReadString();
            break;
          }
          case 42: {
            Probability = input.ReadString();
            break;
          }
          case 50: {
            RequiredUserAgent = input.ReadString();
            break;
          }
          case 58: {
            RequiredClientCapabilities = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 26: {
            RequiredVram = input.ReadString();
            break;
          }
          case 34: {
            RequiredClientVer = input.ReadString();
            break;
          }
          case 42: {
            Probability = input.ReadString();
            break;
          }
          case 50: {
            RequiredUserAgent = input.ReadString();
            break;
          }
          case 58: {
            RequiredClientCapabilities = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Message that defines a view (i.e. position and orientation of camera) of
  /// the planet.
  /// For more detailed documentation see:
  /// http://code.google.com/apis/kml/documentation/kml_tags_21.html#lookat
  /// NOTE: This does not support tags for altitudeMode or altitude.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LookAtProto : pb::IMessage<LookAtProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LookAtProto> _parser = new pb::MessageParser<LookAtProto>(() => new LookAtProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LookAtProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookAtProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookAtProto(LookAtProto other) : this() {
      _hasBits0 = other._hasBits0;
      longitude_ = other.longitude_;
      latitude_ = other.latitude_;
      range_ = other.range_;
      tilt_ = other.tilt_;
      heading_ = other.heading_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookAtProto Clone() {
      return new LookAtProto(this);
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 1;
    private readonly static float LongitudeDefaultValue = 0F;

    private float longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Longitude {
      get { if ((_hasBits0 & 1) != 0) { return longitude_; } else { return LongitudeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        longitude_ = value;
      }
    }
    /// <summary>Gets whether the "longitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLongitude {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "longitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLongitude() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 2;
    private readonly static float LatitudeDefaultValue = 0F;

    private float latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Latitude {
      get { if ((_hasBits0 & 2) != 0) { return latitude_; } else { return LatitudeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        latitude_ = value;
      }
    }
    /// <summary>Gets whether the "latitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLatitude {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "latitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLatitude() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 3;
    private readonly static float RangeDefaultValue = 0F;

    private float range_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Range {
      get { if ((_hasBits0 & 4) != 0) { return range_; } else { return RangeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        range_ = value;
      }
    }
    /// <summary>Gets whether the "range" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRange {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "range" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRange() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "tilt" field.</summary>
    public const int TiltFieldNumber = 4;
    private readonly static float TiltDefaultValue = 0F;

    private float tilt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Tilt {
      get { if ((_hasBits0 & 8) != 0) { return tilt_; } else { return TiltDefaultValue; } }
      set {
        _hasBits0 |= 8;
        tilt_ = value;
      }
    }
    /// <summary>Gets whether the "tilt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTilt {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "tilt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTilt() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 5;
    private readonly static float HeadingDefaultValue = 0F;

    private float heading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Heading {
      get { if ((_hasBits0 & 16) != 0) { return heading_; } else { return HeadingDefaultValue; } }
      set {
        _hasBits0 |= 16;
        heading_ = value;
      }
    }
    /// <summary>Gets whether the "heading" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHeading {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "heading" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHeading() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LookAtProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LookAtProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Range, other.Range)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Tilt, other.Tilt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Heading, other.Heading)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLongitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Longitude);
      if (HasLatitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Latitude);
      if (HasRange) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Range);
      if (HasTilt) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Tilt);
      if (HasHeading) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Heading);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLongitude) {
        output.WriteRawTag(13);
        output.WriteFloat(Longitude);
      }
      if (HasLatitude) {
        output.WriteRawTag(21);
        output.WriteFloat(Latitude);
      }
      if (HasRange) {
        output.WriteRawTag(29);
        output.WriteFloat(Range);
      }
      if (HasTilt) {
        output.WriteRawTag(37);
        output.WriteFloat(Tilt);
      }
      if (HasHeading) {
        output.WriteRawTag(45);
        output.WriteFloat(Heading);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLongitude) {
        output.WriteRawTag(13);
        output.WriteFloat(Longitude);
      }
      if (HasLatitude) {
        output.WriteRawTag(21);
        output.WriteFloat(Latitude);
      }
      if (HasRange) {
        output.WriteRawTag(29);
        output.WriteFloat(Range);
      }
      if (HasTilt) {
        output.WriteRawTag(37);
        output.WriteFloat(Tilt);
      }
      if (HasHeading) {
        output.WriteRawTag(45);
        output.WriteFloat(Heading);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLongitude) {
        size += 1 + 4;
      }
      if (HasLatitude) {
        size += 1 + 4;
      }
      if (HasRange) {
        size += 1 + 4;
      }
      if (HasTilt) {
        size += 1 + 4;
      }
      if (HasHeading) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LookAtProto other) {
      if (other == null) {
        return;
      }
      if (other.HasLongitude) {
        Longitude = other.Longitude;
      }
      if (other.HasLatitude) {
        Latitude = other.Latitude;
      }
      if (other.HasRange) {
        Range = other.Range;
      }
      if (other.HasTilt) {
        Tilt = other.Tilt;
      }
      if (other.HasHeading) {
        Heading = other.Heading;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Longitude = input.ReadFloat();
            break;
          }
          case 21: {
            Latitude = input.ReadFloat();
            break;
          }
          case 29: {
            Range = input.ReadFloat();
            break;
          }
          case 37: {
            Tilt = input.ReadFloat();
            break;
          }
          case 45: {
            Heading = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Longitude = input.ReadFloat();
            break;
          }
          case 21: {
            Latitude = input.ReadFloat();
            break;
          }
          case 29: {
            Range = input.ReadFloat();
            break;
          }
          case 37: {
            Tilt = input.ReadFloat();
            break;
          }
          case 45: {
            Heading = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A nested feature is an entity in the layer menu tree. The feature may
  /// be either a folder (think container for more child features) or a layer
  /// (a layer is a vector data layer that displays points, lines, or polygons).
  /// Next available id: 22
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class NestedFeatureProto : pb::IMessage<NestedFeatureProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NestedFeatureProto> _parser = new pb::MessageParser<NestedFeatureProto>(() => new NestedFeatureProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NestedFeatureProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NestedFeatureProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NestedFeatureProto(NestedFeatureProto other) : this() {
      _hasBits0 = other._hasBits0;
      featureType_ = other.featureType_;
      kmlUrl_ = other.kmlUrl_ != null ? other.kmlUrl_.Clone() : null;
      databaseUrl_ = other.databaseUrl_;
      layer_ = other.layer_ != null ? other.layer_.Clone() : null;
      folder_ = other.folder_ != null ? other.folder_.Clone() : null;
      requirement_ = other.requirement_ != null ? other.requirement_.Clone() : null;
      channelId_ = other.channelId_;
      displayName_ = other.displayName_ != null ? other.displayName_.Clone() : null;
      isVisible_ = other.isVisible_;
      isEnabled_ = other.isEnabled_;
      isChecked_ = other.isChecked_;
      layerMenuIconPath_ = other.layerMenuIconPath_;
      description_ = other.description_ != null ? other.description_.Clone() : null;
      lookAt_ = other.lookAt_ != null ? other.lookAt_.Clone() : null;
      assetUuid_ = other.assetUuid_;
      isSaveLocked_ = other.isSaveLocked_;
      children_ = other.children_.Clone();
      clientConfigScriptName_ = other.clientConfigScriptName_;
      dioramaDataChannelBase_ = other.dioramaDataChannelBase_;
      replicaDataChannelBase_ = other.replicaDataChannelBase_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NestedFeatureProto Clone() {
      return new NestedFeatureProto(this);
    }

    /// <summary>Field number for the "feature_type" field.</summary>
    public const int FeatureTypeFieldNumber = 1;
    private readonly static global::Keyhole.Dbroot.NestedFeatureProto.Types.FeatureType FeatureTypeDefaultValue = global::Keyhole.Dbroot.NestedFeatureProto.Types.FeatureType.TypePointZ;

    private global::Keyhole.Dbroot.NestedFeatureProto.Types.FeatureType featureType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.NestedFeatureProto.Types.FeatureType FeatureType {
      get { if ((_hasBits0 & 1) != 0) { return featureType_; } else { return FeatureTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        featureType_ = value;
      }
    }
    /// <summary>Gets whether the "feature_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeatureType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "feature_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeatureType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "kml_url" field.</summary>
    public const int KmlUrlFieldNumber = 2;
    private global::Keyhole.Dbroot.StringIdOrValueProto kmlUrl_;
    /// <summary>
    /// URL of KML layer, if present.
    /// Version support: GE 4.0.2292+, GE5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto KmlUrl {
      get { return kmlUrl_; }
      set {
        kmlUrl_ = value;
      }
    }

    /// <summary>Field number for the "database_url" field.</summary>
    public const int DatabaseUrlFieldNumber = 21;
    private readonly static string DatabaseUrlDefaultValue = "";

    private string databaseUrl_;
    /// <summary>
    /// If this url appears, it means this object is referring to a secondary
    /// database that should be added.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DatabaseUrl {
      get { return databaseUrl_ ?? DatabaseUrlDefaultValue; }
      set {
        databaseUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "database_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDatabaseUrl {
      get { return databaseUrl_ != null; }
    }
    /// <summary>Clears the value of the "database_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDatabaseUrl() {
      databaseUrl_ = null;
    }

    /// <summary>Field number for the "layer" field.</summary>
    public const int LayerFieldNumber = 3;
    private global::Keyhole.Dbroot.LayerProto layer_;
    /// <summary>
    /// Data members only used for layers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.LayerProto Layer {
      get { return layer_; }
      set {
        layer_ = value;
      }
    }

    /// <summary>Field number for the "folder" field.</summary>
    public const int FolderFieldNumber = 4;
    private global::Keyhole.Dbroot.FolderProto folder_;
    /// <summary>
    /// Data members only used in containers of other features. This has no effect
    /// if the layer has no children.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.FolderProto Folder {
      get { return folder_; }
      set {
        folder_ = value;
      }
    }

    /// <summary>Field number for the "requirement" field.</summary>
    public const int RequirementFieldNumber = 5;
    private global::Keyhole.Dbroot.RequirementProto requirement_;
    /// <summary>
    /// Additional, optional specifications to extend layers and folders.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.RequirementProto Requirement {
      get { return requirement_; }
      set {
        requirement_ = value;
      }
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 6;
    private readonly static int ChannelIdDefaultValue = 0;

    private int channelId_;
    /// <summary>
    /// Each nested feature must have its own unique identifier number. This
    /// identifier is used in several places in the quadtree packets and fusion
    /// packets to link the fusion packet to a given style specification for
    /// example.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChannelId {
      get { if ((_hasBits0 & 2) != 0) { return channelId_; } else { return ChannelIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        channelId_ = value;
      }
    }
    /// <summary>Gets whether the "channel_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChannelId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "channel_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChannelId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 7;
    private global::Keyhole.Dbroot.StringIdOrValueProto displayName_;
    /// <summary>
    /// Name of the nested feature, either as a string ID or actual value.
    /// Names that must be translated should probably use string IDs so this
    /// part of the protocol buffer is the same across all languages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto DisplayName {
      get { return displayName_; }
      set {
        displayName_ = value;
      }
    }

    /// <summary>Field number for the "is_visible" field.</summary>
    public const int IsVisibleFieldNumber = 8;
    private readonly static bool IsVisibleDefaultValue = true;

    private bool isVisible_;
    /// <summary>
    /// Controls whether the nested feature can be seen or not in the layer panel
    /// menu. Visibility is inherited from parents too (all parents in the
    /// hierarchy must be visible for a layer to be visible).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsVisible {
      get { if ((_hasBits0 & 4) != 0) { return isVisible_; } else { return IsVisibleDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isVisible_ = value;
      }
    }
    /// <summary>Gets whether the "is_visible" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsVisible {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_visible" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsVisible() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "is_enabled" field.</summary>
    public const int IsEnabledFieldNumber = 9;
    private readonly static bool IsEnabledDefaultValue = true;

    private bool isEnabled_;
    /// <summary>
    /// Controls whether the nested feature is turned on by default when the
    /// client starts up.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEnabled {
      get { if ((_hasBits0 & 8) != 0) { return isEnabled_; } else { return IsEnabledDefaultValue; } }
      set {
        _hasBits0 |= 8;
        isEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "is_enabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsEnabled {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "is_enabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsEnabled() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "is_checked" field.</summary>
    public const int IsCheckedFieldNumber = 10;
    private readonly static bool IsCheckedDefaultValue = false;

    private bool isChecked_;
    /// <summary>
    /// Does the feature have a 'check' in the layer menu panel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsChecked {
      get { if ((_hasBits0 & 16) != 0) { return isChecked_; } else { return IsCheckedDefaultValue; } }
      set {
        _hasBits0 |= 16;
        isChecked_ = value;
      }
    }
    /// <summary>Gets whether the "is_checked" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsChecked {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "is_checked" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsChecked() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "layer_menu_icon_path" field.</summary>
    public const int LayerMenuIconPathFieldNumber = 11;
    private readonly static string LayerMenuIconPathDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("aWNvbnMvNzczX2wucG5n"), 0, 15);

    private string layerMenuIconPath_;
    /// <summary>
    /// Path of image that will be displayed in the layer menu panel. These must
    /// be 16x16 8-bit/color RGBA, non-interlaced png images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LayerMenuIconPath {
      get { return layerMenuIconPath_ ?? LayerMenuIconPathDefaultValue; }
      set {
        layerMenuIconPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "layer_menu_icon_path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLayerMenuIconPath {
      get { return layerMenuIconPath_ != null; }
    }
    /// <summary>Clears the value of the "layer_menu_icon_path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLayerMenuIconPath() {
      layerMenuIconPath_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 12;
    private global::Keyhole.Dbroot.StringIdOrValueProto description_;
    /// <summary>
    /// Human readable description string of the layer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto Description {
      get { return description_; }
      set {
        description_ = value;
      }
    }

    /// <summary>Field number for the "look_at" field.</summary>
    public const int LookAtFieldNumber = 13;
    private global::Keyhole.Dbroot.LookAtProto lookAt_;
    /// <summary>
    /// Default view for that layer. In Google Earth, double-clicking on that layer
    /// flies to the default view of the layer if it is specified. Layers with no
    /// default view cannot be "flown to".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.LookAtProto LookAt {
      get { return lookAt_; }
      set {
        lookAt_ = value;
      }
    }

    /// <summary>Field number for the "asset_uuid" field.</summary>
    public const int AssetUuidFieldNumber = 15;
    private readonly static string AssetUuidDefaultValue = "";

    private string assetUuid_;
    /// <summary>
    /// The asset UUID is used by the Earth Plugin to provide a unique identifier
    /// that exposes the different layers via a JavaScript API.
    /// This string must be unique across *all* layers in the entire dbroot
    /// hierarchy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AssetUuid {
      get { return assetUuid_ ?? AssetUuidDefaultValue; }
      set {
        assetUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "asset_uuid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAssetUuid {
      get { return assetUuid_ != null; }
    }
    /// <summary>Clears the value of the "asset_uuid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAssetUuid() {
      assetUuid_ = null;
    }

    /// <summary>Field number for the "is_save_locked" field.</summary>
    public const int IsSaveLockedFieldNumber = 16;
    private readonly static bool IsSaveLockedDefaultValue = true;

    private bool isSaveLocked_;
    /// <summary>
    /// The save_locked field controls whether or not a placemark can be right-
    /// clicked and saved out to My Places.
    /// Note: Clients &lt; 4.3 did not accurately use this feature, so everything was
    /// set to 'true'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsSaveLocked {
      get { if ((_hasBits0 & 32) != 0) { return isSaveLocked_; } else { return IsSaveLockedDefaultValue; } }
      set {
        _hasBits0 |= 32;
        isSaveLocked_ = value;
      }
    }
    /// <summary>Gets whether the "is_save_locked" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsSaveLocked {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "is_save_locked" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsSaveLocked() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.NestedFeatureProto> _repeated_children_codec
        = pb::FieldCodec.ForMessage(138, global::Keyhole.Dbroot.NestedFeatureProto.Parser);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.NestedFeatureProto> children_ = new pbc::RepeatedField<global::Keyhole.Dbroot.NestedFeatureProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.NestedFeatureProto> Children {
      get { return children_; }
    }

    /// <summary>Field number for the "client_config_script_name" field.</summary>
    public const int ClientConfigScriptNameFieldNumber = 18;
    private readonly static string ClientConfigScriptNameDefaultValue = "";

    private string clientConfigScriptName_;
    /// <summary>
    /// Reference to client configuration script which is applied to every layer.
    /// This allows some layers to be turned off on certain clients based on
    /// decisions that must be made at runtime. The client is responsible for
    /// parsing and applying the script.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientConfigScriptName {
      get { return clientConfigScriptName_ ?? ClientConfigScriptNameDefaultValue; }
      set {
        clientConfigScriptName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "client_config_script_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClientConfigScriptName {
      get { return clientConfigScriptName_ != null; }
    }
    /// <summary>Clears the value of the "client_config_script_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClientConfigScriptName() {
      clientConfigScriptName_ = null;
    }

    /// <summary>Field number for the "diorama_data_channel_base" field.</summary>
    public const int DioramaDataChannelBaseFieldNumber = 19;
    private readonly static int DioramaDataChannelBaseDefaultValue = -1;

    private int dioramaDataChannelBase_;
    /// <summary>
    /// This field is used only for Diorama layers, which may contain multiple
    /// data packets per tile for a single &lt;etNestedLayer> entry in the dbroot.
    /// When this field is set to a positive integer, the client will fetch this
    /// layer's packets along with Diorama metadata indicating the number of
    /// packets per tile. For each packet i between 0 and number of packets per
    /// tile, the client will fetch data for layer diorama_data_channel_base + i;
    /// however, these layers do not appear in the dbroot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DioramaDataChannelBase {
      get { if ((_hasBits0 & 64) != 0) { return dioramaDataChannelBase_; } else { return DioramaDataChannelBaseDefaultValue; } }
      set {
        _hasBits0 |= 64;
        dioramaDataChannelBase_ = value;
      }
    }
    /// <summary>Gets whether the "diorama_data_channel_base" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDioramaDataChannelBase {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "diorama_data_channel_base" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDioramaDataChannelBase() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "replica_data_channel_base" field.</summary>
    public const int ReplicaDataChannelBaseFieldNumber = 20;
    private readonly static int ReplicaDataChannelBaseDefaultValue = -1;

    private int replicaDataChannelBase_;
    /// <summary>
    /// This field is used only for 3D replica data (e.g. Trees) and uses the
    /// same mechanism as described in the diorama_data_channel_base field above.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReplicaDataChannelBase {
      get { if ((_hasBits0 & 128) != 0) { return replicaDataChannelBase_; } else { return ReplicaDataChannelBaseDefaultValue; } }
      set {
        _hasBits0 |= 128;
        replicaDataChannelBase_ = value;
      }
    }
    /// <summary>Gets whether the "replica_data_channel_base" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReplicaDataChannelBase {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "replica_data_channel_base" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReplicaDataChannelBase() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NestedFeatureProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NestedFeatureProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FeatureType != other.FeatureType) return false;
      if (!object.Equals(KmlUrl, other.KmlUrl)) return false;
      if (DatabaseUrl != other.DatabaseUrl) return false;
      if (!object.Equals(Layer, other.Layer)) return false;
      if (!object.Equals(Folder, other.Folder)) return false;
      if (!object.Equals(Requirement, other.Requirement)) return false;
      if (ChannelId != other.ChannelId) return false;
      if (!object.Equals(DisplayName, other.DisplayName)) return false;
      if (IsVisible != other.IsVisible) return false;
      if (IsEnabled != other.IsEnabled) return false;
      if (IsChecked != other.IsChecked) return false;
      if (LayerMenuIconPath != other.LayerMenuIconPath) return false;
      if (!object.Equals(Description, other.Description)) return false;
      if (!object.Equals(LookAt, other.LookAt)) return false;
      if (AssetUuid != other.AssetUuid) return false;
      if (IsSaveLocked != other.IsSaveLocked) return false;
      if(!children_.Equals(other.children_)) return false;
      if (ClientConfigScriptName != other.ClientConfigScriptName) return false;
      if (DioramaDataChannelBase != other.DioramaDataChannelBase) return false;
      if (ReplicaDataChannelBase != other.ReplicaDataChannelBase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFeatureType) hash ^= FeatureType.GetHashCode();
      if (kmlUrl_ != null) hash ^= KmlUrl.GetHashCode();
      if (HasDatabaseUrl) hash ^= DatabaseUrl.GetHashCode();
      if (layer_ != null) hash ^= Layer.GetHashCode();
      if (folder_ != null) hash ^= Folder.GetHashCode();
      if (requirement_ != null) hash ^= Requirement.GetHashCode();
      if (HasChannelId) hash ^= ChannelId.GetHashCode();
      if (displayName_ != null) hash ^= DisplayName.GetHashCode();
      if (HasIsVisible) hash ^= IsVisible.GetHashCode();
      if (HasIsEnabled) hash ^= IsEnabled.GetHashCode();
      if (HasIsChecked) hash ^= IsChecked.GetHashCode();
      if (HasLayerMenuIconPath) hash ^= LayerMenuIconPath.GetHashCode();
      if (description_ != null) hash ^= Description.GetHashCode();
      if (lookAt_ != null) hash ^= LookAt.GetHashCode();
      if (HasAssetUuid) hash ^= AssetUuid.GetHashCode();
      if (HasIsSaveLocked) hash ^= IsSaveLocked.GetHashCode();
      hash ^= children_.GetHashCode();
      if (HasClientConfigScriptName) hash ^= ClientConfigScriptName.GetHashCode();
      if (HasDioramaDataChannelBase) hash ^= DioramaDataChannelBase.GetHashCode();
      if (HasReplicaDataChannelBase) hash ^= ReplicaDataChannelBase.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFeatureType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) FeatureType);
      }
      if (kmlUrl_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(KmlUrl);
      }
      if (layer_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Layer);
      }
      if (folder_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Folder);
      }
      if (requirement_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Requirement);
      }
      if (HasChannelId) {
        output.WriteRawTag(48);
        output.WriteInt32(ChannelId);
      }
      if (displayName_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DisplayName);
      }
      if (HasIsVisible) {
        output.WriteRawTag(64);
        output.WriteBool(IsVisible);
      }
      if (HasIsEnabled) {
        output.WriteRawTag(72);
        output.WriteBool(IsEnabled);
      }
      if (HasIsChecked) {
        output.WriteRawTag(80);
        output.WriteBool(IsChecked);
      }
      if (HasLayerMenuIconPath) {
        output.WriteRawTag(90);
        output.WriteString(LayerMenuIconPath);
      }
      if (description_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Description);
      }
      if (lookAt_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(LookAt);
      }
      if (HasAssetUuid) {
        output.WriteRawTag(122);
        output.WriteString(AssetUuid);
      }
      if (HasIsSaveLocked) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsSaveLocked);
      }
      children_.WriteTo(output, _repeated_children_codec);
      if (HasClientConfigScriptName) {
        output.WriteRawTag(146, 1);
        output.WriteString(ClientConfigScriptName);
      }
      if (HasDioramaDataChannelBase) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(DioramaDataChannelBase);
      }
      if (HasReplicaDataChannelBase) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ReplicaDataChannelBase);
      }
      if (HasDatabaseUrl) {
        output.WriteRawTag(170, 1);
        output.WriteString(DatabaseUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFeatureType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) FeatureType);
      }
      if (kmlUrl_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(KmlUrl);
      }
      if (layer_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Layer);
      }
      if (folder_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Folder);
      }
      if (requirement_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Requirement);
      }
      if (HasChannelId) {
        output.WriteRawTag(48);
        output.WriteInt32(ChannelId);
      }
      if (displayName_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DisplayName);
      }
      if (HasIsVisible) {
        output.WriteRawTag(64);
        output.WriteBool(IsVisible);
      }
      if (HasIsEnabled) {
        output.WriteRawTag(72);
        output.WriteBool(IsEnabled);
      }
      if (HasIsChecked) {
        output.WriteRawTag(80);
        output.WriteBool(IsChecked);
      }
      if (HasLayerMenuIconPath) {
        output.WriteRawTag(90);
        output.WriteString(LayerMenuIconPath);
      }
      if (description_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Description);
      }
      if (lookAt_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(LookAt);
      }
      if (HasAssetUuid) {
        output.WriteRawTag(122);
        output.WriteString(AssetUuid);
      }
      if (HasIsSaveLocked) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsSaveLocked);
      }
      children_.WriteTo(ref output, _repeated_children_codec);
      if (HasClientConfigScriptName) {
        output.WriteRawTag(146, 1);
        output.WriteString(ClientConfigScriptName);
      }
      if (HasDioramaDataChannelBase) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(DioramaDataChannelBase);
      }
      if (HasReplicaDataChannelBase) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ReplicaDataChannelBase);
      }
      if (HasDatabaseUrl) {
        output.WriteRawTag(170, 1);
        output.WriteString(DatabaseUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasFeatureType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FeatureType);
      }
      if (kmlUrl_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KmlUrl);
      }
      if (HasDatabaseUrl) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DatabaseUrl);
      }
      if (layer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Layer);
      }
      if (folder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Folder);
      }
      if (requirement_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Requirement);
      }
      if (HasChannelId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelId);
      }
      if (displayName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayName);
      }
      if (HasIsVisible) {
        size += 1 + 1;
      }
      if (HasIsEnabled) {
        size += 1 + 1;
      }
      if (HasIsChecked) {
        size += 1 + 1;
      }
      if (HasLayerMenuIconPath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LayerMenuIconPath);
      }
      if (description_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
      }
      if (lookAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LookAt);
      }
      if (HasAssetUuid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetUuid);
      }
      if (HasIsSaveLocked) {
        size += 2 + 1;
      }
      size += children_.CalculateSize(_repeated_children_codec);
      if (HasClientConfigScriptName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientConfigScriptName);
      }
      if (HasDioramaDataChannelBase) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DioramaDataChannelBase);
      }
      if (HasReplicaDataChannelBase) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReplicaDataChannelBase);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NestedFeatureProto other) {
      if (other == null) {
        return;
      }
      if (other.HasFeatureType) {
        FeatureType = other.FeatureType;
      }
      if (other.kmlUrl_ != null) {
        if (kmlUrl_ == null) {
          KmlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        KmlUrl.MergeFrom(other.KmlUrl);
      }
      if (other.HasDatabaseUrl) {
        DatabaseUrl = other.DatabaseUrl;
      }
      if (other.layer_ != null) {
        if (layer_ == null) {
          Layer = new global::Keyhole.Dbroot.LayerProto();
        }
        Layer.MergeFrom(other.Layer);
      }
      if (other.folder_ != null) {
        if (folder_ == null) {
          Folder = new global::Keyhole.Dbroot.FolderProto();
        }
        Folder.MergeFrom(other.Folder);
      }
      if (other.requirement_ != null) {
        if (requirement_ == null) {
          Requirement = new global::Keyhole.Dbroot.RequirementProto();
        }
        Requirement.MergeFrom(other.Requirement);
      }
      if (other.HasChannelId) {
        ChannelId = other.ChannelId;
      }
      if (other.displayName_ != null) {
        if (displayName_ == null) {
          DisplayName = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        DisplayName.MergeFrom(other.DisplayName);
      }
      if (other.HasIsVisible) {
        IsVisible = other.IsVisible;
      }
      if (other.HasIsEnabled) {
        IsEnabled = other.IsEnabled;
      }
      if (other.HasIsChecked) {
        IsChecked = other.IsChecked;
      }
      if (other.HasLayerMenuIconPath) {
        LayerMenuIconPath = other.LayerMenuIconPath;
      }
      if (other.description_ != null) {
        if (description_ == null) {
          Description = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        Description.MergeFrom(other.Description);
      }
      if (other.lookAt_ != null) {
        if (lookAt_ == null) {
          LookAt = new global::Keyhole.Dbroot.LookAtProto();
        }
        LookAt.MergeFrom(other.LookAt);
      }
      if (other.HasAssetUuid) {
        AssetUuid = other.AssetUuid;
      }
      if (other.HasIsSaveLocked) {
        IsSaveLocked = other.IsSaveLocked;
      }
      children_.Add(other.children_);
      if (other.HasClientConfigScriptName) {
        ClientConfigScriptName = other.ClientConfigScriptName;
      }
      if (other.HasDioramaDataChannelBase) {
        DioramaDataChannelBase = other.DioramaDataChannelBase;
      }
      if (other.HasReplicaDataChannelBase) {
        ReplicaDataChannelBase = other.ReplicaDataChannelBase;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FeatureType = (global::Keyhole.Dbroot.NestedFeatureProto.Types.FeatureType) input.ReadEnum();
            break;
          }
          case 18: {
            if (kmlUrl_ == null) {
              KmlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(KmlUrl);
            break;
          }
          case 26: {
            if (layer_ == null) {
              Layer = new global::Keyhole.Dbroot.LayerProto();
            }
            input.ReadMessage(Layer);
            break;
          }
          case 34: {
            if (folder_ == null) {
              Folder = new global::Keyhole.Dbroot.FolderProto();
            }
            input.ReadMessage(Folder);
            break;
          }
          case 42: {
            if (requirement_ == null) {
              Requirement = new global::Keyhole.Dbroot.RequirementProto();
            }
            input.ReadMessage(Requirement);
            break;
          }
          case 48: {
            ChannelId = input.ReadInt32();
            break;
          }
          case 58: {
            if (displayName_ == null) {
              DisplayName = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(DisplayName);
            break;
          }
          case 64: {
            IsVisible = input.ReadBool();
            break;
          }
          case 72: {
            IsEnabled = input.ReadBool();
            break;
          }
          case 80: {
            IsChecked = input.ReadBool();
            break;
          }
          case 90: {
            LayerMenuIconPath = input.ReadString();
            break;
          }
          case 98: {
            if (description_ == null) {
              Description = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(Description);
            break;
          }
          case 106: {
            if (lookAt_ == null) {
              LookAt = new global::Keyhole.Dbroot.LookAtProto();
            }
            input.ReadMessage(LookAt);
            break;
          }
          case 122: {
            AssetUuid = input.ReadString();
            break;
          }
          case 128: {
            IsSaveLocked = input.ReadBool();
            break;
          }
          case 138: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
          case 146: {
            ClientConfigScriptName = input.ReadString();
            break;
          }
          case 152: {
            DioramaDataChannelBase = input.ReadInt32();
            break;
          }
          case 160: {
            ReplicaDataChannelBase = input.ReadInt32();
            break;
          }
          case 170: {
            DatabaseUrl = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FeatureType = (global::Keyhole.Dbroot.NestedFeatureProto.Types.FeatureType) input.ReadEnum();
            break;
          }
          case 18: {
            if (kmlUrl_ == null) {
              KmlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(KmlUrl);
            break;
          }
          case 26: {
            if (layer_ == null) {
              Layer = new global::Keyhole.Dbroot.LayerProto();
            }
            input.ReadMessage(Layer);
            break;
          }
          case 34: {
            if (folder_ == null) {
              Folder = new global::Keyhole.Dbroot.FolderProto();
            }
            input.ReadMessage(Folder);
            break;
          }
          case 42: {
            if (requirement_ == null) {
              Requirement = new global::Keyhole.Dbroot.RequirementProto();
            }
            input.ReadMessage(Requirement);
            break;
          }
          case 48: {
            ChannelId = input.ReadInt32();
            break;
          }
          case 58: {
            if (displayName_ == null) {
              DisplayName = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(DisplayName);
            break;
          }
          case 64: {
            IsVisible = input.ReadBool();
            break;
          }
          case 72: {
            IsEnabled = input.ReadBool();
            break;
          }
          case 80: {
            IsChecked = input.ReadBool();
            break;
          }
          case 90: {
            LayerMenuIconPath = input.ReadString();
            break;
          }
          case 98: {
            if (description_ == null) {
              Description = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(Description);
            break;
          }
          case 106: {
            if (lookAt_ == null) {
              LookAt = new global::Keyhole.Dbroot.LookAtProto();
            }
            input.ReadMessage(LookAt);
            break;
          }
          case 122: {
            AssetUuid = input.ReadString();
            break;
          }
          case 128: {
            IsSaveLocked = input.ReadBool();
            break;
          }
          case 138: {
            children_.AddEntriesFrom(ref input, _repeated_children_codec);
            break;
          }
          case 146: {
            ClientConfigScriptName = input.ReadString();
            break;
          }
          case 152: {
            DioramaDataChannelBase = input.ReadInt32();
            break;
          }
          case 160: {
            ReplicaDataChannelBase = input.ReadInt32();
            break;
          }
          case 170: {
            DatabaseUrl = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the NestedFeatureProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum FeatureType {
        [pbr::OriginalName("TYPE_POINT_Z")] TypePointZ = 1,
        [pbr::OriginalName("TYPE_POLYGON_Z")] TypePolygonZ = 2,
        [pbr::OriginalName("TYPE_LINE_Z")] TypeLineZ = 3,
        /// <summary>
        /// This will soon be deprecated, do not use.
        /// </summary>
        [pbr::OriginalName("TYPE_TERRAIN")] TypeTerrain = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// Deprecated in Earth 6.2 and higher in favor of search_config.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MfeDomainFeaturesProto : pb::IMessage<MfeDomainFeaturesProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MfeDomainFeaturesProto> _parser = new pb::MessageParser<MfeDomainFeaturesProto>(() => new MfeDomainFeaturesProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MfeDomainFeaturesProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MfeDomainFeaturesProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MfeDomainFeaturesProto(MfeDomainFeaturesProto other) : this() {
      countryCode_ = other.countryCode_;
      domainName_ = other.domainName_;
      supportedFeatures_ = other.supportedFeatures_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MfeDomainFeaturesProto Clone() {
      return new MfeDomainFeaturesProto(this);
    }

    /// <summary>Field number for the "country_code" field.</summary>
    public const int CountryCodeFieldNumber = 1;
    private readonly static string CountryCodeDefaultValue = "";

    private string countryCode_;
    /// <summary>
    /// 2-character country code for which these values apply
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryCode {
      get { return countryCode_ ?? CountryCodeDefaultValue; }
      set {
        countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "country_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCountryCode {
      get { return countryCode_ != null; }
    }
    /// <summary>Clears the value of the "country_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCountryCode() {
      countryCode_ = null;
    }

    /// <summary>Field number for the "domain_name" field.</summary>
    public const int DomainNameFieldNumber = 2;
    private readonly static string DomainNameDefaultValue = "";

    private string domainName_;
    /// <summary>
    /// domain name to use for requests - e.g. maps.google.com (default
    /// protocol is http, default port is 80). If a full URL is specified,
    /// it will override the default maps url. Otherwise, if just a host is
    /// specified (as usual), the port, path and protocol of the default maps URL
    /// will be used to build the URL for this country.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DomainName {
      get { return domainName_ ?? DomainNameDefaultValue; }
      set {
        domainName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "domain_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDomainName {
      get { return domainName_ != null; }
    }
    /// <summary>Clears the value of the "domain_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDomainName() {
      domainName_ = null;
    }

    /// <summary>Field number for the "supported_features" field.</summary>
    public const int SupportedFeaturesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.MfeDomainFeaturesProto.Types.SupportedFeature> _repeated_supportedFeatures_codec
        = pb::FieldCodec.ForEnum(24, x => (int) x, x => (global::Keyhole.Dbroot.MfeDomainFeaturesProto.Types.SupportedFeature) x);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.MfeDomainFeaturesProto.Types.SupportedFeature> supportedFeatures_ = new pbc::RepeatedField<global::Keyhole.Dbroot.MfeDomainFeaturesProto.Types.SupportedFeature>();
    /// <summary>
    /// List of all available features. Duplicate entries are ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.MfeDomainFeaturesProto.Types.SupportedFeature> SupportedFeatures {
      get { return supportedFeatures_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MfeDomainFeaturesProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MfeDomainFeaturesProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CountryCode != other.CountryCode) return false;
      if (DomainName != other.DomainName) return false;
      if(!supportedFeatures_.Equals(other.supportedFeatures_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCountryCode) hash ^= CountryCode.GetHashCode();
      if (HasDomainName) hash ^= DomainName.GetHashCode();
      hash ^= supportedFeatures_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCountryCode) {
        output.WriteRawTag(10);
        output.WriteString(CountryCode);
      }
      if (HasDomainName) {
        output.WriteRawTag(18);
        output.WriteString(DomainName);
      }
      supportedFeatures_.WriteTo(output, _repeated_supportedFeatures_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCountryCode) {
        output.WriteRawTag(10);
        output.WriteString(CountryCode);
      }
      if (HasDomainName) {
        output.WriteRawTag(18);
        output.WriteString(DomainName);
      }
      supportedFeatures_.WriteTo(ref output, _repeated_supportedFeatures_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCountryCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
      }
      if (HasDomainName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DomainName);
      }
      size += supportedFeatures_.CalculateSize(_repeated_supportedFeatures_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MfeDomainFeaturesProto other) {
      if (other == null) {
        return;
      }
      if (other.HasCountryCode) {
        CountryCode = other.CountryCode;
      }
      if (other.HasDomainName) {
        DomainName = other.DomainName;
      }
      supportedFeatures_.Add(other.supportedFeatures_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CountryCode = input.ReadString();
            break;
          }
          case 18: {
            DomainName = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            supportedFeatures_.AddEntriesFrom(input, _repeated_supportedFeatures_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            CountryCode = input.ReadString();
            break;
          }
          case 18: {
            DomainName = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            supportedFeatures_.AddEntriesFrom(ref input, _repeated_supportedFeatures_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MfeDomainFeaturesProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// enum that lists all available features.
      /// </summary>
      public enum SupportedFeature {
        [pbr::OriginalName("GEOCODING")] Geocoding = 0,
        [pbr::OriginalName("LOCAL_SEARCH")] LocalSearch = 1,
        [pbr::OriginalName("DRIVING_DIRECTIONS")] DrivingDirections = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Collection of various client features that can be enabled or disabled. Some
  /// of these options are not really tied to the database.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ClientOptionsProto : pb::IMessage<ClientOptionsProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientOptionsProto> _parser = new pb::MessageParser<ClientOptionsProto>(() => new ClientOptionsProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ClientOptionsProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientOptionsProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientOptionsProto(ClientOptionsProto other) : this() {
      _hasBits0 = other._hasBits0;
      disableDiskCache_ = other.disableDiskCache_;
      disableEmbeddedBrowserVista_ = other.disableEmbeddedBrowserVista_;
      drawAtmosphere_ = other.drawAtmosphere_;
      drawStars_ = other.drawStars_;
      shaderFilePrefix_ = other.shaderFilePrefix_;
      useProtobufQuadtreePackets_ = other.useProtobufQuadtreePackets_;
      useExtendedCopyrightIds_ = other.useExtendedCopyrightIds_;
      precipitationsOptions_ = other.precipitationsOptions_ != null ? other.precipitationsOptions_.Clone() : null;
      captureOptions_ = other.captureOptions_ != null ? other.captureOptions_.Clone() : null;
      show2DMapsIcon_ = other.show2DMapsIcon_;
      disableInternalBrowser_ = other.disableInternalBrowser_;
      internalBrowserBlacklist_ = other.internalBrowserBlacklist_;
      internalBrowserOriginWhitelist_ = other.internalBrowserOriginWhitelist_;
      polarTileMergingLevel_ = other.polarTileMergingLevel_;
      jsBridgeRequestWhitelist_ = other.jsBridgeRequestWhitelist_;
      mapsOptions_ = other.mapsOptions_ != null ? other.mapsOptions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientOptionsProto Clone() {
      return new ClientOptionsProto(this);
    }

    /// <summary>Field number for the "disable_disk_cache" field.</summary>
    public const int DisableDiskCacheFieldNumber = 1;
    private readonly static bool DisableDiskCacheDefaultValue = false;

    private bool disableDiskCache_;
    /// <summary>
    /// If true, no data will be cached on disk for this database. It will not
    /// be accessible offline.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DisableDiskCache {
      get { if ((_hasBits0 & 1) != 0) { return disableDiskCache_; } else { return DisableDiskCacheDefaultValue; } }
      set {
        _hasBits0 |= 1;
        disableDiskCache_ = value;
      }
    }
    /// <summary>Gets whether the "disable_disk_cache" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDisableDiskCache {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "disable_disk_cache" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDisableDiskCache() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "disable_embedded_browser_vista" field.</summary>
    public const int DisableEmbeddedBrowserVistaFieldNumber = 2;
    private readonly static bool DisableEmbeddedBrowserVistaDefaultValue = false;

    private bool disableEmbeddedBrowserVista_;
    /// <summary>
    /// If true, disables the embedded browser feature from Earth 5.1 and earlier
    /// when running on Vista or Windows 7.  This setting is deprecated, since it
    /// applies only to older clients that do not parse dbroot_proto anyway.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DisableEmbeddedBrowserVista {
      get { if ((_hasBits0 & 2) != 0) { return disableEmbeddedBrowserVista_; } else { return DisableEmbeddedBrowserVistaDefaultValue; } }
      set {
        _hasBits0 |= 2;
        disableEmbeddedBrowserVista_ = value;
      }
    }
    /// <summary>Gets whether the "disable_embedded_browser_vista" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDisableEmbeddedBrowserVista {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "disable_embedded_browser_vista" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDisableEmbeddedBrowserVista() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "draw_atmosphere" field.</summary>
    public const int DrawAtmosphereFieldNumber = 3;
    private readonly static bool DrawAtmosphereDefaultValue = true;

    private bool drawAtmosphere_;
    /// <summary>
    /// Used to enable or disable the atmosphere. You may want to disable the
    /// atmosphere on the Moon, for instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DrawAtmosphere {
      get { if ((_hasBits0 & 4) != 0) { return drawAtmosphere_; } else { return DrawAtmosphereDefaultValue; } }
      set {
        _hasBits0 |= 4;
        drawAtmosphere_ = value;
      }
    }
    /// <summary>Gets whether the "draw_atmosphere" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDrawAtmosphere {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "draw_atmosphere" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDrawAtmosphere() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "draw_stars" field.</summary>
    public const int DrawStarsFieldNumber = 4;
    private readonly static bool DrawStarsDefaultValue = true;

    private bool drawStars_;
    /// <summary>
    /// Used to enable drawing stars around the planet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DrawStars {
      get { if ((_hasBits0 & 8) != 0) { return drawStars_; } else { return DrawStarsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        drawStars_ = value;
      }
    }
    /// <summary>Gets whether the "draw_stars" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDrawStars {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "draw_stars" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDrawStars() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "shader_file_prefix" field.</summary>
    public const int ShaderFilePrefixFieldNumber = 5;
    private readonly static string ShaderFilePrefixDefaultValue = "";

    private string shaderFilePrefix_;
    /// <summary>
    /// Specifies the prefix to use for the names of the shader files.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShaderFilePrefix {
      get { return shaderFilePrefix_ ?? ShaderFilePrefixDefaultValue; }
      set {
        shaderFilePrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "shader_file_prefix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShaderFilePrefix {
      get { return shaderFilePrefix_ != null; }
    }
    /// <summary>Clears the value of the "shader_file_prefix" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShaderFilePrefix() {
      shaderFilePrefix_ = null;
    }

    /// <summary>Field number for the "use_protobuf_quadtree_packets" field.</summary>
    public const int UseProtobufQuadtreePacketsFieldNumber = 6;
    private readonly static bool UseProtobufQuadtreePacketsDefaultValue = false;

    private bool useProtobufQuadtreePackets_;
    /// <summary>
    /// If set to true, this database uses protocol buffer quadtree packets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseProtobufQuadtreePackets {
      get { if ((_hasBits0 & 16) != 0) { return useProtobufQuadtreePackets_; } else { return UseProtobufQuadtreePacketsDefaultValue; } }
      set {
        _hasBits0 |= 16;
        useProtobufQuadtreePackets_ = value;
      }
    }
    /// <summary>Gets whether the "use_protobuf_quadtree_packets" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUseProtobufQuadtreePackets {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "use_protobuf_quadtree_packets" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUseProtobufQuadtreePackets() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "use_extended_copyright_ids" field.</summary>
    public const int UseExtendedCopyrightIdsFieldNumber = 7;
    private readonly static bool UseExtendedCopyrightIdsDefaultValue = true;

    private bool useExtendedCopyrightIds_;
    /// <summary>
    /// If true, this database uses large copyright IDs (allows copyright ids
    /// larger than 255).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseExtendedCopyrightIds {
      get { if ((_hasBits0 & 32) != 0) { return useExtendedCopyrightIds_; } else { return UseExtendedCopyrightIdsDefaultValue; } }
      set {
        _hasBits0 |= 32;
        useExtendedCopyrightIds_ = value;
      }
    }
    /// <summary>Gets whether the "use_extended_copyright_ids" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUseExtendedCopyrightIds {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "use_extended_copyright_ids" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUseExtendedCopyrightIds() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "precipitations_options" field.</summary>
    public const int PrecipitationsOptionsFieldNumber = 8;
    private global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions precipitationsOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions PrecipitationsOptions {
      get { return precipitationsOptions_; }
      set {
        precipitationsOptions_ = value;
      }
    }

    /// <summary>Field number for the "capture_options" field.</summary>
    public const int CaptureOptionsFieldNumber = 9;
    private global::Keyhole.Dbroot.ClientOptionsProto.Types.CaptureOptions captureOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.ClientOptionsProto.Types.CaptureOptions CaptureOptions {
      get { return captureOptions_; }
      set {
        captureOptions_ = value;
      }
    }

    /// <summary>Field number for the "show_2d_maps_icon" field.</summary>
    public const int Show2DMapsIconFieldNumber = 10;
    private readonly static bool Show2DMapsIconDefaultValue = true;

    private bool show2DMapsIcon_;
    /// <summary>
    /// Controls whether or not the "Show in maps button" should be shown. On by
    /// default, typically set to false for EC databases.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Show2DMapsIcon {
      get { if ((_hasBits0 & 64) != 0) { return show2DMapsIcon_; } else { return Show2DMapsIconDefaultValue; } }
      set {
        _hasBits0 |= 64;
        show2DMapsIcon_ = value;
      }
    }
    /// <summary>Gets whether the "show_2d_maps_icon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShow2DMapsIcon {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "show_2d_maps_icon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShow2DMapsIcon() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "disable_internal_browser" field.</summary>
    public const int DisableInternalBrowserFieldNumber = 11;
    private readonly static bool DisableInternalBrowserDefaultValue = false;

    private bool disableInternalBrowser_;
    /// <summary>
    /// If true, disables the internal browser feature for Earth 5.2 and later.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DisableInternalBrowser {
      get { if ((_hasBits0 & 128) != 0) { return disableInternalBrowser_; } else { return DisableInternalBrowserDefaultValue; } }
      set {
        _hasBits0 |= 128;
        disableInternalBrowser_ = value;
      }
    }
    /// <summary>Gets whether the "disable_internal_browser" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDisableInternalBrowser {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "disable_internal_browser" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDisableInternalBrowser() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "internal_browser_blacklist" field.</summary>
    public const int InternalBrowserBlacklistFieldNumber = 12;
    private readonly static string InternalBrowserBlacklistDefaultValue = "";

    private string internalBrowserBlacklist_;
    /// <summary>
    /// A whitespace-separated list of globbing patterns (using the * and ?
    /// wildcards) specifying URLs that are explicitly not allowed to open in the
    /// internal browser in Earth 5.2 and later.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InternalBrowserBlacklist {
      get { return internalBrowserBlacklist_ ?? InternalBrowserBlacklistDefaultValue; }
      set {
        internalBrowserBlacklist_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "internal_browser_blacklist" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInternalBrowserBlacklist {
      get { return internalBrowserBlacklist_ != null; }
    }
    /// <summary>Clears the value of the "internal_browser_blacklist" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInternalBrowserBlacklist() {
      internalBrowserBlacklist_ = null;
    }

    /// <summary>Field number for the "internal_browser_origin_whitelist" field.</summary>
    public const int InternalBrowserOriginWhitelistFieldNumber = 13;
    private readonly static string InternalBrowserOriginWhitelistDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("Kg=="), 0, 1);

    private string internalBrowserOriginWhitelist_;
    /// <summary>
    /// A whitespace-separated list of globbing patterns (using the * and ?
    /// wildcards) specifying URLs of origins for which KML content may open
    /// non-blacklisted links in the internal browser in Earth 5.2 and later.
    /// An "origin" refers to the path of the KML or KMZ file that contains the
    /// feature description that has the link in it.  The origin of a streamed
    /// layer is the URL at which it resides on its database server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InternalBrowserOriginWhitelist {
      get { return internalBrowserOriginWhitelist_ ?? InternalBrowserOriginWhitelistDefaultValue; }
      set {
        internalBrowserOriginWhitelist_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "internal_browser_origin_whitelist" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInternalBrowserOriginWhitelist {
      get { return internalBrowserOriginWhitelist_ != null; }
    }
    /// <summary>Clears the value of the "internal_browser_origin_whitelist" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInternalBrowserOriginWhitelist() {
      internalBrowserOriginWhitelist_ = null;
    }

    /// <summary>Field number for the "polar_tile_merging_level" field.</summary>
    public const int PolarTileMergingLevelFieldNumber = 14;
    private readonly static int PolarTileMergingLevelDefaultValue = 0;

    private int polarTileMergingLevel_;
    /// <summary>
    /// Indicates whether the database supports merged polar image tiles,
    /// and if so at what zoom level the merging begins.  Values around 3
    /// are typical.  A value of zero or no value indicates that the
    /// database does not offer merged polar tiles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PolarTileMergingLevel {
      get { if ((_hasBits0 & 256) != 0) { return polarTileMergingLevel_; } else { return PolarTileMergingLevelDefaultValue; } }
      set {
        _hasBits0 |= 256;
        polarTileMergingLevel_ = value;
      }
    }
    /// <summary>Gets whether the "polar_tile_merging_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPolarTileMergingLevel {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "polar_tile_merging_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPolarTileMergingLevel() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "js_bridge_request_whitelist" field.</summary>
    public const int JsBridgeRequestWhitelistFieldNumber = 15;
    private readonly static string JsBridgeRequestWhitelistDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("aHR0cDovLyouZ29vZ2xlLmNvbS8q"), 0, 21);

    private string jsBridgeRequestWhitelist_;
    /// <summary>
    /// A whitespace-separated list of globbing patterns (using the * and ?
    /// wildcards) specifying URLs of origins from which the JavaScript bridge
    /// may make cross-domain requests on behalf of web content.  This should be
    /// set to an empty string for Fusion dbroots, and only Google domains should
    /// be whitelisted for the consumer clients.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string JsBridgeRequestWhitelist {
      get { return jsBridgeRequestWhitelist_ ?? JsBridgeRequestWhitelistDefaultValue; }
      set {
        jsBridgeRequestWhitelist_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "js_bridge_request_whitelist" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJsBridgeRequestWhitelist {
      get { return jsBridgeRequestWhitelist_ != null; }
    }
    /// <summary>Clears the value of the "js_bridge_request_whitelist" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJsBridgeRequestWhitelist() {
      jsBridgeRequestWhitelist_ = null;
    }

    /// <summary>Field number for the "maps_options" field.</summary>
    public const int MapsOptionsFieldNumber = 16;
    private global::Keyhole.Dbroot.ClientOptionsProto.Types.MapsOptions mapsOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.ClientOptionsProto.Types.MapsOptions MapsOptions {
      get { return mapsOptions_; }
      set {
        mapsOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ClientOptionsProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ClientOptionsProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DisableDiskCache != other.DisableDiskCache) return false;
      if (DisableEmbeddedBrowserVista != other.DisableEmbeddedBrowserVista) return false;
      if (DrawAtmosphere != other.DrawAtmosphere) return false;
      if (DrawStars != other.DrawStars) return false;
      if (ShaderFilePrefix != other.ShaderFilePrefix) return false;
      if (UseProtobufQuadtreePackets != other.UseProtobufQuadtreePackets) return false;
      if (UseExtendedCopyrightIds != other.UseExtendedCopyrightIds) return false;
      if (!object.Equals(PrecipitationsOptions, other.PrecipitationsOptions)) return false;
      if (!object.Equals(CaptureOptions, other.CaptureOptions)) return false;
      if (Show2DMapsIcon != other.Show2DMapsIcon) return false;
      if (DisableInternalBrowser != other.DisableInternalBrowser) return false;
      if (InternalBrowserBlacklist != other.InternalBrowserBlacklist) return false;
      if (InternalBrowserOriginWhitelist != other.InternalBrowserOriginWhitelist) return false;
      if (PolarTileMergingLevel != other.PolarTileMergingLevel) return false;
      if (JsBridgeRequestWhitelist != other.JsBridgeRequestWhitelist) return false;
      if (!object.Equals(MapsOptions, other.MapsOptions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDisableDiskCache) hash ^= DisableDiskCache.GetHashCode();
      if (HasDisableEmbeddedBrowserVista) hash ^= DisableEmbeddedBrowserVista.GetHashCode();
      if (HasDrawAtmosphere) hash ^= DrawAtmosphere.GetHashCode();
      if (HasDrawStars) hash ^= DrawStars.GetHashCode();
      if (HasShaderFilePrefix) hash ^= ShaderFilePrefix.GetHashCode();
      if (HasUseProtobufQuadtreePackets) hash ^= UseProtobufQuadtreePackets.GetHashCode();
      if (HasUseExtendedCopyrightIds) hash ^= UseExtendedCopyrightIds.GetHashCode();
      if (precipitationsOptions_ != null) hash ^= PrecipitationsOptions.GetHashCode();
      if (captureOptions_ != null) hash ^= CaptureOptions.GetHashCode();
      if (HasShow2DMapsIcon) hash ^= Show2DMapsIcon.GetHashCode();
      if (HasDisableInternalBrowser) hash ^= DisableInternalBrowser.GetHashCode();
      if (HasInternalBrowserBlacklist) hash ^= InternalBrowserBlacklist.GetHashCode();
      if (HasInternalBrowserOriginWhitelist) hash ^= InternalBrowserOriginWhitelist.GetHashCode();
      if (HasPolarTileMergingLevel) hash ^= PolarTileMergingLevel.GetHashCode();
      if (HasJsBridgeRequestWhitelist) hash ^= JsBridgeRequestWhitelist.GetHashCode();
      if (mapsOptions_ != null) hash ^= MapsOptions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDisableDiskCache) {
        output.WriteRawTag(8);
        output.WriteBool(DisableDiskCache);
      }
      if (HasDisableEmbeddedBrowserVista) {
        output.WriteRawTag(16);
        output.WriteBool(DisableEmbeddedBrowserVista);
      }
      if (HasDrawAtmosphere) {
        output.WriteRawTag(24);
        output.WriteBool(DrawAtmosphere);
      }
      if (HasDrawStars) {
        output.WriteRawTag(32);
        output.WriteBool(DrawStars);
      }
      if (HasShaderFilePrefix) {
        output.WriteRawTag(42);
        output.WriteString(ShaderFilePrefix);
      }
      if (HasUseProtobufQuadtreePackets) {
        output.WriteRawTag(48);
        output.WriteBool(UseProtobufQuadtreePackets);
      }
      if (HasUseExtendedCopyrightIds) {
        output.WriteRawTag(56);
        output.WriteBool(UseExtendedCopyrightIds);
      }
      if (precipitationsOptions_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PrecipitationsOptions);
      }
      if (captureOptions_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CaptureOptions);
      }
      if (HasShow2DMapsIcon) {
        output.WriteRawTag(80);
        output.WriteBool(Show2DMapsIcon);
      }
      if (HasDisableInternalBrowser) {
        output.WriteRawTag(88);
        output.WriteBool(DisableInternalBrowser);
      }
      if (HasInternalBrowserBlacklist) {
        output.WriteRawTag(98);
        output.WriteString(InternalBrowserBlacklist);
      }
      if (HasInternalBrowserOriginWhitelist) {
        output.WriteRawTag(106);
        output.WriteString(InternalBrowserOriginWhitelist);
      }
      if (HasPolarTileMergingLevel) {
        output.WriteRawTag(112);
        output.WriteInt32(PolarTileMergingLevel);
      }
      if (HasJsBridgeRequestWhitelist) {
        output.WriteRawTag(122);
        output.WriteString(JsBridgeRequestWhitelist);
      }
      if (mapsOptions_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(MapsOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDisableDiskCache) {
        output.WriteRawTag(8);
        output.WriteBool(DisableDiskCache);
      }
      if (HasDisableEmbeddedBrowserVista) {
        output.WriteRawTag(16);
        output.WriteBool(DisableEmbeddedBrowserVista);
      }
      if (HasDrawAtmosphere) {
        output.WriteRawTag(24);
        output.WriteBool(DrawAtmosphere);
      }
      if (HasDrawStars) {
        output.WriteRawTag(32);
        output.WriteBool(DrawStars);
      }
      if (HasShaderFilePrefix) {
        output.WriteRawTag(42);
        output.WriteString(ShaderFilePrefix);
      }
      if (HasUseProtobufQuadtreePackets) {
        output.WriteRawTag(48);
        output.WriteBool(UseProtobufQuadtreePackets);
      }
      if (HasUseExtendedCopyrightIds) {
        output.WriteRawTag(56);
        output.WriteBool(UseExtendedCopyrightIds);
      }
      if (precipitationsOptions_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PrecipitationsOptions);
      }
      if (captureOptions_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CaptureOptions);
      }
      if (HasShow2DMapsIcon) {
        output.WriteRawTag(80);
        output.WriteBool(Show2DMapsIcon);
      }
      if (HasDisableInternalBrowser) {
        output.WriteRawTag(88);
        output.WriteBool(DisableInternalBrowser);
      }
      if (HasInternalBrowserBlacklist) {
        output.WriteRawTag(98);
        output.WriteString(InternalBrowserBlacklist);
      }
      if (HasInternalBrowserOriginWhitelist) {
        output.WriteRawTag(106);
        output.WriteString(InternalBrowserOriginWhitelist);
      }
      if (HasPolarTileMergingLevel) {
        output.WriteRawTag(112);
        output.WriteInt32(PolarTileMergingLevel);
      }
      if (HasJsBridgeRequestWhitelist) {
        output.WriteRawTag(122);
        output.WriteString(JsBridgeRequestWhitelist);
      }
      if (mapsOptions_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(MapsOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasDisableDiskCache) {
        size += 1 + 1;
      }
      if (HasDisableEmbeddedBrowserVista) {
        size += 1 + 1;
      }
      if (HasDrawAtmosphere) {
        size += 1 + 1;
      }
      if (HasDrawStars) {
        size += 1 + 1;
      }
      if (HasShaderFilePrefix) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShaderFilePrefix);
      }
      if (HasUseProtobufQuadtreePackets) {
        size += 1 + 1;
      }
      if (HasUseExtendedCopyrightIds) {
        size += 1 + 1;
      }
      if (precipitationsOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrecipitationsOptions);
      }
      if (captureOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CaptureOptions);
      }
      if (HasShow2DMapsIcon) {
        size += 1 + 1;
      }
      if (HasDisableInternalBrowser) {
        size += 1 + 1;
      }
      if (HasInternalBrowserBlacklist) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InternalBrowserBlacklist);
      }
      if (HasInternalBrowserOriginWhitelist) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InternalBrowserOriginWhitelist);
      }
      if (HasPolarTileMergingLevel) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PolarTileMergingLevel);
      }
      if (HasJsBridgeRequestWhitelist) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsBridgeRequestWhitelist);
      }
      if (mapsOptions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MapsOptions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ClientOptionsProto other) {
      if (other == null) {
        return;
      }
      if (other.HasDisableDiskCache) {
        DisableDiskCache = other.DisableDiskCache;
      }
      if (other.HasDisableEmbeddedBrowserVista) {
        DisableEmbeddedBrowserVista = other.DisableEmbeddedBrowserVista;
      }
      if (other.HasDrawAtmosphere) {
        DrawAtmosphere = other.DrawAtmosphere;
      }
      if (other.HasDrawStars) {
        DrawStars = other.DrawStars;
      }
      if (other.HasShaderFilePrefix) {
        ShaderFilePrefix = other.ShaderFilePrefix;
      }
      if (other.HasUseProtobufQuadtreePackets) {
        UseProtobufQuadtreePackets = other.UseProtobufQuadtreePackets;
      }
      if (other.HasUseExtendedCopyrightIds) {
        UseExtendedCopyrightIds = other.UseExtendedCopyrightIds;
      }
      if (other.precipitationsOptions_ != null) {
        if (precipitationsOptions_ == null) {
          PrecipitationsOptions = new global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions();
        }
        PrecipitationsOptions.MergeFrom(other.PrecipitationsOptions);
      }
      if (other.captureOptions_ != null) {
        if (captureOptions_ == null) {
          CaptureOptions = new global::Keyhole.Dbroot.ClientOptionsProto.Types.CaptureOptions();
        }
        CaptureOptions.MergeFrom(other.CaptureOptions);
      }
      if (other.HasShow2DMapsIcon) {
        Show2DMapsIcon = other.Show2DMapsIcon;
      }
      if (other.HasDisableInternalBrowser) {
        DisableInternalBrowser = other.DisableInternalBrowser;
      }
      if (other.HasInternalBrowserBlacklist) {
        InternalBrowserBlacklist = other.InternalBrowserBlacklist;
      }
      if (other.HasInternalBrowserOriginWhitelist) {
        InternalBrowserOriginWhitelist = other.InternalBrowserOriginWhitelist;
      }
      if (other.HasPolarTileMergingLevel) {
        PolarTileMergingLevel = other.PolarTileMergingLevel;
      }
      if (other.HasJsBridgeRequestWhitelist) {
        JsBridgeRequestWhitelist = other.JsBridgeRequestWhitelist;
      }
      if (other.mapsOptions_ != null) {
        if (mapsOptions_ == null) {
          MapsOptions = new global::Keyhole.Dbroot.ClientOptionsProto.Types.MapsOptions();
        }
        MapsOptions.MergeFrom(other.MapsOptions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DisableDiskCache = input.ReadBool();
            break;
          }
          case 16: {
            DisableEmbeddedBrowserVista = input.ReadBool();
            break;
          }
          case 24: {
            DrawAtmosphere = input.ReadBool();
            break;
          }
          case 32: {
            DrawStars = input.ReadBool();
            break;
          }
          case 42: {
            ShaderFilePrefix = input.ReadString();
            break;
          }
          case 48: {
            UseProtobufQuadtreePackets = input.ReadBool();
            break;
          }
          case 56: {
            UseExtendedCopyrightIds = input.ReadBool();
            break;
          }
          case 66: {
            if (precipitationsOptions_ == null) {
              PrecipitationsOptions = new global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions();
            }
            input.ReadMessage(PrecipitationsOptions);
            break;
          }
          case 74: {
            if (captureOptions_ == null) {
              CaptureOptions = new global::Keyhole.Dbroot.ClientOptionsProto.Types.CaptureOptions();
            }
            input.ReadMessage(CaptureOptions);
            break;
          }
          case 80: {
            Show2DMapsIcon = input.ReadBool();
            break;
          }
          case 88: {
            DisableInternalBrowser = input.ReadBool();
            break;
          }
          case 98: {
            InternalBrowserBlacklist = input.ReadString();
            break;
          }
          case 106: {
            InternalBrowserOriginWhitelist = input.ReadString();
            break;
          }
          case 112: {
            PolarTileMergingLevel = input.ReadInt32();
            break;
          }
          case 122: {
            JsBridgeRequestWhitelist = input.ReadString();
            break;
          }
          case 130: {
            if (mapsOptions_ == null) {
              MapsOptions = new global::Keyhole.Dbroot.ClientOptionsProto.Types.MapsOptions();
            }
            input.ReadMessage(MapsOptions);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DisableDiskCache = input.ReadBool();
            break;
          }
          case 16: {
            DisableEmbeddedBrowserVista = input.ReadBool();
            break;
          }
          case 24: {
            DrawAtmosphere = input.ReadBool();
            break;
          }
          case 32: {
            DrawStars = input.ReadBool();
            break;
          }
          case 42: {
            ShaderFilePrefix = input.ReadString();
            break;
          }
          case 48: {
            UseProtobufQuadtreePackets = input.ReadBool();
            break;
          }
          case 56: {
            UseExtendedCopyrightIds = input.ReadBool();
            break;
          }
          case 66: {
            if (precipitationsOptions_ == null) {
              PrecipitationsOptions = new global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions();
            }
            input.ReadMessage(PrecipitationsOptions);
            break;
          }
          case 74: {
            if (captureOptions_ == null) {
              CaptureOptions = new global::Keyhole.Dbroot.ClientOptionsProto.Types.CaptureOptions();
            }
            input.ReadMessage(CaptureOptions);
            break;
          }
          case 80: {
            Show2DMapsIcon = input.ReadBool();
            break;
          }
          case 88: {
            DisableInternalBrowser = input.ReadBool();
            break;
          }
          case 98: {
            InternalBrowserBlacklist = input.ReadString();
            break;
          }
          case 106: {
            InternalBrowserOriginWhitelist = input.ReadString();
            break;
          }
          case 112: {
            PolarTileMergingLevel = input.ReadInt32();
            break;
          }
          case 122: {
            JsBridgeRequestWhitelist = input.ReadString();
            break;
          }
          case 130: {
            if (mapsOptions_ == null) {
              MapsOptions = new global::Keyhole.Dbroot.ClientOptionsProto.Types.MapsOptions();
            }
            input.ReadMessage(MapsOptions);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ClientOptionsProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Nested message to control precipitation feature (rain and snow simulation)
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class PrecipitationsOptions : pb::IMessage<PrecipitationsOptions>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PrecipitationsOptions> _parser = new pb::MessageParser<PrecipitationsOptions>(() => new PrecipitationsOptions());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PrecipitationsOptions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Keyhole.Dbroot.ClientOptionsProto.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PrecipitationsOptions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PrecipitationsOptions(PrecipitationsOptions other) : this() {
          _hasBits0 = other._hasBits0;
          imageUrl_ = other.imageUrl_;
          imageExpireTime_ = other.imageExpireTime_;
          maxColorDistance_ = other.maxColorDistance_;
          imageLevel_ = other.imageLevel_;
          weatherMapping_ = other.weatherMapping_.Clone();
          cloudsLayerUrl_ = other.cloudsLayerUrl_;
          animationDecelerationDelay_ = other.animationDecelerationDelay_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PrecipitationsOptions Clone() {
          return new PrecipitationsOptions(this);
        }

        /// <summary>Field number for the "image_url" field.</summary>
        public const int ImageUrlFieldNumber = 1;
        private readonly static string ImageUrlDefaultValue = "";

        private string imageUrl_;
        /// <summary>
        /// URL for doppler images.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ImageUrl {
          get { return imageUrl_ ?? ImageUrlDefaultValue; }
          set {
            imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "image_url" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasImageUrl {
          get { return imageUrl_ != null; }
        }
        /// <summary>Clears the value of the "image_url" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearImageUrl() {
          imageUrl_ = null;
        }

        /// <summary>Field number for the "image_expire_time" field.</summary>
        public const int ImageExpireTimeFieldNumber = 2;
        private readonly static int ImageExpireTimeDefaultValue = 900;

        private int imageExpireTime_;
        /// <summary>
        /// Expiration time in seconds of doppler images.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int ImageExpireTime {
          get { if ((_hasBits0 & 1) != 0) { return imageExpireTime_; } else { return ImageExpireTimeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            imageExpireTime_ = value;
          }
        }
        /// <summary>Gets whether the "image_expire_time" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasImageExpireTime {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "image_expire_time" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearImageExpireTime() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "max_color_distance" field.</summary>
        public const int MaxColorDistanceFieldNumber = 3;
        private readonly static int MaxColorDistanceDefaultValue = 20;

        private int maxColorDistance_;
        /// <summary>
        /// Maximum squared distance threshold for choosing an element in the
        /// weather mapping.
        /// This is to account for small differences in the color tables from
        /// different areas (e.g. US vs. Europe). It also accounts for lossy
        /// compression artifacts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int MaxColorDistance {
          get { if ((_hasBits0 & 2) != 0) { return maxColorDistance_; } else { return MaxColorDistanceDefaultValue; } }
          set {
            _hasBits0 |= 2;
            maxColorDistance_ = value;
          }
        }
        /// <summary>Gets whether the "max_color_distance" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasMaxColorDistance {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "max_color_distance" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearMaxColorDistance() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "image_level" field.</summary>
        public const int ImageLevelFieldNumber = 4;
        private readonly static int ImageLevelDefaultValue = 5;

        private int imageLevel_;
        /// <summary>
        /// Quadtree (zero-indexed) image level to fetch.
        /// Image level 5 corresponds to 6-digit filenames (e.g. 010310.png).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int ImageLevel {
          get { if ((_hasBits0 & 4) != 0) { return imageLevel_; } else { return ImageLevelDefaultValue; } }
          set {
            _hasBits0 |= 4;
            imageLevel_ = value;
          }
        }
        /// <summary>Gets whether the "image_level" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasImageLevel {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "image_level" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearImageLevel() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "weather_mapping" field.</summary>
        public const int WeatherMappingFieldNumber = 5;
        private static readonly pb::FieldCodec<global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions.Types.WeatherMapping> _repeated_weatherMapping_codec
            = pb::FieldCodec.ForMessage(42, global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions.Types.WeatherMapping.Parser);
        private readonly pbc::RepeatedField<global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions.Types.WeatherMapping> weatherMapping_ = new pbc::RepeatedField<global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions.Types.WeatherMapping>();
        /// <summary>
        /// Maps weather map colors to rain/snow/fog/etc.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions.Types.WeatherMapping> WeatherMapping {
          get { return weatherMapping_; }
        }

        /// <summary>Field number for the "clouds_layer_url" field.</summary>
        public const int CloudsLayerUrlFieldNumber = 6;
        private readonly static string CloudsLayerUrlDefaultValue = "";

        private string cloudsLayerUrl_;
        /// <summary>
        /// Clouds layer URL. This is used to detect whether the clouds layer
        /// is enabled.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string CloudsLayerUrl {
          get { return cloudsLayerUrl_ ?? CloudsLayerUrlDefaultValue; }
          set {
            cloudsLayerUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "clouds_layer_url" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasCloudsLayerUrl {
          get { return cloudsLayerUrl_ != null; }
        }
        /// <summary>Clears the value of the "clouds_layer_url" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearCloudsLayerUrl() {
          cloudsLayerUrl_ = null;
        }

        /// <summary>Field number for the "animation_deceleration_delay" field.</summary>
        public const int AnimationDecelerationDelayFieldNumber = 7;
        private readonly static float AnimationDecelerationDelayDefaultValue = 20F;

        private float animationDecelerationDelay_;
        /// <summary>
        /// Delay in seconds before animation starts transitioning to a stop after
        /// any user os streaming activity.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float AnimationDecelerationDelay {
          get { if ((_hasBits0 & 8) != 0) { return animationDecelerationDelay_; } else { return AnimationDecelerationDelayDefaultValue; } }
          set {
            _hasBits0 |= 8;
            animationDecelerationDelay_ = value;
          }
        }
        /// <summary>Gets whether the "animation_deceleration_delay" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasAnimationDecelerationDelay {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "animation_deceleration_delay" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearAnimationDecelerationDelay() {
          _hasBits0 &= ~8;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PrecipitationsOptions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PrecipitationsOptions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ImageUrl != other.ImageUrl) return false;
          if (ImageExpireTime != other.ImageExpireTime) return false;
          if (MaxColorDistance != other.MaxColorDistance) return false;
          if (ImageLevel != other.ImageLevel) return false;
          if(!weatherMapping_.Equals(other.weatherMapping_)) return false;
          if (CloudsLayerUrl != other.CloudsLayerUrl) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AnimationDecelerationDelay, other.AnimationDecelerationDelay)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasImageUrl) hash ^= ImageUrl.GetHashCode();
          if (HasImageExpireTime) hash ^= ImageExpireTime.GetHashCode();
          if (HasMaxColorDistance) hash ^= MaxColorDistance.GetHashCode();
          if (HasImageLevel) hash ^= ImageLevel.GetHashCode();
          hash ^= weatherMapping_.GetHashCode();
          if (HasCloudsLayerUrl) hash ^= CloudsLayerUrl.GetHashCode();
          if (HasAnimationDecelerationDelay) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AnimationDecelerationDelay);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasImageUrl) {
            output.WriteRawTag(10);
            output.WriteString(ImageUrl);
          }
          if (HasImageExpireTime) {
            output.WriteRawTag(16);
            output.WriteInt32(ImageExpireTime);
          }
          if (HasMaxColorDistance) {
            output.WriteRawTag(24);
            output.WriteInt32(MaxColorDistance);
          }
          if (HasImageLevel) {
            output.WriteRawTag(32);
            output.WriteInt32(ImageLevel);
          }
          weatherMapping_.WriteTo(output, _repeated_weatherMapping_codec);
          if (HasCloudsLayerUrl) {
            output.WriteRawTag(50);
            output.WriteString(CloudsLayerUrl);
          }
          if (HasAnimationDecelerationDelay) {
            output.WriteRawTag(61);
            output.WriteFloat(AnimationDecelerationDelay);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasImageUrl) {
            output.WriteRawTag(10);
            output.WriteString(ImageUrl);
          }
          if (HasImageExpireTime) {
            output.WriteRawTag(16);
            output.WriteInt32(ImageExpireTime);
          }
          if (HasMaxColorDistance) {
            output.WriteRawTag(24);
            output.WriteInt32(MaxColorDistance);
          }
          if (HasImageLevel) {
            output.WriteRawTag(32);
            output.WriteInt32(ImageLevel);
          }
          weatherMapping_.WriteTo(ref output, _repeated_weatherMapping_codec);
          if (HasCloudsLayerUrl) {
            output.WriteRawTag(50);
            output.WriteString(CloudsLayerUrl);
          }
          if (HasAnimationDecelerationDelay) {
            output.WriteRawTag(61);
            output.WriteFloat(AnimationDecelerationDelay);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasImageUrl) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
          }
          if (HasImageExpireTime) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageExpireTime);
          }
          if (HasMaxColorDistance) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxColorDistance);
          }
          if (HasImageLevel) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageLevel);
          }
          size += weatherMapping_.CalculateSize(_repeated_weatherMapping_codec);
          if (HasCloudsLayerUrl) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CloudsLayerUrl);
          }
          if (HasAnimationDecelerationDelay) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PrecipitationsOptions other) {
          if (other == null) {
            return;
          }
          if (other.HasImageUrl) {
            ImageUrl = other.ImageUrl;
          }
          if (other.HasImageExpireTime) {
            ImageExpireTime = other.ImageExpireTime;
          }
          if (other.HasMaxColorDistance) {
            MaxColorDistance = other.MaxColorDistance;
          }
          if (other.HasImageLevel) {
            ImageLevel = other.ImageLevel;
          }
          weatherMapping_.Add(other.weatherMapping_);
          if (other.HasCloudsLayerUrl) {
            CloudsLayerUrl = other.CloudsLayerUrl;
          }
          if (other.HasAnimationDecelerationDelay) {
            AnimationDecelerationDelay = other.AnimationDecelerationDelay;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ImageUrl = input.ReadString();
                break;
              }
              case 16: {
                ImageExpireTime = input.ReadInt32();
                break;
              }
              case 24: {
                MaxColorDistance = input.ReadInt32();
                break;
              }
              case 32: {
                ImageLevel = input.ReadInt32();
                break;
              }
              case 42: {
                weatherMapping_.AddEntriesFrom(input, _repeated_weatherMapping_codec);
                break;
              }
              case 50: {
                CloudsLayerUrl = input.ReadString();
                break;
              }
              case 61: {
                AnimationDecelerationDelay = input.ReadFloat();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                ImageUrl = input.ReadString();
                break;
              }
              case 16: {
                ImageExpireTime = input.ReadInt32();
                break;
              }
              case 24: {
                MaxColorDistance = input.ReadInt32();
                break;
              }
              case 32: {
                ImageLevel = input.ReadInt32();
                break;
              }
              case 42: {
                weatherMapping_.AddEntriesFrom(ref input, _repeated_weatherMapping_codec);
                break;
              }
              case 50: {
                CloudsLayerUrl = input.ReadString();
                break;
              }
              case 61: {
                AnimationDecelerationDelay = input.ReadFloat();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the PrecipitationsOptions message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          /// <summary>
          /// Describes an entry in the list that maps weather image colors
          /// to rain/snow/fog/etc.
          /// </summary>
          [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
          public sealed partial class WeatherMapping : pb::IMessage<WeatherMapping>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<WeatherMapping> _parser = new pb::MessageParser<WeatherMapping>(() => new WeatherMapping());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<WeatherMapping> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public WeatherMapping() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public WeatherMapping(WeatherMapping other) : this() {
              _hasBits0 = other._hasBits0;
              colorAbgr_ = other.colorAbgr_;
              weatherType_ = other.weatherType_;
              elongation_ = other.elongation_;
              opacity_ = other.opacity_;
              fogDensity_ = other.fogDensity_;
              speed0_ = other.speed0_;
              speed1_ = other.speed1_;
              speed2_ = other.speed2_;
              speed3_ = other.speed3_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public WeatherMapping Clone() {
              return new WeatherMapping(this);
            }

            /// <summary>Field number for the "color_abgr" field.</summary>
            public const int ColorAbgrFieldNumber = 1;
            private readonly static uint ColorAbgrDefaultValue = 0;

            private uint colorAbgr_;
            /// <summary>
            /// Color that may be found in weather images.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public uint ColorAbgr {
              get { if ((_hasBits0 & 1) != 0) { return colorAbgr_; } else { return ColorAbgrDefaultValue; } }
              set {
                _hasBits0 |= 1;
                colorAbgr_ = value;
              }
            }
            /// <summary>Gets whether the "color_abgr" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasColorAbgr {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "color_abgr" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearColorAbgr() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "weather_type" field.</summary>
            public const int WeatherTypeFieldNumber = 2;
            private readonly static global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions.Types.WeatherMapping.Types.WeatherType WeatherTypeDefaultValue = global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions.Types.WeatherMapping.Types.WeatherType.NoPrecipitation;

            private global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions.Types.WeatherMapping.Types.WeatherType weatherType_;
            /// <summary>
            /// No precipitation, raining, or snowing.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions.Types.WeatherMapping.Types.WeatherType WeatherType {
              get { if ((_hasBits0 & 2) != 0) { return weatherType_; } else { return WeatherTypeDefaultValue; } }
              set {
                _hasBits0 |= 2;
                weatherType_ = value;
              }
            }
            /// <summary>Gets whether the "weather_type" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasWeatherType {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "weather_type" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearWeatherType() {
              _hasBits0 &= ~2;
            }

            /// <summary>Field number for the "elongation" field.</summary>
            public const int ElongationFieldNumber = 3;
            private readonly static float ElongationDefaultValue = 1F;

            private float elongation_;
            /// <summary>
            /// How much stretch or compress the rain/snow texture. Smaller
            /// (positive) values correspond to longer precipitation.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public float Elongation {
              get { if ((_hasBits0 & 4) != 0) { return elongation_; } else { return ElongationDefaultValue; } }
              set {
                _hasBits0 |= 4;
                elongation_ = value;
              }
            }
            /// <summary>Gets whether the "elongation" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasElongation {
              get { return (_hasBits0 & 4) != 0; }
            }
            /// <summary>Clears the value of the "elongation" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearElongation() {
              _hasBits0 &= ~4;
            }

            /// <summary>Field number for the "opacity" field.</summary>
            public const int OpacityFieldNumber = 4;
            private readonly static float OpacityDefaultValue = 0F;

            private float opacity_;
            /// <summary>
            /// Texture's opacity.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public float Opacity {
              get { if ((_hasBits0 & 8) != 0) { return opacity_; } else { return OpacityDefaultValue; } }
              set {
                _hasBits0 |= 8;
                opacity_ = value;
              }
            }
            /// <summary>Gets whether the "opacity" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasOpacity {
              get { return (_hasBits0 & 8) != 0; }
            }
            /// <summary>Clears the value of the "opacity" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearOpacity() {
              _hasBits0 &= ~8;
            }

            /// <summary>Field number for the "fog_density" field.</summary>
            public const int FogDensityFieldNumber = 5;
            private readonly static float FogDensityDefaultValue = 0F;

            private float fogDensity_;
            /// <summary>
            /// Fog's density used in exp2 fog equation.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public float FogDensity {
              get { if ((_hasBits0 & 16) != 0) { return fogDensity_; } else { return FogDensityDefaultValue; } }
              set {
                _hasBits0 |= 16;
                fogDensity_ = value;
              }
            }
            /// <summary>Gets whether the "fog_density" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasFogDensity {
              get { return (_hasBits0 & 16) != 0; }
            }
            /// <summary>Clears the value of the "fog_density" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearFogDensity() {
              _hasBits0 &= ~16;
            }

            /// <summary>Field number for the "speed0" field.</summary>
            public const int Speed0FieldNumber = 6;
            private readonly static float Speed0DefaultValue = 0F;

            private float speed0_;
            /// <summary>
            /// Speed for front-most texture layer.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public float Speed0 {
              get { if ((_hasBits0 & 32) != 0) { return speed0_; } else { return Speed0DefaultValue; } }
              set {
                _hasBits0 |= 32;
                speed0_ = value;
              }
            }
            /// <summary>Gets whether the "speed0" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasSpeed0 {
              get { return (_hasBits0 & 32) != 0; }
            }
            /// <summary>Clears the value of the "speed0" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearSpeed0() {
              _hasBits0 &= ~32;
            }

            /// <summary>Field number for the "speed1" field.</summary>
            public const int Speed1FieldNumber = 7;
            private readonly static float Speed1DefaultValue = 0F;

            private float speed1_;
            /// <summary>
            /// Speed for second texture layer.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public float Speed1 {
              get { if ((_hasBits0 & 64) != 0) { return speed1_; } else { return Speed1DefaultValue; } }
              set {
                _hasBits0 |= 64;
                speed1_ = value;
              }
            }
            /// <summary>Gets whether the "speed1" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasSpeed1 {
              get { return (_hasBits0 & 64) != 0; }
            }
            /// <summary>Clears the value of the "speed1" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearSpeed1() {
              _hasBits0 &= ~64;
            }

            /// <summary>Field number for the "speed2" field.</summary>
            public const int Speed2FieldNumber = 8;
            private readonly static float Speed2DefaultValue = 0F;

            private float speed2_;
            /// <summary>
            /// Speed for third texture layer.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public float Speed2 {
              get { if ((_hasBits0 & 128) != 0) { return speed2_; } else { return Speed2DefaultValue; } }
              set {
                _hasBits0 |= 128;
                speed2_ = value;
              }
            }
            /// <summary>Gets whether the "speed2" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasSpeed2 {
              get { return (_hasBits0 & 128) != 0; }
            }
            /// <summary>Clears the value of the "speed2" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearSpeed2() {
              _hasBits0 &= ~128;
            }

            /// <summary>Field number for the "speed3" field.</summary>
            public const int Speed3FieldNumber = 9;
            private readonly static float Speed3DefaultValue = 0F;

            private float speed3_;
            /// <summary>
            /// Speed for back-most texture layer.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public float Speed3 {
              get { if ((_hasBits0 & 256) != 0) { return speed3_; } else { return Speed3DefaultValue; } }
              set {
                _hasBits0 |= 256;
                speed3_ = value;
              }
            }
            /// <summary>Gets whether the "speed3" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasSpeed3 {
              get { return (_hasBits0 & 256) != 0; }
            }
            /// <summary>Clears the value of the "speed3" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearSpeed3() {
              _hasBits0 &= ~256;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as WeatherMapping);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(WeatherMapping other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ColorAbgr != other.ColorAbgr) return false;
              if (WeatherType != other.WeatherType) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Elongation, other.Elongation)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Opacity, other.Opacity)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FogDensity, other.FogDensity)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed0, other.Speed0)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed1, other.Speed1)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed2, other.Speed2)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed3, other.Speed3)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              if (HasColorAbgr) hash ^= ColorAbgr.GetHashCode();
              if (HasWeatherType) hash ^= WeatherType.GetHashCode();
              if (HasElongation) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Elongation);
              if (HasOpacity) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Opacity);
              if (HasFogDensity) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FogDensity);
              if (HasSpeed0) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed0);
              if (HasSpeed1) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed1);
              if (HasSpeed2) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed2);
              if (HasSpeed3) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed3);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasColorAbgr) {
                output.WriteRawTag(8);
                output.WriteUInt32(ColorAbgr);
              }
              if (HasWeatherType) {
                output.WriteRawTag(16);
                output.WriteEnum((int) WeatherType);
              }
              if (HasElongation) {
                output.WriteRawTag(29);
                output.WriteFloat(Elongation);
              }
              if (HasOpacity) {
                output.WriteRawTag(37);
                output.WriteFloat(Opacity);
              }
              if (HasFogDensity) {
                output.WriteRawTag(45);
                output.WriteFloat(FogDensity);
              }
              if (HasSpeed0) {
                output.WriteRawTag(53);
                output.WriteFloat(Speed0);
              }
              if (HasSpeed1) {
                output.WriteRawTag(61);
                output.WriteFloat(Speed1);
              }
              if (HasSpeed2) {
                output.WriteRawTag(69);
                output.WriteFloat(Speed2);
              }
              if (HasSpeed3) {
                output.WriteRawTag(77);
                output.WriteFloat(Speed3);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasColorAbgr) {
                output.WriteRawTag(8);
                output.WriteUInt32(ColorAbgr);
              }
              if (HasWeatherType) {
                output.WriteRawTag(16);
                output.WriteEnum((int) WeatherType);
              }
              if (HasElongation) {
                output.WriteRawTag(29);
                output.WriteFloat(Elongation);
              }
              if (HasOpacity) {
                output.WriteRawTag(37);
                output.WriteFloat(Opacity);
              }
              if (HasFogDensity) {
                output.WriteRawTag(45);
                output.WriteFloat(FogDensity);
              }
              if (HasSpeed0) {
                output.WriteRawTag(53);
                output.WriteFloat(Speed0);
              }
              if (HasSpeed1) {
                output.WriteRawTag(61);
                output.WriteFloat(Speed1);
              }
              if (HasSpeed2) {
                output.WriteRawTag(69);
                output.WriteFloat(Speed2);
              }
              if (HasSpeed3) {
                output.WriteRawTag(77);
                output.WriteFloat(Speed3);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              if (HasColorAbgr) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ColorAbgr);
              }
              if (HasWeatherType) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WeatherType);
              }
              if (HasElongation) {
                size += 1 + 4;
              }
              if (HasOpacity) {
                size += 1 + 4;
              }
              if (HasFogDensity) {
                size += 1 + 4;
              }
              if (HasSpeed0) {
                size += 1 + 4;
              }
              if (HasSpeed1) {
                size += 1 + 4;
              }
              if (HasSpeed2) {
                size += 1 + 4;
              }
              if (HasSpeed3) {
                size += 1 + 4;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(WeatherMapping other) {
              if (other == null) {
                return;
              }
              if (other.HasColorAbgr) {
                ColorAbgr = other.ColorAbgr;
              }
              if (other.HasWeatherType) {
                WeatherType = other.WeatherType;
              }
              if (other.HasElongation) {
                Elongation = other.Elongation;
              }
              if (other.HasOpacity) {
                Opacity = other.Opacity;
              }
              if (other.HasFogDensity) {
                FogDensity = other.FogDensity;
              }
              if (other.HasSpeed0) {
                Speed0 = other.Speed0;
              }
              if (other.HasSpeed1) {
                Speed1 = other.Speed1;
              }
              if (other.HasSpeed2) {
                Speed2 = other.Speed2;
              }
              if (other.HasSpeed3) {
                Speed3 = other.Speed3;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
              if ((tag & 7) == 4) {
                // Abort on any end group tag.
                return;
              }
              switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    ColorAbgr = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    WeatherType = (global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions.Types.WeatherMapping.Types.WeatherType) input.ReadEnum();
                    break;
                  }
                  case 29: {
                    Elongation = input.ReadFloat();
                    break;
                  }
                  case 37: {
                    Opacity = input.ReadFloat();
                    break;
                  }
                  case 45: {
                    FogDensity = input.ReadFloat();
                    break;
                  }
                  case 53: {
                    Speed0 = input.ReadFloat();
                    break;
                  }
                  case 61: {
                    Speed1 = input.ReadFloat();
                    break;
                  }
                  case 69: {
                    Speed2 = input.ReadFloat();
                    break;
                  }
                  case 77: {
                    Speed3 = input.ReadFloat();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
              if ((tag & 7) == 4) {
                // Abort on any end group tag.
                return;
              }
              switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    ColorAbgr = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    WeatherType = (global::Keyhole.Dbroot.ClientOptionsProto.Types.PrecipitationsOptions.Types.WeatherMapping.Types.WeatherType) input.ReadEnum();
                    break;
                  }
                  case 29: {
                    Elongation = input.ReadFloat();
                    break;
                  }
                  case 37: {
                    Opacity = input.ReadFloat();
                    break;
                  }
                  case 45: {
                    FogDensity = input.ReadFloat();
                    break;
                  }
                  case 53: {
                    Speed0 = input.ReadFloat();
                    break;
                  }
                  case 61: {
                    Speed1 = input.ReadFloat();
                    break;
                  }
                  case 69: {
                    Speed2 = input.ReadFloat();
                    break;
                  }
                  case 77: {
                    Speed3 = input.ReadFloat();
                    break;
                  }
                }
              }
            }
            #endif

            #region Nested types
            /// <summary>Container for nested types declared in the WeatherMapping message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static partial class Types {
              public enum WeatherType {
                [pbr::OriginalName("NO_PRECIPITATION")] NoPrecipitation = 0,
                [pbr::OriginalName("RAIN")] Rain = 1,
                [pbr::OriginalName("SNOW")] Snow = 2,
              }

            }
            #endregion

          }

        }
        #endregion

      }

      /// <summary>
      /// Nested message to control printing / image saving capability on main
      /// database. The default values match the client's default values in all
      /// versions up to the 5.0.1 maintenance release.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class CaptureOptions : pb::IMessage<CaptureOptions>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CaptureOptions> _parser = new pb::MessageParser<CaptureOptions>(() => new CaptureOptions());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<CaptureOptions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Keyhole.Dbroot.ClientOptionsProto.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CaptureOptions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CaptureOptions(CaptureOptions other) : this() {
          _hasBits0 = other._hasBits0;
          allowSaveAsImage_ = other.allowSaveAsImage_;
          maxFreeCaptureRes_ = other.maxFreeCaptureRes_;
          maxPremiumCaptureRes_ = other.maxPremiumCaptureRes_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CaptureOptions Clone() {
          return new CaptureOptions(this);
        }

        /// <summary>Field number for the "allow_save_as_image" field.</summary>
        public const int AllowSaveAsImageFieldNumber = 1;
        private readonly static bool AllowSaveAsImageDefaultValue = true;

        private bool allowSaveAsImage_;
        /// <summary>
        /// Can enable or disable saving a screenshot as a JPG image.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool AllowSaveAsImage {
          get { if ((_hasBits0 & 1) != 0) { return allowSaveAsImage_; } else { return AllowSaveAsImageDefaultValue; } }
          set {
            _hasBits0 |= 1;
            allowSaveAsImage_ = value;
          }
        }
        /// <summary>Gets whether the "allow_save_as_image" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasAllowSaveAsImage {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "allow_save_as_image" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearAllowSaveAsImage() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "max_free_capture_res" field.</summary>
        public const int MaxFreeCaptureResFieldNumber = 2;
        private readonly static int MaxFreeCaptureResDefaultValue = 2400;

        private int maxFreeCaptureRes_;
        /// <summary>
        /// Specifies the maximum capture resolution (in largest dimension) in the
        /// free client. The best image that can be captured will be
        /// max_free_capture_res * max_free_capture_res.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int MaxFreeCaptureRes {
          get { if ((_hasBits0 & 2) != 0) { return maxFreeCaptureRes_; } else { return MaxFreeCaptureResDefaultValue; } }
          set {
            _hasBits0 |= 2;
            maxFreeCaptureRes_ = value;
          }
        }
        /// <summary>Gets whether the "max_free_capture_res" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasMaxFreeCaptureRes {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "max_free_capture_res" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearMaxFreeCaptureRes() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "max_premium_capture_res" field.</summary>
        public const int MaxPremiumCaptureResFieldNumber = 3;
        private readonly static int MaxPremiumCaptureResDefaultValue = 4800;

        private int maxPremiumCaptureRes_;
        /// <summary>
        /// Similar max limit for Pro/EC clients for premium printing. This limit
        /// should be higher than the max free capture resolution for obvious
        /// reasons.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int MaxPremiumCaptureRes {
          get { if ((_hasBits0 & 4) != 0) { return maxPremiumCaptureRes_; } else { return MaxPremiumCaptureResDefaultValue; } }
          set {
            _hasBits0 |= 4;
            maxPremiumCaptureRes_ = value;
          }
        }
        /// <summary>Gets whether the "max_premium_capture_res" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasMaxPremiumCaptureRes {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "max_premium_capture_res" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearMaxPremiumCaptureRes() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as CaptureOptions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(CaptureOptions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AllowSaveAsImage != other.AllowSaveAsImage) return false;
          if (MaxFreeCaptureRes != other.MaxFreeCaptureRes) return false;
          if (MaxPremiumCaptureRes != other.MaxPremiumCaptureRes) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAllowSaveAsImage) hash ^= AllowSaveAsImage.GetHashCode();
          if (HasMaxFreeCaptureRes) hash ^= MaxFreeCaptureRes.GetHashCode();
          if (HasMaxPremiumCaptureRes) hash ^= MaxPremiumCaptureRes.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAllowSaveAsImage) {
            output.WriteRawTag(8);
            output.WriteBool(AllowSaveAsImage);
          }
          if (HasMaxFreeCaptureRes) {
            output.WriteRawTag(16);
            output.WriteInt32(MaxFreeCaptureRes);
          }
          if (HasMaxPremiumCaptureRes) {
            output.WriteRawTag(24);
            output.WriteInt32(MaxPremiumCaptureRes);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAllowSaveAsImage) {
            output.WriteRawTag(8);
            output.WriteBool(AllowSaveAsImage);
          }
          if (HasMaxFreeCaptureRes) {
            output.WriteRawTag(16);
            output.WriteInt32(MaxFreeCaptureRes);
          }
          if (HasMaxPremiumCaptureRes) {
            output.WriteRawTag(24);
            output.WriteInt32(MaxPremiumCaptureRes);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasAllowSaveAsImage) {
            size += 1 + 1;
          }
          if (HasMaxFreeCaptureRes) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFreeCaptureRes);
          }
          if (HasMaxPremiumCaptureRes) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPremiumCaptureRes);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(CaptureOptions other) {
          if (other == null) {
            return;
          }
          if (other.HasAllowSaveAsImage) {
            AllowSaveAsImage = other.AllowSaveAsImage;
          }
          if (other.HasMaxFreeCaptureRes) {
            MaxFreeCaptureRes = other.MaxFreeCaptureRes;
          }
          if (other.HasMaxPremiumCaptureRes) {
            MaxPremiumCaptureRes = other.MaxPremiumCaptureRes;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AllowSaveAsImage = input.ReadBool();
                break;
              }
              case 16: {
                MaxFreeCaptureRes = input.ReadInt32();
                break;
              }
              case 24: {
                MaxPremiumCaptureRes = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AllowSaveAsImage = input.ReadBool();
                break;
              }
              case 16: {
                MaxFreeCaptureRes = input.ReadInt32();
                break;
              }
              case 24: {
                MaxPremiumCaptureRes = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Message with Maps documents options.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class MapsOptions : pb::IMessage<MapsOptions>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MapsOptions> _parser = new pb::MessageParser<MapsOptions>(() => new MapsOptions());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<MapsOptions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Keyhole.Dbroot.ClientOptionsProto.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public MapsOptions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public MapsOptions(MapsOptions other) : this() {
          _hasBits0 = other._hasBits0;
          enableMaps_ = other.enableMaps_;
          docsAutoDownloadEnabled_ = other.docsAutoDownloadEnabled_;
          docsAutoDownloadInterval_ = other.docsAutoDownloadInterval_;
          docsAutoUploadEnabled_ = other.docsAutoUploadEnabled_;
          docsAutoUploadDelay_ = other.docsAutoUploadDelay_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public MapsOptions Clone() {
          return new MapsOptions(this);
        }

        /// <summary>Field number for the "enable_maps" field.</summary>
        public const int EnableMapsFieldNumber = 1;
        private readonly static bool EnableMapsDefaultValue = false;

        private bool enableMaps_;
        /// <summary>
        /// Whether to use maps library for managing documents.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool EnableMaps {
          get { if ((_hasBits0 & 1) != 0) { return enableMaps_; } else { return EnableMapsDefaultValue; } }
          set {
            _hasBits0 |= 1;
            enableMaps_ = value;
          }
        }
        /// <summary>Gets whether the "enable_maps" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasEnableMaps {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "enable_maps" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearEnableMaps() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "docs_auto_download_enabled" field.</summary>
        public const int DocsAutoDownloadEnabledFieldNumber = 2;
        private readonly static bool DocsAutoDownloadEnabledDefaultValue = false;

        private bool docsAutoDownloadEnabled_;
        /// <summary>
        /// Whether to enable auto download for polling docs server for feed and
        /// maps changes.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool DocsAutoDownloadEnabled {
          get { if ((_hasBits0 & 2) != 0) { return docsAutoDownloadEnabled_; } else { return DocsAutoDownloadEnabledDefaultValue; } }
          set {
            _hasBits0 |= 2;
            docsAutoDownloadEnabled_ = value;
          }
        }
        /// <summary>Gets whether the "docs_auto_download_enabled" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasDocsAutoDownloadEnabled {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "docs_auto_download_enabled" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearDocsAutoDownloadEnabled() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "docs_auto_download_interval" field.</summary>
        public const int DocsAutoDownloadIntervalFieldNumber = 3;
        private readonly static int DocsAutoDownloadIntervalDefaultValue = 0;

        private int docsAutoDownloadInterval_;
        /// <summary>
        /// Interval in milliseconds of how often to poll docs server for feed and
        /// maps changes. Depends on docs_auto_download_enabled.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int DocsAutoDownloadInterval {
          get { if ((_hasBits0 & 4) != 0) { return docsAutoDownloadInterval_; } else { return DocsAutoDownloadIntervalDefaultValue; } }
          set {
            _hasBits0 |= 4;
            docsAutoDownloadInterval_ = value;
          }
        }
        /// <summary>Gets whether the "docs_auto_download_interval" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasDocsAutoDownloadInterval {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "docs_auto_download_interval" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearDocsAutoDownloadInterval() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "docs_auto_upload_enabled" field.</summary>
        public const int DocsAutoUploadEnabledFieldNumber = 4;
        private readonly static bool DocsAutoUploadEnabledDefaultValue = false;

        private bool docsAutoUploadEnabled_;
        /// <summary>
        /// Whether to enable auto uploads for new or modified maps.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool DocsAutoUploadEnabled {
          get { if ((_hasBits0 & 8) != 0) { return docsAutoUploadEnabled_; } else { return DocsAutoUploadEnabledDefaultValue; } }
          set {
            _hasBits0 |= 8;
            docsAutoUploadEnabled_ = value;
          }
        }
        /// <summary>Gets whether the "docs_auto_upload_enabled" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasDocsAutoUploadEnabled {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "docs_auto_upload_enabled" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearDocsAutoUploadEnabled() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "docs_auto_upload_delay" field.</summary>
        public const int DocsAutoUploadDelayFieldNumber = 5;
        private readonly static int DocsAutoUploadDelayDefaultValue = 0;

        private int docsAutoUploadDelay_;
        /// <summary>
        /// Delay in milliseconds of how long to wait before uploading local
        /// changes to docs maps. Depends on docs_upload_enabled.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int DocsAutoUploadDelay {
          get { if ((_hasBits0 & 16) != 0) { return docsAutoUploadDelay_; } else { return DocsAutoUploadDelayDefaultValue; } }
          set {
            _hasBits0 |= 16;
            docsAutoUploadDelay_ = value;
          }
        }
        /// <summary>Gets whether the "docs_auto_upload_delay" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasDocsAutoUploadDelay {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "docs_auto_upload_delay" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearDocsAutoUploadDelay() {
          _hasBits0 &= ~16;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as MapsOptions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(MapsOptions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EnableMaps != other.EnableMaps) return false;
          if (DocsAutoDownloadEnabled != other.DocsAutoDownloadEnabled) return false;
          if (DocsAutoDownloadInterval != other.DocsAutoDownloadInterval) return false;
          if (DocsAutoUploadEnabled != other.DocsAutoUploadEnabled) return false;
          if (DocsAutoUploadDelay != other.DocsAutoUploadDelay) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasEnableMaps) hash ^= EnableMaps.GetHashCode();
          if (HasDocsAutoDownloadEnabled) hash ^= DocsAutoDownloadEnabled.GetHashCode();
          if (HasDocsAutoDownloadInterval) hash ^= DocsAutoDownloadInterval.GetHashCode();
          if (HasDocsAutoUploadEnabled) hash ^= DocsAutoUploadEnabled.GetHashCode();
          if (HasDocsAutoUploadDelay) hash ^= DocsAutoUploadDelay.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasEnableMaps) {
            output.WriteRawTag(8);
            output.WriteBool(EnableMaps);
          }
          if (HasDocsAutoDownloadEnabled) {
            output.WriteRawTag(16);
            output.WriteBool(DocsAutoDownloadEnabled);
          }
          if (HasDocsAutoDownloadInterval) {
            output.WriteRawTag(24);
            output.WriteInt32(DocsAutoDownloadInterval);
          }
          if (HasDocsAutoUploadEnabled) {
            output.WriteRawTag(32);
            output.WriteBool(DocsAutoUploadEnabled);
          }
          if (HasDocsAutoUploadDelay) {
            output.WriteRawTag(40);
            output.WriteInt32(DocsAutoUploadDelay);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasEnableMaps) {
            output.WriteRawTag(8);
            output.WriteBool(EnableMaps);
          }
          if (HasDocsAutoDownloadEnabled) {
            output.WriteRawTag(16);
            output.WriteBool(DocsAutoDownloadEnabled);
          }
          if (HasDocsAutoDownloadInterval) {
            output.WriteRawTag(24);
            output.WriteInt32(DocsAutoDownloadInterval);
          }
          if (HasDocsAutoUploadEnabled) {
            output.WriteRawTag(32);
            output.WriteBool(DocsAutoUploadEnabled);
          }
          if (HasDocsAutoUploadDelay) {
            output.WriteRawTag(40);
            output.WriteInt32(DocsAutoUploadDelay);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasEnableMaps) {
            size += 1 + 1;
          }
          if (HasDocsAutoDownloadEnabled) {
            size += 1 + 1;
          }
          if (HasDocsAutoDownloadInterval) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DocsAutoDownloadInterval);
          }
          if (HasDocsAutoUploadEnabled) {
            size += 1 + 1;
          }
          if (HasDocsAutoUploadDelay) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DocsAutoUploadDelay);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(MapsOptions other) {
          if (other == null) {
            return;
          }
          if (other.HasEnableMaps) {
            EnableMaps = other.EnableMaps;
          }
          if (other.HasDocsAutoDownloadEnabled) {
            DocsAutoDownloadEnabled = other.DocsAutoDownloadEnabled;
          }
          if (other.HasDocsAutoDownloadInterval) {
            DocsAutoDownloadInterval = other.DocsAutoDownloadInterval;
          }
          if (other.HasDocsAutoUploadEnabled) {
            DocsAutoUploadEnabled = other.DocsAutoUploadEnabled;
          }
          if (other.HasDocsAutoUploadDelay) {
            DocsAutoUploadDelay = other.DocsAutoUploadDelay;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                EnableMaps = input.ReadBool();
                break;
              }
              case 16: {
                DocsAutoDownloadEnabled = input.ReadBool();
                break;
              }
              case 24: {
                DocsAutoDownloadInterval = input.ReadInt32();
                break;
              }
              case 32: {
                DocsAutoUploadEnabled = input.ReadBool();
                break;
              }
              case 40: {
                DocsAutoUploadDelay = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                EnableMaps = input.ReadBool();
                break;
              }
              case 16: {
                DocsAutoDownloadEnabled = input.ReadBool();
                break;
              }
              case 24: {
                DocsAutoDownloadInterval = input.ReadInt32();
                break;
              }
              case 32: {
                DocsAutoUploadEnabled = input.ReadBool();
                break;
              }
              case 40: {
                DocsAutoUploadDelay = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Settings that affect how data can be fetched and throttled for this database.
  /// Next available id: 16
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FetchingOptionsProto : pb::IMessage<FetchingOptionsProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FetchingOptionsProto> _parser = new pb::MessageParser<FetchingOptionsProto>(() => new FetchingOptionsProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FetchingOptionsProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FetchingOptionsProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FetchingOptionsProto(FetchingOptionsProto other) : this() {
      _hasBits0 = other._hasBits0;
      maxRequestsPerQuery_ = other.maxRequestsPerQuery_;
      forceMaxRequestsPerQuery_ = other.forceMaxRequestsPerQuery_;
      sortBatches_ = other.sortBatches_;
      maxDrawable_ = other.maxDrawable_;
      maxImagery_ = other.maxImagery_;
      maxTerrain_ = other.maxTerrain_;
      maxQuadtree_ = other.maxQuadtree_;
      maxDioramaMetadata_ = other.maxDioramaMetadata_;
      maxDioramaData_ = other.maxDioramaData_;
      maxConsumerFetchRatio_ = other.maxConsumerFetchRatio_;
      maxProEcFetchRatio_ = other.maxProEcFetchRatio_;
      safeOverallQps_ = other.safeOverallQps_;
      safeImageryQps_ = other.safeImageryQps_;
      domainsForHttps_ = other.domainsForHttps_;
      hostsForHttp_ = other.hostsForHttp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FetchingOptionsProto Clone() {
      return new FetchingOptionsProto(this);
    }

    /// <summary>Field number for the "max_requests_per_query" field.</summary>
    public const int MaxRequestsPerQueryFieldNumber = 1;
    private readonly static int MaxRequestsPerQueryDefaultValue = 1;

    private int maxRequestsPerQuery_;
    /// <summary>
    /// Maximum number of nodes that can be asked for in a single request. If set
    /// to 1, clients will issue one request per node. Larger values allow clients
    /// to group requests together. This value impacts all the other
    /// batching-related options.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxRequestsPerQuery {
      get { if ((_hasBits0 & 1) != 0) { return maxRequestsPerQuery_; } else { return MaxRequestsPerQueryDefaultValue; } }
      set {
        _hasBits0 |= 1;
        maxRequestsPerQuery_ = value;
      }
    }
    /// <summary>Gets whether the "max_requests_per_query" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxRequestsPerQuery {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "max_requests_per_query" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxRequestsPerQuery() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "force_max_requests_per_query" field.</summary>
    public const int ForceMaxRequestsPerQueryFieldNumber = 12;
    private readonly static bool ForceMaxRequestsPerQueryDefaultValue = false;

    private bool forceMaxRequestsPerQuery_;
    /// <summary>
    /// We allow the user to specify Connection/avoidRequestBatching
    /// in drivers.ini.  If force_max_requests_per_query is true,
    /// we ignore the user setting and use max_requests_per_query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForceMaxRequestsPerQuery {
      get { if ((_hasBits0 & 2048) != 0) { return forceMaxRequestsPerQuery_; } else { return ForceMaxRequestsPerQueryDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        forceMaxRequestsPerQuery_ = value;
      }
    }
    /// <summary>Gets whether the "force_max_requests_per_query" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForceMaxRequestsPerQuery {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "force_max_requests_per_query" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForceMaxRequestsPerQuery() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "sort_batches" field.</summary>
    public const int SortBatchesFieldNumber = 13;
    private readonly static bool SortBatchesDefaultValue = false;

    private bool sortBatches_;
    /// <summary>
    /// Whether the client should sort requests before grouping requests together.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SortBatches {
      get { if ((_hasBits0 & 4096) != 0) { return sortBatches_; } else { return SortBatchesDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        sortBatches_ = value;
      }
    }
    /// <summary>Gets whether the "sort_batches" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSortBatches {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "sort_batches" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSortBatches() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "max_drawable" field.</summary>
    public const int MaxDrawableFieldNumber = 2;
    private readonly static int MaxDrawableDefaultValue = 2;

    private int maxDrawable_;
    /// <summary>
    /// Maximum number of drawable packets per request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxDrawable {
      get { if ((_hasBits0 & 2) != 0) { return maxDrawable_; } else { return MaxDrawableDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxDrawable_ = value;
      }
    }
    /// <summary>Gets whether the "max_drawable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxDrawable {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_drawable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxDrawable() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "max_imagery" field.</summary>
    public const int MaxImageryFieldNumber = 3;
    private readonly static int MaxImageryDefaultValue = 2;

    private int maxImagery_;
    /// <summary>
    /// Maximum number of imagery packets per request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxImagery {
      get { if ((_hasBits0 & 4) != 0) { return maxImagery_; } else { return MaxImageryDefaultValue; } }
      set {
        _hasBits0 |= 4;
        maxImagery_ = value;
      }
    }
    /// <summary>Gets whether the "max_imagery" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxImagery {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "max_imagery" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxImagery() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "max_terrain" field.</summary>
    public const int MaxTerrainFieldNumber = 4;
    private readonly static int MaxTerrainDefaultValue = 5;

    private int maxTerrain_;
    /// <summary>
    /// Maximum number of terrain packets per request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxTerrain {
      get { if ((_hasBits0 & 8) != 0) { return maxTerrain_; } else { return MaxTerrainDefaultValue; } }
      set {
        _hasBits0 |= 8;
        maxTerrain_ = value;
      }
    }
    /// <summary>Gets whether the "max_terrain" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxTerrain {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "max_terrain" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxTerrain() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "max_quadtree" field.</summary>
    public const int MaxQuadtreeFieldNumber = 5;
    private readonly static int MaxQuadtreeDefaultValue = 5;

    private int maxQuadtree_;
    /// <summary>
    /// Maximum number of quadtree packets per request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxQuadtree {
      get { if ((_hasBits0 & 16) != 0) { return maxQuadtree_; } else { return MaxQuadtreeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        maxQuadtree_ = value;
      }
    }
    /// <summary>Gets whether the "max_quadtree" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxQuadtree {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "max_quadtree" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxQuadtree() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "max_diorama_metadata" field.</summary>
    public const int MaxDioramaMetadataFieldNumber = 6;
    private readonly static int MaxDioramaMetadataDefaultValue = 1;

    private int maxDioramaMetadata_;
    /// <summary>
    /// Maximum number of diorama metadata packets per request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxDioramaMetadata {
      get { if ((_hasBits0 & 32) != 0) { return maxDioramaMetadata_; } else { return MaxDioramaMetadataDefaultValue; } }
      set {
        _hasBits0 |= 32;
        maxDioramaMetadata_ = value;
      }
    }
    /// <summary>Gets whether the "max_diorama_metadata" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxDioramaMetadata {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "max_diorama_metadata" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxDioramaMetadata() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "max_diorama_data" field.</summary>
    public const int MaxDioramaDataFieldNumber = 7;
    private readonly static int MaxDioramaDataDefaultValue = 0;

    private int maxDioramaData_;
    /// <summary>
    /// Maximum number of diorama data packets per request. The default is to not
    /// allow this packet type to be grouped with any other type, since these
    /// packets are typically quite large.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxDioramaData {
      get { if ((_hasBits0 & 64) != 0) { return maxDioramaData_; } else { return MaxDioramaDataDefaultValue; } }
      set {
        _hasBits0 |= 64;
        maxDioramaData_ = value;
      }
    }
    /// <summary>Gets whether the "max_diorama_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxDioramaData {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "max_diorama_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxDioramaData() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "max_consumer_fetch_ratio" field.</summary>
    public const int MaxConsumerFetchRatioFieldNumber = 8;
    private readonly static float MaxConsumerFetchRatioDefaultValue = 1F;

    private float maxConsumerFetchRatio_;
    /// <summary>
    /// Fetch ratio for consumer builds (non-paying customers). The default is to
    /// limit the number of packets fetched per frame to a low number (4 in
    /// consumer builds). This ratio allows to increase that low number - a ratio
    /// of 10 bumps the max number of packets to 40 per frame. Allowing a large
    /// number of packets to be fetched per frame can significantly decrease scene
    /// resolution time. A value of 0 means to not restrict the amount of data
    /// fetched per frame at all (infinite ratio).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxConsumerFetchRatio {
      get { if ((_hasBits0 & 128) != 0) { return maxConsumerFetchRatio_; } else { return MaxConsumerFetchRatioDefaultValue; } }
      set {
        _hasBits0 |= 128;
        maxConsumerFetchRatio_ = value;
      }
    }
    /// <summary>Gets whether the "max_consumer_fetch_ratio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxConsumerFetchRatio {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "max_consumer_fetch_ratio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxConsumerFetchRatio() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "max_pro_ec_fetch_ratio" field.</summary>
    public const int MaxProEcFetchRatioFieldNumber = 9;
    private readonly static float MaxProEcFetchRatioDefaultValue = 0F;

    private float maxProEcFetchRatio_;
    /// <summary>
    /// Same ratio, for Pro and EC builds. The default is to not throttle these
    /// builds at all.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxProEcFetchRatio {
      get { if ((_hasBits0 & 256) != 0) { return maxProEcFetchRatio_; } else { return MaxProEcFetchRatioDefaultValue; } }
      set {
        _hasBits0 |= 256;
        maxProEcFetchRatio_ = value;
      }
    }
    /// <summary>Gets whether the "max_pro_ec_fetch_ratio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxProEcFetchRatio {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "max_pro_ec_fetch_ratio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxProEcFetchRatio() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "safe_overall_qps" field.</summary>
    public const int SafeOverallQpsFieldNumber = 10;
    private readonly static float SafeOverallQpsDefaultValue = 0F;

    private float safeOverallQps_;
    /// <summary>
    /// QPS throttle for all node types. Forces the client to not issue more
    /// requests than the given number. A batched request counts for a single
    /// request from a qps standpoint. If not set or 0.0f, limit is ignored and the
    /// client won't be throttled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SafeOverallQps {
      get { if ((_hasBits0 & 512) != 0) { return safeOverallQps_; } else { return SafeOverallQpsDefaultValue; } }
      set {
        _hasBits0 |= 512;
        safeOverallQps_ = value;
      }
    }
    /// <summary>Gets whether the "safe_overall_qps" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSafeOverallQps {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "safe_overall_qps" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSafeOverallQps() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "safe_imagery_qps" field.</summary>
    public const int SafeImageryQpsFieldNumber = 11;
    private readonly static float SafeImageryQpsDefaultValue = 0F;

    private float safeImageryQps_;
    /// <summary>
    /// Same type of throttle for imagery requests only. Each imagery packet
    /// requested in a batch request counts as 1 request. This setting is effective
    /// to reduce overall bandwidth usage since imagery packets are the largest of
    /// the most commonly requested pakcets types.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SafeImageryQps {
      get { if ((_hasBits0 & 1024) != 0) { return safeImageryQps_; } else { return SafeImageryQpsDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        safeImageryQps_ = value;
      }
    }
    /// <summary>Gets whether the "safe_imagery_qps" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSafeImageryQps {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "safe_imagery_qps" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSafeImageryQps() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "domains_for_https" field.</summary>
    public const int DomainsForHttpsFieldNumber = 14;
    private readonly static string DomainsForHttpsDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("Z29vZ2xlLmNvbSBnc3RhdGljLmNvbQ=="), 0, 22);

    private string domainsForHttps_;
    /// <summary>
    /// List of domains for which the client should use the HTTPS protocol
    /// instead of standard HTTP, when client option is enabled (supported as
    /// of Earth 7.1).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DomainsForHttps {
      get { return domainsForHttps_ ?? DomainsForHttpsDefaultValue; }
      set {
        domainsForHttps_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "domains_for_https" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDomainsForHttps {
      get { return domainsForHttps_ != null; }
    }
    /// <summary>Clears the value of the "domains_for_https" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDomainsForHttps() {
      domainsForHttps_ = null;
    }

    /// <summary>Field number for the "hosts_for_http" field.</summary>
    public const int HostsForHttpFieldNumber = 15;
    private readonly static string HostsForHttpDefaultValue = "";

    private string hostsForHttp_;
    /// <summary>
    /// List of hosts for which the client should use regular HTTP instead of
    /// HTTPS.  This is effectively a list of exceptions to the domains_for_https
    /// field above.  Supported as of Earth 7.1.1.x for x > 1888.
    /// Example:  "sketchup.google.com chart.apis.google.com" will cause the client
    /// to use HTTP for these hosts, even though they belong to a domain in the
    /// domains_for_https list above.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HostsForHttp {
      get { return hostsForHttp_ ?? HostsForHttpDefaultValue; }
      set {
        hostsForHttp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "hosts_for_http" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHostsForHttp {
      get { return hostsForHttp_ != null; }
    }
    /// <summary>Clears the value of the "hosts_for_http" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHostsForHttp() {
      hostsForHttp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FetchingOptionsProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FetchingOptionsProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxRequestsPerQuery != other.MaxRequestsPerQuery) return false;
      if (ForceMaxRequestsPerQuery != other.ForceMaxRequestsPerQuery) return false;
      if (SortBatches != other.SortBatches) return false;
      if (MaxDrawable != other.MaxDrawable) return false;
      if (MaxImagery != other.MaxImagery) return false;
      if (MaxTerrain != other.MaxTerrain) return false;
      if (MaxQuadtree != other.MaxQuadtree) return false;
      if (MaxDioramaMetadata != other.MaxDioramaMetadata) return false;
      if (MaxDioramaData != other.MaxDioramaData) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxConsumerFetchRatio, other.MaxConsumerFetchRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxProEcFetchRatio, other.MaxProEcFetchRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SafeOverallQps, other.SafeOverallQps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SafeImageryQps, other.SafeImageryQps)) return false;
      if (DomainsForHttps != other.DomainsForHttps) return false;
      if (HostsForHttp != other.HostsForHttp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMaxRequestsPerQuery) hash ^= MaxRequestsPerQuery.GetHashCode();
      if (HasForceMaxRequestsPerQuery) hash ^= ForceMaxRequestsPerQuery.GetHashCode();
      if (HasSortBatches) hash ^= SortBatches.GetHashCode();
      if (HasMaxDrawable) hash ^= MaxDrawable.GetHashCode();
      if (HasMaxImagery) hash ^= MaxImagery.GetHashCode();
      if (HasMaxTerrain) hash ^= MaxTerrain.GetHashCode();
      if (HasMaxQuadtree) hash ^= MaxQuadtree.GetHashCode();
      if (HasMaxDioramaMetadata) hash ^= MaxDioramaMetadata.GetHashCode();
      if (HasMaxDioramaData) hash ^= MaxDioramaData.GetHashCode();
      if (HasMaxConsumerFetchRatio) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxConsumerFetchRatio);
      if (HasMaxProEcFetchRatio) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxProEcFetchRatio);
      if (HasSafeOverallQps) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SafeOverallQps);
      if (HasSafeImageryQps) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SafeImageryQps);
      if (HasDomainsForHttps) hash ^= DomainsForHttps.GetHashCode();
      if (HasHostsForHttp) hash ^= HostsForHttp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMaxRequestsPerQuery) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxRequestsPerQuery);
      }
      if (HasMaxDrawable) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxDrawable);
      }
      if (HasMaxImagery) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxImagery);
      }
      if (HasMaxTerrain) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxTerrain);
      }
      if (HasMaxQuadtree) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxQuadtree);
      }
      if (HasMaxDioramaMetadata) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxDioramaMetadata);
      }
      if (HasMaxDioramaData) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxDioramaData);
      }
      if (HasMaxConsumerFetchRatio) {
        output.WriteRawTag(69);
        output.WriteFloat(MaxConsumerFetchRatio);
      }
      if (HasMaxProEcFetchRatio) {
        output.WriteRawTag(77);
        output.WriteFloat(MaxProEcFetchRatio);
      }
      if (HasSafeOverallQps) {
        output.WriteRawTag(85);
        output.WriteFloat(SafeOverallQps);
      }
      if (HasSafeImageryQps) {
        output.WriteRawTag(93);
        output.WriteFloat(SafeImageryQps);
      }
      if (HasForceMaxRequestsPerQuery) {
        output.WriteRawTag(96);
        output.WriteBool(ForceMaxRequestsPerQuery);
      }
      if (HasSortBatches) {
        output.WriteRawTag(104);
        output.WriteBool(SortBatches);
      }
      if (HasDomainsForHttps) {
        output.WriteRawTag(114);
        output.WriteString(DomainsForHttps);
      }
      if (HasHostsForHttp) {
        output.WriteRawTag(122);
        output.WriteString(HostsForHttp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMaxRequestsPerQuery) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxRequestsPerQuery);
      }
      if (HasMaxDrawable) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxDrawable);
      }
      if (HasMaxImagery) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxImagery);
      }
      if (HasMaxTerrain) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxTerrain);
      }
      if (HasMaxQuadtree) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxQuadtree);
      }
      if (HasMaxDioramaMetadata) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxDioramaMetadata);
      }
      if (HasMaxDioramaData) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxDioramaData);
      }
      if (HasMaxConsumerFetchRatio) {
        output.WriteRawTag(69);
        output.WriteFloat(MaxConsumerFetchRatio);
      }
      if (HasMaxProEcFetchRatio) {
        output.WriteRawTag(77);
        output.WriteFloat(MaxProEcFetchRatio);
      }
      if (HasSafeOverallQps) {
        output.WriteRawTag(85);
        output.WriteFloat(SafeOverallQps);
      }
      if (HasSafeImageryQps) {
        output.WriteRawTag(93);
        output.WriteFloat(SafeImageryQps);
      }
      if (HasForceMaxRequestsPerQuery) {
        output.WriteRawTag(96);
        output.WriteBool(ForceMaxRequestsPerQuery);
      }
      if (HasSortBatches) {
        output.WriteRawTag(104);
        output.WriteBool(SortBatches);
      }
      if (HasDomainsForHttps) {
        output.WriteRawTag(114);
        output.WriteString(DomainsForHttps);
      }
      if (HasHostsForHttp) {
        output.WriteRawTag(122);
        output.WriteString(HostsForHttp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMaxRequestsPerQuery) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRequestsPerQuery);
      }
      if (HasForceMaxRequestsPerQuery) {
        size += 1 + 1;
      }
      if (HasSortBatches) {
        size += 1 + 1;
      }
      if (HasMaxDrawable) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxDrawable);
      }
      if (HasMaxImagery) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxImagery);
      }
      if (HasMaxTerrain) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxTerrain);
      }
      if (HasMaxQuadtree) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxQuadtree);
      }
      if (HasMaxDioramaMetadata) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxDioramaMetadata);
      }
      if (HasMaxDioramaData) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxDioramaData);
      }
      if (HasMaxConsumerFetchRatio) {
        size += 1 + 4;
      }
      if (HasMaxProEcFetchRatio) {
        size += 1 + 4;
      }
      if (HasSafeOverallQps) {
        size += 1 + 4;
      }
      if (HasSafeImageryQps) {
        size += 1 + 4;
      }
      if (HasDomainsForHttps) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DomainsForHttps);
      }
      if (HasHostsForHttp) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostsForHttp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FetchingOptionsProto other) {
      if (other == null) {
        return;
      }
      if (other.HasMaxRequestsPerQuery) {
        MaxRequestsPerQuery = other.MaxRequestsPerQuery;
      }
      if (other.HasForceMaxRequestsPerQuery) {
        ForceMaxRequestsPerQuery = other.ForceMaxRequestsPerQuery;
      }
      if (other.HasSortBatches) {
        SortBatches = other.SortBatches;
      }
      if (other.HasMaxDrawable) {
        MaxDrawable = other.MaxDrawable;
      }
      if (other.HasMaxImagery) {
        MaxImagery = other.MaxImagery;
      }
      if (other.HasMaxTerrain) {
        MaxTerrain = other.MaxTerrain;
      }
      if (other.HasMaxQuadtree) {
        MaxQuadtree = other.MaxQuadtree;
      }
      if (other.HasMaxDioramaMetadata) {
        MaxDioramaMetadata = other.MaxDioramaMetadata;
      }
      if (other.HasMaxDioramaData) {
        MaxDioramaData = other.MaxDioramaData;
      }
      if (other.HasMaxConsumerFetchRatio) {
        MaxConsumerFetchRatio = other.MaxConsumerFetchRatio;
      }
      if (other.HasMaxProEcFetchRatio) {
        MaxProEcFetchRatio = other.MaxProEcFetchRatio;
      }
      if (other.HasSafeOverallQps) {
        SafeOverallQps = other.SafeOverallQps;
      }
      if (other.HasSafeImageryQps) {
        SafeImageryQps = other.SafeImageryQps;
      }
      if (other.HasDomainsForHttps) {
        DomainsForHttps = other.DomainsForHttps;
      }
      if (other.HasHostsForHttp) {
        HostsForHttp = other.HostsForHttp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxRequestsPerQuery = input.ReadInt32();
            break;
          }
          case 16: {
            MaxDrawable = input.ReadInt32();
            break;
          }
          case 24: {
            MaxImagery = input.ReadInt32();
            break;
          }
          case 32: {
            MaxTerrain = input.ReadInt32();
            break;
          }
          case 40: {
            MaxQuadtree = input.ReadInt32();
            break;
          }
          case 48: {
            MaxDioramaMetadata = input.ReadInt32();
            break;
          }
          case 56: {
            MaxDioramaData = input.ReadInt32();
            break;
          }
          case 69: {
            MaxConsumerFetchRatio = input.ReadFloat();
            break;
          }
          case 77: {
            MaxProEcFetchRatio = input.ReadFloat();
            break;
          }
          case 85: {
            SafeOverallQps = input.ReadFloat();
            break;
          }
          case 93: {
            SafeImageryQps = input.ReadFloat();
            break;
          }
          case 96: {
            ForceMaxRequestsPerQuery = input.ReadBool();
            break;
          }
          case 104: {
            SortBatches = input.ReadBool();
            break;
          }
          case 114: {
            DomainsForHttps = input.ReadString();
            break;
          }
          case 122: {
            HostsForHttp = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MaxRequestsPerQuery = input.ReadInt32();
            break;
          }
          case 16: {
            MaxDrawable = input.ReadInt32();
            break;
          }
          case 24: {
            MaxImagery = input.ReadInt32();
            break;
          }
          case 32: {
            MaxTerrain = input.ReadInt32();
            break;
          }
          case 40: {
            MaxQuadtree = input.ReadInt32();
            break;
          }
          case 48: {
            MaxDioramaMetadata = input.ReadInt32();
            break;
          }
          case 56: {
            MaxDioramaData = input.ReadInt32();
            break;
          }
          case 69: {
            MaxConsumerFetchRatio = input.ReadFloat();
            break;
          }
          case 77: {
            MaxProEcFetchRatio = input.ReadFloat();
            break;
          }
          case 85: {
            SafeOverallQps = input.ReadFloat();
            break;
          }
          case 93: {
            SafeImageryQps = input.ReadFloat();
            break;
          }
          case 96: {
            ForceMaxRequestsPerQuery = input.ReadBool();
            break;
          }
          case 104: {
            SortBatches = input.ReadBool();
            break;
          }
          case 114: {
            DomainsForHttps = input.ReadString();
            break;
          }
          case 122: {
            HostsForHttp = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TimeMachineOptionsProto : pb::IMessage<TimeMachineOptionsProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimeMachineOptionsProto> _parser = new pb::MessageParser<TimeMachineOptionsProto>(() => new TimeMachineOptionsProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TimeMachineOptionsProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimeMachineOptionsProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimeMachineOptionsProto(TimeMachineOptionsProto other) : this() {
      _hasBits0 = other._hasBits0;
      serverUrl_ = other.serverUrl_;
      isTimemachine_ = other.isTimemachine_;
      dwellTimeMs_ = other.dwellTimeMs_;
      discoverabilityAltitudeMeters_ = other.discoverabilityAltitudeMeters_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimeMachineOptionsProto Clone() {
      return new TimeMachineOptionsProto(this);
    }

    /// <summary>Field number for the "server_url" field.</summary>
    public const int ServerUrlFieldNumber = 1;
    private readonly static string ServerUrlDefaultValue = "";

    private string serverUrl_;
    /// <summary>
    /// Url of timemachine database. If set and non-empty, there is a time machine
    /// server associated to this database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ServerUrl {
      get { return serverUrl_ ?? ServerUrlDefaultValue; }
      set {
        serverUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "server_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasServerUrl {
      get { return serverUrl_ != null; }
    }
    /// <summary>Clears the value of the "server_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearServerUrl() {
      serverUrl_ = null;
    }

    /// <summary>Field number for the "is_timemachine" field.</summary>
    public const int IsTimemachineFieldNumber = 2;
    private readonly static bool IsTimemachineDefaultValue = false;

    private bool isTimemachine_;
    /// <summary>
    /// If set to true, this database is a time machine server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsTimemachine {
      get { if ((_hasBits0 & 1) != 0) { return isTimemachine_; } else { return IsTimemachineDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isTimemachine_ = value;
      }
    }
    /// <summary>Gets whether the "is_timemachine" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsTimemachine {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_timemachine" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsTimemachine() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "dwell_time_ms" field.</summary>
    public const int DwellTimeMsFieldNumber = 3;
    private readonly static int DwellTimeMsDefaultValue = 500;

    private int dwellTimeMs_;
    /// <summary>
    /// Number of milliseconds to wait since the last time change until we
    /// actually set the date used for time machine requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DwellTimeMs {
      get { if ((_hasBits0 & 2) != 0) { return dwellTimeMs_; } else { return DwellTimeMsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dwellTimeMs_ = value;
      }
    }
    /// <summary>Gets whether the "dwell_time_ms" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDwellTimeMs {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "dwell_time_ms" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDwellTimeMs() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "discoverability_altitude_meters" field.</summary>
    public const int DiscoverabilityAltitudeMetersFieldNumber = 4;
    private readonly static int DiscoverabilityAltitudeMetersDefaultValue = 15000;

    private int discoverabilityAltitudeMeters_;
    /// <summary>
    /// The camera altitude (in meters) below which the client is allowed to
    /// expose timemachine dates to the user to inform her that interesting data
    /// exists.  The default value is 15 km.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DiscoverabilityAltitudeMeters {
      get { if ((_hasBits0 & 4) != 0) { return discoverabilityAltitudeMeters_; } else { return DiscoverabilityAltitudeMetersDefaultValue; } }
      set {
        _hasBits0 |= 4;
        discoverabilityAltitudeMeters_ = value;
      }
    }
    /// <summary>Gets whether the "discoverability_altitude_meters" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDiscoverabilityAltitudeMeters {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "discoverability_altitude_meters" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDiscoverabilityAltitudeMeters() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TimeMachineOptionsProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TimeMachineOptionsProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerUrl != other.ServerUrl) return false;
      if (IsTimemachine != other.IsTimemachine) return false;
      if (DwellTimeMs != other.DwellTimeMs) return false;
      if (DiscoverabilityAltitudeMeters != other.DiscoverabilityAltitudeMeters) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasServerUrl) hash ^= ServerUrl.GetHashCode();
      if (HasIsTimemachine) hash ^= IsTimemachine.GetHashCode();
      if (HasDwellTimeMs) hash ^= DwellTimeMs.GetHashCode();
      if (HasDiscoverabilityAltitudeMeters) hash ^= DiscoverabilityAltitudeMeters.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasServerUrl) {
        output.WriteRawTag(10);
        output.WriteString(ServerUrl);
      }
      if (HasIsTimemachine) {
        output.WriteRawTag(16);
        output.WriteBool(IsTimemachine);
      }
      if (HasDwellTimeMs) {
        output.WriteRawTag(24);
        output.WriteInt32(DwellTimeMs);
      }
      if (HasDiscoverabilityAltitudeMeters) {
        output.WriteRawTag(32);
        output.WriteInt32(DiscoverabilityAltitudeMeters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasServerUrl) {
        output.WriteRawTag(10);
        output.WriteString(ServerUrl);
      }
      if (HasIsTimemachine) {
        output.WriteRawTag(16);
        output.WriteBool(IsTimemachine);
      }
      if (HasDwellTimeMs) {
        output.WriteRawTag(24);
        output.WriteInt32(DwellTimeMs);
      }
      if (HasDiscoverabilityAltitudeMeters) {
        output.WriteRawTag(32);
        output.WriteInt32(DiscoverabilityAltitudeMeters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasServerUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerUrl);
      }
      if (HasIsTimemachine) {
        size += 1 + 1;
      }
      if (HasDwellTimeMs) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DwellTimeMs);
      }
      if (HasDiscoverabilityAltitudeMeters) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiscoverabilityAltitudeMeters);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TimeMachineOptionsProto other) {
      if (other == null) {
        return;
      }
      if (other.HasServerUrl) {
        ServerUrl = other.ServerUrl;
      }
      if (other.HasIsTimemachine) {
        IsTimemachine = other.IsTimemachine;
      }
      if (other.HasDwellTimeMs) {
        DwellTimeMs = other.DwellTimeMs;
      }
      if (other.HasDiscoverabilityAltitudeMeters) {
        DiscoverabilityAltitudeMeters = other.DiscoverabilityAltitudeMeters;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerUrl = input.ReadString();
            break;
          }
          case 16: {
            IsTimemachine = input.ReadBool();
            break;
          }
          case 24: {
            DwellTimeMs = input.ReadInt32();
            break;
          }
          case 32: {
            DiscoverabilityAltitudeMeters = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ServerUrl = input.ReadString();
            break;
          }
          case 16: {
            IsTimemachine = input.ReadBool();
            break;
          }
          case 24: {
            DwellTimeMs = input.ReadInt32();
            break;
          }
          case 32: {
            DiscoverabilityAltitudeMeters = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AutopiaOptionsProto : pb::IMessage<AutopiaOptionsProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AutopiaOptionsProto> _parser = new pb::MessageParser<AutopiaOptionsProto>(() => new AutopiaOptionsProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AutopiaOptionsProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AutopiaOptionsProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AutopiaOptionsProto(AutopiaOptionsProto other) : this() {
      _hasBits0 = other._hasBits0;
      metadataServerUrl_ = other.metadataServerUrl_;
      depthmapServerUrl_ = other.depthmapServerUrl_;
      coverageOverlayUrl_ = other.coverageOverlayUrl_;
      maxImageryQps_ = other.maxImageryQps_;
      maxMetadataDepthmapQps_ = other.maxMetadataDepthmapQps_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AutopiaOptionsProto Clone() {
      return new AutopiaOptionsProto(this);
    }

    /// <summary>Field number for the "metadata_server_url" field.</summary>
    public const int MetadataServerUrlFieldNumber = 1;
    private readonly static string MetadataServerUrlDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("aHR0cDovL2NiazAuZ29vZ2xlLmNvbS9jYms="), 0, 26);

    private string metadataServerUrl_;
    /// <summary>
    /// Url of the cityblock server from which to fetch the panorama
    /// metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MetadataServerUrl {
      get { return metadataServerUrl_ ?? MetadataServerUrlDefaultValue; }
      set {
        metadataServerUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "metadata_server_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMetadataServerUrl {
      get { return metadataServerUrl_ != null; }
    }
    /// <summary>Clears the value of the "metadata_server_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMetadataServerUrl() {
      metadataServerUrl_ = null;
    }

    /// <summary>Field number for the "depthmap_server_url" field.</summary>
    public const int DepthmapServerUrlFieldNumber = 2;
    private readonly static string DepthmapServerUrlDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("aHR0cDovL2NiazAuZ29vZ2xlLmNvbS9jYms="), 0, 26);

    private string depthmapServerUrl_;
    /// <summary>
    /// Url of the cityblock server from which to fetch the depthmaps
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DepthmapServerUrl {
      get { return depthmapServerUrl_ ?? DepthmapServerUrlDefaultValue; }
      set {
        depthmapServerUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "depthmap_server_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDepthmapServerUrl {
      get { return depthmapServerUrl_ != null; }
    }
    /// <summary>Clears the value of the "depthmap_server_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDepthmapServerUrl() {
      depthmapServerUrl_ = null;
    }

    /// <summary>Field number for the "coverage_overlay_url" field.</summary>
    public const int CoverageOverlayUrlFieldNumber = 3;
    private readonly static string CoverageOverlayUrlDefaultValue = "";

    private string coverageOverlayUrl_;
    /// <summary>
    /// Url of the coverage overlay KML. Not specifying this value will
    /// result in no coverage overlays being shown while dragging the
    /// pegman in autopia.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CoverageOverlayUrl {
      get { return coverageOverlayUrl_ ?? CoverageOverlayUrlDefaultValue; }
      set {
        coverageOverlayUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "coverage_overlay_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCoverageOverlayUrl {
      get { return coverageOverlayUrl_ != null; }
    }
    /// <summary>Clears the value of the "coverage_overlay_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCoverageOverlayUrl() {
      coverageOverlayUrl_ = null;
    }

    /// <summary>Field number for the "max_imagery_qps" field.</summary>
    public const int MaxImageryQpsFieldNumber = 4;
    private readonly static float MaxImageryQpsDefaultValue = 0F;

    private float maxImageryQps_;
    /// <summary>
    /// QPS throttle for Autopia imagery requests. If not set or 0.0f,
    /// limit is ignored and the client won't be throttled. We have a separate
    /// throttle for imagery requests as they are the most common type of requests.
    ///
    /// If we set an identical throttle value to imagery and metadata-depthmap,
    /// then requests can share the http connection. On the other hand they will
    /// use two different connections for different values. This enables us to
    /// throttle imagery without throttling metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxImageryQps {
      get { if ((_hasBits0 & 1) != 0) { return maxImageryQps_; } else { return MaxImageryQpsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        maxImageryQps_ = value;
      }
    }
    /// <summary>Gets whether the "max_imagery_qps" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxImageryQps {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "max_imagery_qps" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxImageryQps() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_metadata_depthmap_qps" field.</summary>
    public const int MaxMetadataDepthmapQpsFieldNumber = 5;
    private readonly static float MaxMetadataDepthmapQpsDefaultValue = 0F;

    private float maxMetadataDepthmapQps_;
    /// <summary>
    /// QPS throttle for Autopia metadata and depthmap requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxMetadataDepthmapQps {
      get { if ((_hasBits0 & 2) != 0) { return maxMetadataDepthmapQps_; } else { return MaxMetadataDepthmapQpsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxMetadataDepthmapQps_ = value;
      }
    }
    /// <summary>Gets whether the "max_metadata_depthmap_qps" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxMetadataDepthmapQps {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_metadata_depthmap_qps" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxMetadataDepthmapQps() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AutopiaOptionsProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AutopiaOptionsProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MetadataServerUrl != other.MetadataServerUrl) return false;
      if (DepthmapServerUrl != other.DepthmapServerUrl) return false;
      if (CoverageOverlayUrl != other.CoverageOverlayUrl) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxImageryQps, other.MaxImageryQps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxMetadataDepthmapQps, other.MaxMetadataDepthmapQps)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMetadataServerUrl) hash ^= MetadataServerUrl.GetHashCode();
      if (HasDepthmapServerUrl) hash ^= DepthmapServerUrl.GetHashCode();
      if (HasCoverageOverlayUrl) hash ^= CoverageOverlayUrl.GetHashCode();
      if (HasMaxImageryQps) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxImageryQps);
      if (HasMaxMetadataDepthmapQps) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxMetadataDepthmapQps);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMetadataServerUrl) {
        output.WriteRawTag(10);
        output.WriteString(MetadataServerUrl);
      }
      if (HasDepthmapServerUrl) {
        output.WriteRawTag(18);
        output.WriteString(DepthmapServerUrl);
      }
      if (HasCoverageOverlayUrl) {
        output.WriteRawTag(26);
        output.WriteString(CoverageOverlayUrl);
      }
      if (HasMaxImageryQps) {
        output.WriteRawTag(37);
        output.WriteFloat(MaxImageryQps);
      }
      if (HasMaxMetadataDepthmapQps) {
        output.WriteRawTag(45);
        output.WriteFloat(MaxMetadataDepthmapQps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMetadataServerUrl) {
        output.WriteRawTag(10);
        output.WriteString(MetadataServerUrl);
      }
      if (HasDepthmapServerUrl) {
        output.WriteRawTag(18);
        output.WriteString(DepthmapServerUrl);
      }
      if (HasCoverageOverlayUrl) {
        output.WriteRawTag(26);
        output.WriteString(CoverageOverlayUrl);
      }
      if (HasMaxImageryQps) {
        output.WriteRawTag(37);
        output.WriteFloat(MaxImageryQps);
      }
      if (HasMaxMetadataDepthmapQps) {
        output.WriteRawTag(45);
        output.WriteFloat(MaxMetadataDepthmapQps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMetadataServerUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MetadataServerUrl);
      }
      if (HasDepthmapServerUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DepthmapServerUrl);
      }
      if (HasCoverageOverlayUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoverageOverlayUrl);
      }
      if (HasMaxImageryQps) {
        size += 1 + 4;
      }
      if (HasMaxMetadataDepthmapQps) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AutopiaOptionsProto other) {
      if (other == null) {
        return;
      }
      if (other.HasMetadataServerUrl) {
        MetadataServerUrl = other.MetadataServerUrl;
      }
      if (other.HasDepthmapServerUrl) {
        DepthmapServerUrl = other.DepthmapServerUrl;
      }
      if (other.HasCoverageOverlayUrl) {
        CoverageOverlayUrl = other.CoverageOverlayUrl;
      }
      if (other.HasMaxImageryQps) {
        MaxImageryQps = other.MaxImageryQps;
      }
      if (other.HasMaxMetadataDepthmapQps) {
        MaxMetadataDepthmapQps = other.MaxMetadataDepthmapQps;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MetadataServerUrl = input.ReadString();
            break;
          }
          case 18: {
            DepthmapServerUrl = input.ReadString();
            break;
          }
          case 26: {
            CoverageOverlayUrl = input.ReadString();
            break;
          }
          case 37: {
            MaxImageryQps = input.ReadFloat();
            break;
          }
          case 45: {
            MaxMetadataDepthmapQps = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MetadataServerUrl = input.ReadString();
            break;
          }
          case 18: {
            DepthmapServerUrl = input.ReadString();
            break;
          }
          case 26: {
            CoverageOverlayUrl = input.ReadString();
            break;
          }
          case 37: {
            MaxImageryQps = input.ReadFloat();
            break;
          }
          case 45: {
            MaxMetadataDepthmapQps = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Settings that control the client's interaction with the CSI logging server.
  /// Only useful for the main database.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CSIOptionsProto : pb::IMessage<CSIOptionsProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSIOptionsProto> _parser = new pb::MessageParser<CSIOptionsProto>(() => new CSIOptionsProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CSIOptionsProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSIOptionsProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSIOptionsProto(CSIOptionsProto other) : this() {
      _hasBits0 = other._hasBits0;
      samplingPercentage_ = other.samplingPercentage_;
      experimentId_ = other.experimentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSIOptionsProto Clone() {
      return new CSIOptionsProto(this);
    }

    /// <summary>Field number for the "sampling_percentage" field.</summary>
    public const int SamplingPercentageFieldNumber = 1;
    private readonly static int SamplingPercentageDefaultValue = 0;

    private int samplingPercentage_;
    /// <summary>
    /// The percentage of authenticated non-EC logins to send to CSI.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SamplingPercentage {
      get { if ((_hasBits0 & 1) != 0) { return samplingPercentage_; } else { return SamplingPercentageDefaultValue; } }
      set {
        _hasBits0 |= 1;
        samplingPercentage_ = value;
      }
    }
    /// <summary>Gets whether the "sampling_percentage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSamplingPercentage {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "sampling_percentage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSamplingPercentage() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "experiment_id" field.</summary>
    public const int ExperimentIdFieldNumber = 2;
    private readonly static string ExperimentIdDefaultValue = "";

    private string experimentId_;
    /// <summary>
    /// A string used to tag samples sent to CSI as part of an experiment.
    /// This string is passed as a CGI parameter of the URL and is expected
    /// to be URL-friendly.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExperimentId {
      get { return experimentId_ ?? ExperimentIdDefaultValue; }
      set {
        experimentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "experiment_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExperimentId {
      get { return experimentId_ != null; }
    }
    /// <summary>Clears the value of the "experiment_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExperimentId() {
      experimentId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CSIOptionsProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CSIOptionsProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SamplingPercentage != other.SamplingPercentage) return false;
      if (ExperimentId != other.ExperimentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSamplingPercentage) hash ^= SamplingPercentage.GetHashCode();
      if (HasExperimentId) hash ^= ExperimentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSamplingPercentage) {
        output.WriteRawTag(8);
        output.WriteInt32(SamplingPercentage);
      }
      if (HasExperimentId) {
        output.WriteRawTag(18);
        output.WriteString(ExperimentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSamplingPercentage) {
        output.WriteRawTag(8);
        output.WriteInt32(SamplingPercentage);
      }
      if (HasExperimentId) {
        output.WriteRawTag(18);
        output.WriteString(ExperimentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSamplingPercentage) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SamplingPercentage);
      }
      if (HasExperimentId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExperimentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CSIOptionsProto other) {
      if (other == null) {
        return;
      }
      if (other.HasSamplingPercentage) {
        SamplingPercentage = other.SamplingPercentage;
      }
      if (other.HasExperimentId) {
        ExperimentId = other.ExperimentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SamplingPercentage = input.ReadInt32();
            break;
          }
          case 18: {
            ExperimentId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SamplingPercentage = input.ReadInt32();
            break;
          }
          case 18: {
            ExperimentId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SearchTabProto : pb::IMessage<SearchTabProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SearchTabProto> _parser = new pb::MessageParser<SearchTabProto>(() => new SearchTabProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SearchTabProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SearchTabProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SearchTabProto(SearchTabProto other) : this() {
      _hasBits0 = other._hasBits0;
      isVisible_ = other.isVisible_;
      tabLabel_ = other.tabLabel_ != null ? other.tabLabel_.Clone() : null;
      baseUrl_ = other.baseUrl_;
      viewportPrefix_ = other.viewportPrefix_;
      inputBox_ = other.inputBox_.Clone();
      requirement_ = other.requirement_ != null ? other.requirement_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SearchTabProto Clone() {
      return new SearchTabProto(this);
    }

    /// <summary>Field number for the "is_visible" field.</summary>
    public const int IsVisibleFieldNumber = 1;
    private readonly static bool IsVisibleDefaultValue = false;

    private bool isVisible_;
    /// <summary>
    /// If false, tab is hidden.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsVisible {
      get { if ((_hasBits0 & 1) != 0) { return isVisible_; } else { return IsVisibleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isVisible_ = value;
      }
    }
    /// <summary>Gets whether the "is_visible" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsVisible {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_visible" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsVisible() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tab_label" field.</summary>
    public const int TabLabelFieldNumber = 2;
    private global::Keyhole.Dbroot.StringIdOrValueProto tabLabel_;
    /// <summary>
    /// Name printed on tab.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto TabLabel {
      get { return tabLabel_; }
      set {
        tabLabel_ = value;
      }
    }

    /// <summary>Field number for the "base_url" field.</summary>
    public const int BaseUrlFieldNumber = 3;
    private readonly static string BaseUrlDefaultValue = "";

    private string baseUrl_;
    /// <summary>
    /// Base url for searches on this tab. This can contain a host, port, path
    /// and base query. Extra query parameter will be added to this URL to form
    /// the final URL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BaseUrl {
      get { return baseUrl_ ?? BaseUrlDefaultValue; }
      set {
        baseUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "base_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBaseUrl {
      get { return baseUrl_ != null; }
    }
    /// <summary>Clears the value of the "base_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBaseUrl() {
      baseUrl_ = null;
    }

    /// <summary>Field number for the "viewport_prefix" field.</summary>
    public const int ViewportPrefixFieldNumber = 4;
    private readonly static string ViewportPrefixDefaultValue = "";

    private string viewportPrefix_;
    /// <summary>
    /// Prefix added to viewport query
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ViewportPrefix {
      get { return viewportPrefix_ ?? ViewportPrefixDefaultValue; }
      set {
        viewportPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "viewport_prefix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasViewportPrefix {
      get { return viewportPrefix_ != null; }
    }
    /// <summary>Clears the value of the "viewport_prefix" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearViewportPrefix() {
      viewportPrefix_ = null;
    }

    /// <summary>Field number for the "input_box" field.</summary>
    public const int InputBoxFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.SearchTabProto.Types.InputBoxInfo> _repeated_inputBox_codec
        = pb::FieldCodec.ForMessage(42, global::Keyhole.Dbroot.SearchTabProto.Types.InputBoxInfo.Parser);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.SearchTabProto.Types.InputBoxInfo> inputBox_ = new pbc::RepeatedField<global::Keyhole.Dbroot.SearchTabProto.Types.InputBoxInfo>();
    /// <summary>
    /// List of input boxes. Most clients support only two input boxes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.SearchTabProto.Types.InputBoxInfo> InputBox {
      get { return inputBox_; }
    }

    /// <summary>Field number for the "requirement" field.</summary>
    public const int RequirementFieldNumber = 6;
    private global::Keyhole.Dbroot.RequirementProto requirement_;
    /// <summary>
    /// Requirement for showing search tab.
    /// This requirement is ignored for clients before 6.2 (i.e. it does not
    /// affect the search tab visibility for older clients).
    /// Version support: 6.2 +
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.RequirementProto Requirement {
      get { return requirement_; }
      set {
        requirement_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SearchTabProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SearchTabProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsVisible != other.IsVisible) return false;
      if (!object.Equals(TabLabel, other.TabLabel)) return false;
      if (BaseUrl != other.BaseUrl) return false;
      if (ViewportPrefix != other.ViewportPrefix) return false;
      if(!inputBox_.Equals(other.inputBox_)) return false;
      if (!object.Equals(Requirement, other.Requirement)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsVisible) hash ^= IsVisible.GetHashCode();
      if (tabLabel_ != null) hash ^= TabLabel.GetHashCode();
      if (HasBaseUrl) hash ^= BaseUrl.GetHashCode();
      if (HasViewportPrefix) hash ^= ViewportPrefix.GetHashCode();
      hash ^= inputBox_.GetHashCode();
      if (requirement_ != null) hash ^= Requirement.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIsVisible) {
        output.WriteRawTag(8);
        output.WriteBool(IsVisible);
      }
      if (tabLabel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TabLabel);
      }
      if (HasBaseUrl) {
        output.WriteRawTag(26);
        output.WriteString(BaseUrl);
      }
      if (HasViewportPrefix) {
        output.WriteRawTag(34);
        output.WriteString(ViewportPrefix);
      }
      inputBox_.WriteTo(output, _repeated_inputBox_codec);
      if (requirement_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Requirement);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIsVisible) {
        output.WriteRawTag(8);
        output.WriteBool(IsVisible);
      }
      if (tabLabel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TabLabel);
      }
      if (HasBaseUrl) {
        output.WriteRawTag(26);
        output.WriteString(BaseUrl);
      }
      if (HasViewportPrefix) {
        output.WriteRawTag(34);
        output.WriteString(ViewportPrefix);
      }
      inputBox_.WriteTo(ref output, _repeated_inputBox_codec);
      if (requirement_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Requirement);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasIsVisible) {
        size += 1 + 1;
      }
      if (tabLabel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TabLabel);
      }
      if (HasBaseUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseUrl);
      }
      if (HasViewportPrefix) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ViewportPrefix);
      }
      size += inputBox_.CalculateSize(_repeated_inputBox_codec);
      if (requirement_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Requirement);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SearchTabProto other) {
      if (other == null) {
        return;
      }
      if (other.HasIsVisible) {
        IsVisible = other.IsVisible;
      }
      if (other.tabLabel_ != null) {
        if (tabLabel_ == null) {
          TabLabel = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        TabLabel.MergeFrom(other.TabLabel);
      }
      if (other.HasBaseUrl) {
        BaseUrl = other.BaseUrl;
      }
      if (other.HasViewportPrefix) {
        ViewportPrefix = other.ViewportPrefix;
      }
      inputBox_.Add(other.inputBox_);
      if (other.requirement_ != null) {
        if (requirement_ == null) {
          Requirement = new global::Keyhole.Dbroot.RequirementProto();
        }
        Requirement.MergeFrom(other.Requirement);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsVisible = input.ReadBool();
            break;
          }
          case 18: {
            if (tabLabel_ == null) {
              TabLabel = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(TabLabel);
            break;
          }
          case 26: {
            BaseUrl = input.ReadString();
            break;
          }
          case 34: {
            ViewportPrefix = input.ReadString();
            break;
          }
          case 42: {
            inputBox_.AddEntriesFrom(input, _repeated_inputBox_codec);
            break;
          }
          case 50: {
            if (requirement_ == null) {
              Requirement = new global::Keyhole.Dbroot.RequirementProto();
            }
            input.ReadMessage(Requirement);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsVisible = input.ReadBool();
            break;
          }
          case 18: {
            if (tabLabel_ == null) {
              TabLabel = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(TabLabel);
            break;
          }
          case 26: {
            BaseUrl = input.ReadString();
            break;
          }
          case 34: {
            ViewportPrefix = input.ReadString();
            break;
          }
          case 42: {
            inputBox_.AddEntriesFrom(ref input, _repeated_inputBox_codec);
            break;
          }
          case 50: {
            if (requirement_ == null) {
              Requirement = new global::Keyhole.Dbroot.RequirementProto();
            }
            input.ReadMessage(Requirement);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SearchTabProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Describes a single input box - the label it should have and how its
      /// contents should be sent with the search query.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class InputBoxInfo : pb::IMessage<InputBoxInfo>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<InputBoxInfo> _parser = new pb::MessageParser<InputBoxInfo>(() => new InputBoxInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<InputBoxInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Keyhole.Dbroot.SearchTabProto.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public InputBoxInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public InputBoxInfo(InputBoxInfo other) : this() {
          label_ = other.label_ != null ? other.label_.Clone() : null;
          queryVerb_ = other.queryVerb_;
          queryPrepend_ = other.queryPrepend_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public InputBoxInfo Clone() {
          return new InputBoxInfo(this);
        }

        /// <summary>Field number for the "label" field.</summary>
        public const int LabelFieldNumber = 1;
        private global::Keyhole.Dbroot.StringIdOrValueProto label_;
        /// <summary>
        /// Label next to tag.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Keyhole.Dbroot.StringIdOrValueProto Label {
          get { return label_; }
          set {
            label_ = value;
          }
        }

        /// <summary>Field number for the "query_verb" field.</summary>
        public const int QueryVerbFieldNumber = 2;
        private readonly static string QueryVerbDefaultValue = "";

        private string queryVerb_;
        /// <summary>
        /// Query param (verb)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string QueryVerb {
          get { return queryVerb_ ?? QueryVerbDefaultValue; }
          set {
            queryVerb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "query_verb" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasQueryVerb {
          get { return queryVerb_ != null; }
        }
        /// <summary>Clears the value of the "query_verb" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearQueryVerb() {
          queryVerb_ = null;
        }

        /// <summary>Field number for the "query_prepend" field.</summary>
        public const int QueryPrependFieldNumber = 3;
        private readonly static string QueryPrependDefaultValue = "";

        private string queryPrepend_;
        /// <summary>
        /// String prepended to input parameter
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string QueryPrepend {
          get { return queryPrepend_ ?? QueryPrependDefaultValue; }
          set {
            queryPrepend_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "query_prepend" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasQueryPrepend {
          get { return queryPrepend_ != null; }
        }
        /// <summary>Clears the value of the "query_prepend" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearQueryPrepend() {
          queryPrepend_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as InputBoxInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(InputBoxInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Label, other.Label)) return false;
          if (QueryVerb != other.QueryVerb) return false;
          if (QueryPrepend != other.QueryPrepend) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (label_ != null) hash ^= Label.GetHashCode();
          if (HasQueryVerb) hash ^= QueryVerb.GetHashCode();
          if (HasQueryPrepend) hash ^= QueryPrepend.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (label_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Label);
          }
          if (HasQueryVerb) {
            output.WriteRawTag(18);
            output.WriteString(QueryVerb);
          }
          if (HasQueryPrepend) {
            output.WriteRawTag(26);
            output.WriteString(QueryPrepend);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (label_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Label);
          }
          if (HasQueryVerb) {
            output.WriteRawTag(18);
            output.WriteString(QueryVerb);
          }
          if (HasQueryPrepend) {
            output.WriteRawTag(26);
            output.WriteString(QueryPrepend);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (label_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Label);
          }
          if (HasQueryVerb) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(QueryVerb);
          }
          if (HasQueryPrepend) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(QueryPrepend);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(InputBoxInfo other) {
          if (other == null) {
            return;
          }
          if (other.label_ != null) {
            if (label_ == null) {
              Label = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            Label.MergeFrom(other.Label);
          }
          if (other.HasQueryVerb) {
            QueryVerb = other.QueryVerb;
          }
          if (other.HasQueryPrepend) {
            QueryPrepend = other.QueryPrepend;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (label_ == null) {
                  Label = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(Label);
                break;
              }
              case 18: {
                QueryVerb = input.ReadString();
                break;
              }
              case 26: {
                QueryPrepend = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (label_ == null) {
                  Label = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(Label);
                break;
              }
              case 18: {
                QueryVerb = input.ReadString();
                break;
              }
              case 26: {
                QueryPrepend = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Defines position and size of custom logos that will be fetched and shown
  /// by the client.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CobrandProto : pb::IMessage<CobrandProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CobrandProto> _parser = new pb::MessageParser<CobrandProto>(() => new CobrandProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CobrandProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CobrandProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CobrandProto(CobrandProto other) : this() {
      _hasBits0 = other._hasBits0;
      logoUrl_ = other.logoUrl_;
      xCoord_ = other.xCoord_ != null ? other.xCoord_.Clone() : null;
      yCoord_ = other.yCoord_ != null ? other.yCoord_.Clone() : null;
      tiePoint_ = other.tiePoint_;
      screenSize_ = other.screenSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CobrandProto Clone() {
      return new CobrandProto(this);
    }

    /// <summary>Field number for the "logo_url" field.</summary>
    public const int LogoUrlFieldNumber = 1;
    private readonly static string LogoUrlDefaultValue = "";

    private string logoUrl_;
    /// <summary>
    /// URL of image to use as logo. Can be remote or local. However, using local
    /// URLs depends on the installation of the client and should be used
    /// carefully.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LogoUrl {
      get { return logoUrl_ ?? LogoUrlDefaultValue; }
      set {
        logoUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "logo_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLogoUrl {
      get { return logoUrl_ != null; }
    }
    /// <summary>Clears the value of the "logo_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLogoUrl() {
      logoUrl_ = null;
    }

    /// <summary>Field number for the "x_coord" field.</summary>
    public const int XCoordFieldNumber = 2;
    private global::Keyhole.Dbroot.CobrandProto.Types.Coord xCoord_;
    /// <summary>
    /// Controls x position of reference overlay point (see tie_point)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.CobrandProto.Types.Coord XCoord {
      get { return xCoord_; }
      set {
        xCoord_ = value;
      }
    }

    /// <summary>Field number for the "y_coord" field.</summary>
    public const int YCoordFieldNumber = 3;
    private global::Keyhole.Dbroot.CobrandProto.Types.Coord yCoord_;
    /// <summary>
    /// Controls y position of reference overlay point (see tie_point)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.CobrandProto.Types.Coord YCoord {
      get { return yCoord_; }
      set {
        yCoord_ = value;
      }
    }

    /// <summary>Field number for the "tie_point" field.</summary>
    public const int TiePointFieldNumber = 4;
    private readonly static global::Keyhole.Dbroot.CobrandProto.Types.TiePoint TiePointDefaultValue = global::Keyhole.Dbroot.CobrandProto.Types.TiePoint.BottomLeft;

    private global::Keyhole.Dbroot.CobrandProto.Types.TiePoint tiePoint_;
    /// <summary>
    /// Controls reference point in overlay.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.CobrandProto.Types.TiePoint TiePoint {
      get { if ((_hasBits0 & 1) != 0) { return tiePoint_; } else { return TiePointDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tiePoint_ = value;
      }
    }
    /// <summary>Gets whether the "tie_point" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTiePoint {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tie_point" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTiePoint() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "screen_size" field.</summary>
    public const int ScreenSizeFieldNumber = 5;
    private readonly static double ScreenSizeDefaultValue = 0D;

    private double screenSize_;
    /// <summary>
    /// If specified and strictly positive but &lt;= 1.0, makes logo scalable with
    /// screen by forcing its width to occupy a fixed fraction of the screeen.
    /// For instance, a value of .25 makes the given logo occupy 25% of the screen.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ScreenSize {
      get { if ((_hasBits0 & 2) != 0) { return screenSize_; } else { return ScreenSizeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        screenSize_ = value;
      }
    }
    /// <summary>Gets whether the "screen_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScreenSize {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "screen_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScreenSize() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CobrandProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CobrandProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LogoUrl != other.LogoUrl) return false;
      if (!object.Equals(XCoord, other.XCoord)) return false;
      if (!object.Equals(YCoord, other.YCoord)) return false;
      if (TiePoint != other.TiePoint) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ScreenSize, other.ScreenSize)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLogoUrl) hash ^= LogoUrl.GetHashCode();
      if (xCoord_ != null) hash ^= XCoord.GetHashCode();
      if (yCoord_ != null) hash ^= YCoord.GetHashCode();
      if (HasTiePoint) hash ^= TiePoint.GetHashCode();
      if (HasScreenSize) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ScreenSize);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLogoUrl) {
        output.WriteRawTag(10);
        output.WriteString(LogoUrl);
      }
      if (xCoord_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(XCoord);
      }
      if (yCoord_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(YCoord);
      }
      if (HasTiePoint) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TiePoint);
      }
      if (HasScreenSize) {
        output.WriteRawTag(41);
        output.WriteDouble(ScreenSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLogoUrl) {
        output.WriteRawTag(10);
        output.WriteString(LogoUrl);
      }
      if (xCoord_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(XCoord);
      }
      if (yCoord_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(YCoord);
      }
      if (HasTiePoint) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TiePoint);
      }
      if (HasScreenSize) {
        output.WriteRawTag(41);
        output.WriteDouble(ScreenSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLogoUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogoUrl);
      }
      if (xCoord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XCoord);
      }
      if (yCoord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(YCoord);
      }
      if (HasTiePoint) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TiePoint);
      }
      if (HasScreenSize) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CobrandProto other) {
      if (other == null) {
        return;
      }
      if (other.HasLogoUrl) {
        LogoUrl = other.LogoUrl;
      }
      if (other.xCoord_ != null) {
        if (xCoord_ == null) {
          XCoord = new global::Keyhole.Dbroot.CobrandProto.Types.Coord();
        }
        XCoord.MergeFrom(other.XCoord);
      }
      if (other.yCoord_ != null) {
        if (yCoord_ == null) {
          YCoord = new global::Keyhole.Dbroot.CobrandProto.Types.Coord();
        }
        YCoord.MergeFrom(other.YCoord);
      }
      if (other.HasTiePoint) {
        TiePoint = other.TiePoint;
      }
      if (other.HasScreenSize) {
        ScreenSize = other.ScreenSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LogoUrl = input.ReadString();
            break;
          }
          case 18: {
            if (xCoord_ == null) {
              XCoord = new global::Keyhole.Dbroot.CobrandProto.Types.Coord();
            }
            input.ReadMessage(XCoord);
            break;
          }
          case 26: {
            if (yCoord_ == null) {
              YCoord = new global::Keyhole.Dbroot.CobrandProto.Types.Coord();
            }
            input.ReadMessage(YCoord);
            break;
          }
          case 32: {
            TiePoint = (global::Keyhole.Dbroot.CobrandProto.Types.TiePoint) input.ReadEnum();
            break;
          }
          case 41: {
            ScreenSize = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LogoUrl = input.ReadString();
            break;
          }
          case 18: {
            if (xCoord_ == null) {
              XCoord = new global::Keyhole.Dbroot.CobrandProto.Types.Coord();
            }
            input.ReadMessage(XCoord);
            break;
          }
          case 26: {
            if (yCoord_ == null) {
              YCoord = new global::Keyhole.Dbroot.CobrandProto.Types.Coord();
            }
            input.ReadMessage(YCoord);
            break;
          }
          case 32: {
            TiePoint = (global::Keyhole.Dbroot.CobrandProto.Types.TiePoint) input.ReadEnum();
            break;
          }
          case 41: {
            ScreenSize = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CobrandProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum TiePoint {
        [pbr::OriginalName("TOP_LEFT")] TopLeft = 0,
        [pbr::OriginalName("TOP_CENTER")] TopCenter = 1,
        [pbr::OriginalName("TOP_RIGHT")] TopRight = 2,
        [pbr::OriginalName("MID_LEFT")] MidLeft = 3,
        [pbr::OriginalName("MID_CENTER")] MidCenter = 4,
        [pbr::OriginalName("MID_RIGHT")] MidRight = 5,
        [pbr::OriginalName("BOTTOM_LEFT")] BottomLeft = 6,
        [pbr::OriginalName("BOTTOM_CENTER")] BottomCenter = 7,
        [pbr::OriginalName("BOTTOM_RIGHT")] BottomRight = 8,
      }

      /// <summary>
      /// Inner message that allows specifying a coordinate.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class Coord : pb::IMessage<Coord>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Coord> _parser = new pb::MessageParser<Coord>(() => new Coord());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Coord> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Keyhole.Dbroot.CobrandProto.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Coord() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Coord(Coord other) : this() {
          _hasBits0 = other._hasBits0;
          value_ = other.value_;
          isRelative_ = other.isRelative_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Coord Clone() {
          return new Coord(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private readonly static double ValueDefaultValue = 0D;

        private double value_;
        /// <summary>
        /// Coordinate value. Interpretation depends on is_relative (absolute or
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Value {
          get { if ((_hasBits0 & 1) != 0) { return value_; } else { return ValueDefaultValue; } }
          set {
            _hasBits0 |= 1;
            value_ = value;
          }
        }
        /// <summary>Gets whether the "value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasValue {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearValue() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "is_relative" field.</summary>
        public const int IsRelativeFieldNumber = 2;
        private readonly static bool IsRelativeDefaultValue = false;

        private bool isRelative_;
        /// <summary>
        /// If true, the coordinate is relative to the screen.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool IsRelative {
          get { if ((_hasBits0 & 2) != 0) { return isRelative_; } else { return IsRelativeDefaultValue; } }
          set {
            _hasBits0 |= 2;
            isRelative_ = value;
          }
        }
        /// <summary>Gets whether the "is_relative" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasIsRelative {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "is_relative" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearIsRelative() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Coord);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Coord other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
          if (IsRelative != other.IsRelative) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
          if (HasIsRelative) hash ^= IsRelative.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasValue) {
            output.WriteRawTag(9);
            output.WriteDouble(Value);
          }
          if (HasIsRelative) {
            output.WriteRawTag(16);
            output.WriteBool(IsRelative);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasValue) {
            output.WriteRawTag(9);
            output.WriteDouble(Value);
          }
          if (HasIsRelative) {
            output.WriteRawTag(16);
            output.WriteBool(IsRelative);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasValue) {
            size += 1 + 8;
          }
          if (HasIsRelative) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Coord other) {
          if (other == null) {
            return;
          }
          if (other.HasValue) {
            Value = other.Value;
          }
          if (other.HasIsRelative) {
            IsRelative = other.IsRelative;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Value = input.ReadDouble();
                break;
              }
              case 16: {
                IsRelative = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Value = input.ReadDouble();
                break;
              }
              case 16: {
                IsRelative = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Describes a database the client can connect to when connected to this server.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DatabaseDescriptionProto : pb::IMessage<DatabaseDescriptionProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DatabaseDescriptionProto> _parser = new pb::MessageParser<DatabaseDescriptionProto>(() => new DatabaseDescriptionProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DatabaseDescriptionProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DatabaseDescriptionProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DatabaseDescriptionProto(DatabaseDescriptionProto other) : this() {
      databaseName_ = other.databaseName_ != null ? other.databaseName_.Clone() : null;
      databaseUrl_ = other.databaseUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DatabaseDescriptionProto Clone() {
      return new DatabaseDescriptionProto(this);
    }

    /// <summary>Field number for the "database_name" field.</summary>
    public const int DatabaseNameFieldNumber = 1;
    private global::Keyhole.Dbroot.StringIdOrValueProto databaseName_;
    /// <summary>
    /// Human-readable name of database (such as "Primary Database" or "Digital
    /// Globe Database")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto DatabaseName {
      get { return databaseName_; }
      set {
        databaseName_ = value;
      }
    }

    /// <summary>Field number for the "database_url" field.</summary>
    public const int DatabaseUrlFieldNumber = 2;
    private readonly static string DatabaseUrlDefaultValue = "";

    private string databaseUrl_;
    /// <summary>
    /// URL of server. This can include a path and query, and must be a
    /// well-formed, absolute URL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DatabaseUrl {
      get { return databaseUrl_ ?? DatabaseUrlDefaultValue; }
      set {
        databaseUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "database_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDatabaseUrl {
      get { return databaseUrl_ != null; }
    }
    /// <summary>Clears the value of the "database_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDatabaseUrl() {
      databaseUrl_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DatabaseDescriptionProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DatabaseDescriptionProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DatabaseName, other.DatabaseName)) return false;
      if (DatabaseUrl != other.DatabaseUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (databaseName_ != null) hash ^= DatabaseName.GetHashCode();
      if (HasDatabaseUrl) hash ^= DatabaseUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (databaseName_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DatabaseName);
      }
      if (HasDatabaseUrl) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (databaseName_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DatabaseName);
      }
      if (HasDatabaseUrl) {
        output.WriteRawTag(18);
        output.WriteString(DatabaseUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (databaseName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DatabaseName);
      }
      if (HasDatabaseUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DatabaseDescriptionProto other) {
      if (other == null) {
        return;
      }
      if (other.databaseName_ != null) {
        if (databaseName_ == null) {
          DatabaseName = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        DatabaseName.MergeFrom(other.DatabaseName);
      }
      if (other.HasDatabaseUrl) {
        DatabaseUrl = other.DatabaseUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (databaseName_ == null) {
              DatabaseName = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(DatabaseName);
            break;
          }
          case 18: {
            DatabaseUrl = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (databaseName_ == null) {
              DatabaseName = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(DatabaseName);
            break;
          }
          case 18: {
            DatabaseUrl = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Name/value pair that maps a script name to an alchemy script.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ConfigScriptProto : pb::IMessage<ConfigScriptProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConfigScriptProto> _parser = new pb::MessageParser<ConfigScriptProto>(() => new ConfigScriptProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ConfigScriptProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConfigScriptProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConfigScriptProto(ConfigScriptProto other) : this() {
      scriptName_ = other.scriptName_;
      scriptData_ = other.scriptData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConfigScriptProto Clone() {
      return new ConfigScriptProto(this);
    }

    /// <summary>Field number for the "script_name" field.</summary>
    public const int ScriptNameFieldNumber = 1;
    private readonly static string ScriptNameDefaultValue = "";

    private string scriptName_;
    /// <summary>
    /// Name of the script that can be used in NestedFeatureProto (see
    /// client_config_script_name).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ScriptName {
      get { return scriptName_ ?? ScriptNameDefaultValue; }
      set {
        scriptName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "script_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScriptName {
      get { return scriptName_ != null; }
    }
    /// <summary>Clears the value of the "script_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScriptName() {
      scriptName_ = null;
    }

    /// <summary>Field number for the "script_data" field.</summary>
    public const int ScriptDataFieldNumber = 2;
    private readonly static string ScriptDataDefaultValue = "";

    private string scriptData_;
    /// <summary>
    /// Contents of the script. This must be a valid Alchemy script.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ScriptData {
      get { return scriptData_ ?? ScriptDataDefaultValue; }
      set {
        scriptData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "script_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScriptData {
      get { return scriptData_ != null; }
    }
    /// <summary>Clears the value of the "script_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScriptData() {
      scriptData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ConfigScriptProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ConfigScriptProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScriptName != other.ScriptName) return false;
      if (ScriptData != other.ScriptData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasScriptName) hash ^= ScriptName.GetHashCode();
      if (HasScriptData) hash ^= ScriptData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasScriptName) {
        output.WriteRawTag(10);
        output.WriteString(ScriptName);
      }
      if (HasScriptData) {
        output.WriteRawTag(18);
        output.WriteString(ScriptData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasScriptName) {
        output.WriteRawTag(10);
        output.WriteString(ScriptName);
      }
      if (HasScriptData) {
        output.WriteRawTag(18);
        output.WriteString(ScriptData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasScriptName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScriptName);
      }
      if (HasScriptData) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScriptData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ConfigScriptProto other) {
      if (other == null) {
        return;
      }
      if (other.HasScriptName) {
        ScriptName = other.ScriptName;
      }
      if (other.HasScriptData) {
        ScriptData = other.ScriptData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ScriptName = input.ReadString();
            break;
          }
          case 18: {
            ScriptData = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ScriptName = input.ReadString();
            break;
          }
          case 18: {
            ScriptData = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Setting to control the swoop feature in Google Earth. We can use it to reduce
  /// the amount of tilt generated by swooping and thefore reduce overall
  /// traffic (tilted views cause more tiles to be downloaded than non-tilted
  /// ones).
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SwoopParamsProto : pb::IMessage<SwoopParamsProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SwoopParamsProto> _parser = new pb::MessageParser<SwoopParamsProto>(() => new SwoopParamsProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SwoopParamsProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SwoopParamsProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SwoopParamsProto(SwoopParamsProto other) : this() {
      _hasBits0 = other._hasBits0;
      startDistInMeters_ = other.startDistInMeters_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SwoopParamsProto Clone() {
      return new SwoopParamsProto(this);
    }

    /// <summary>Field number for the "start_dist_in_meters" field.</summary>
    public const int StartDistInMetersFieldNumber = 1;
    private readonly static double StartDistInMetersDefaultValue = 0D;

    private double startDistInMeters_;
    /// <summary>
    /// Controls how far from a target swooping should start.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StartDistInMeters {
      get { if ((_hasBits0 & 1) != 0) { return startDistInMeters_; } else { return StartDistInMetersDefaultValue; } }
      set {
        _hasBits0 |= 1;
        startDistInMeters_ = value;
      }
    }
    /// <summary>Gets whether the "start_dist_in_meters" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStartDistInMeters {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "start_dist_in_meters" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStartDistInMeters() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SwoopParamsProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SwoopParamsProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StartDistInMeters, other.StartDistInMeters)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStartDistInMeters) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StartDistInMeters);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStartDistInMeters) {
        output.WriteRawTag(9);
        output.WriteDouble(StartDistInMeters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStartDistInMeters) {
        output.WriteRawTag(9);
        output.WriteDouble(StartDistInMeters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasStartDistInMeters) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SwoopParamsProto other) {
      if (other == null) {
        return;
      }
      if (other.HasStartDistInMeters) {
        StartDistInMeters = other.StartDistInMeters;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            StartDistInMeters = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            StartDistInMeters = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Group of settings that can describe a BBS server where user can post their
  /// data or report errors in our imagery or data.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PostingServerProto : pb::IMessage<PostingServerProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PostingServerProto> _parser = new pb::MessageParser<PostingServerProto>(() => new PostingServerProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PostingServerProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PostingServerProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PostingServerProto(PostingServerProto other) : this() {
      name_ = other.name_ != null ? other.name_.Clone() : null;
      baseUrl_ = other.baseUrl_ != null ? other.baseUrl_.Clone() : null;
      postWizardPath_ = other.postWizardPath_ != null ? other.postWizardPath_.Clone() : null;
      fileSubmitPath_ = other.fileSubmitPath_ != null ? other.fileSubmitPath_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PostingServerProto Clone() {
      return new PostingServerProto(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private global::Keyhole.Dbroot.StringIdOrValueProto name_;
    /// <summary>
    /// Name that will be displayed in context menu to user. Must be translated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "base_url" field.</summary>
    public const int BaseUrlFieldNumber = 2;
    private global::Keyhole.Dbroot.StringIdOrValueProto baseUrl_;
    /// <summary>
    /// URL of the server including protocol, domain and port. Can be translated
    /// if we use different servers for different languages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto BaseUrl {
      get { return baseUrl_; }
      set {
        baseUrl_ = value;
      }
    }

    /// <summary>Field number for the "post_wizard_path" field.</summary>
    public const int PostWizardPathFieldNumber = 3;
    private global::Keyhole.Dbroot.StringIdOrValueProto postWizardPath_;
    /// <summary>
    /// Path on server where wizard can be found.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto PostWizardPath {
      get { return postWizardPath_; }
      set {
        postWizardPath_ = value;
      }
    }

    /// <summary>Field number for the "file_submit_path" field.</summary>
    public const int FileSubmitPathFieldNumber = 4;
    private global::Keyhole.Dbroot.StringIdOrValueProto fileSubmitPath_;
    /// <summary>
    /// Path on server where files can be submitted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto FileSubmitPath {
      get { return fileSubmitPath_; }
      set {
        fileSubmitPath_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PostingServerProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PostingServerProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Name, other.Name)) return false;
      if (!object.Equals(BaseUrl, other.BaseUrl)) return false;
      if (!object.Equals(PostWizardPath, other.PostWizardPath)) return false;
      if (!object.Equals(FileSubmitPath, other.FileSubmitPath)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (name_ != null) hash ^= Name.GetHashCode();
      if (baseUrl_ != null) hash ^= BaseUrl.GetHashCode();
      if (postWizardPath_ != null) hash ^= PostWizardPath.GetHashCode();
      if (fileSubmitPath_ != null) hash ^= FileSubmitPath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (name_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Name);
      }
      if (baseUrl_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BaseUrl);
      }
      if (postWizardPath_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PostWizardPath);
      }
      if (fileSubmitPath_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FileSubmitPath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (name_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Name);
      }
      if (baseUrl_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BaseUrl);
      }
      if (postWizardPath_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PostWizardPath);
      }
      if (fileSubmitPath_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FileSubmitPath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      if (baseUrl_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseUrl);
      }
      if (postWizardPath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PostWizardPath);
      }
      if (fileSubmitPath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FileSubmitPath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PostingServerProto other) {
      if (other == null) {
        return;
      }
      if (other.name_ != null) {
        if (name_ == null) {
          Name = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        Name.MergeFrom(other.Name);
      }
      if (other.baseUrl_ != null) {
        if (baseUrl_ == null) {
          BaseUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        BaseUrl.MergeFrom(other.BaseUrl);
      }
      if (other.postWizardPath_ != null) {
        if (postWizardPath_ == null) {
          PostWizardPath = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        PostWizardPath.MergeFrom(other.PostWizardPath);
      }
      if (other.fileSubmitPath_ != null) {
        if (fileSubmitPath_ == null) {
          FileSubmitPath = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        FileSubmitPath.MergeFrom(other.FileSubmitPath);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (name_ == null) {
              Name = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(Name);
            break;
          }
          case 18: {
            if (baseUrl_ == null) {
              BaseUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(BaseUrl);
            break;
          }
          case 26: {
            if (postWizardPath_ == null) {
              PostWizardPath = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(PostWizardPath);
            break;
          }
          case 34: {
            if (fileSubmitPath_ == null) {
              FileSubmitPath = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(FileSubmitPath);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (name_ == null) {
              Name = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(Name);
            break;
          }
          case 18: {
            if (baseUrl_ == null) {
              BaseUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(BaseUrl);
            break;
          }
          case 26: {
            if (postWizardPath_ == null) {
              PostWizardPath = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(PostWizardPath);
            break;
          }
          case 34: {
            if (fileSubmitPath_ == null) {
              FileSubmitPath = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(FileSubmitPath);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Describes a database for another planet or satellite (e.g. Mars, Moon)
  /// accessible from this database (e.g. Earth).
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PlanetaryDatabaseProto : pb::IMessage<PlanetaryDatabaseProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlanetaryDatabaseProto> _parser = new pb::MessageParser<PlanetaryDatabaseProto>(() => new PlanetaryDatabaseProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlanetaryDatabaseProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlanetaryDatabaseProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlanetaryDatabaseProto(PlanetaryDatabaseProto other) : this() {
      url_ = other.url_ != null ? other.url_.Clone() : null;
      name_ = other.name_ != null ? other.name_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlanetaryDatabaseProto Clone() {
      return new PlanetaryDatabaseProto(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private global::Keyhole.Dbroot.StringIdOrValueProto url_;
    /// <summary>
    /// Full URL of database that will be used as base URL to request data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto Url {
      get { return url_; }
      set {
        url_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private global::Keyhole.Dbroot.StringIdOrValueProto name_;
    /// <summary>
    /// Translated name of database - will be displayed to the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlanetaryDatabaseProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlanetaryDatabaseProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Url, other.Url)) return false;
      if (!object.Equals(Name, other.Name)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (url_ != null) hash ^= Url.GetHashCode();
      if (name_ != null) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (url_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Url);
      }
      if (name_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (url_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Url);
      }
      if (name_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (url_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Url);
      }
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlanetaryDatabaseProto other) {
      if (other == null) {
        return;
      }
      if (other.url_ != null) {
        if (url_ == null) {
          Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        Url.MergeFrom(other.Url);
      }
      if (other.name_ != null) {
        if (name_ == null) {
          Name = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        Name.MergeFrom(other.Name);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (url_ == null) {
              Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(Url);
            break;
          }
          case 18: {
            if (name_ == null) {
              Name = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(Name);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (url_ == null) {
              Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(Url);
            break;
          }
          case 18: {
            if (name_ == null) {
              Name = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(Name);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Group of settings to configure logging server used by Google Earth clients
  /// that connect to this database.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LogServerProto : pb::IMessage<LogServerProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LogServerProto> _parser = new pb::MessageParser<LogServerProto>(() => new LogServerProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LogServerProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LogServerProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LogServerProto(LogServerProto other) : this() {
      _hasBits0 = other._hasBits0;
      url_ = other.url_ != null ? other.url_.Clone() : null;
      enable_ = other.enable_;
      throttlingFactor_ = other.throttlingFactor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LogServerProto Clone() {
      return new LogServerProto(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private global::Keyhole.Dbroot.StringIdOrValueProto url_;
    /// <summary>
    /// Full url of logging server. Can be translated or specified as a string.
    /// The default value in Google Earth 5.1 is
    /// http://www.google.com/tbproxy/usagestats?sourceid=GoogleEarth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto Url {
      get { return url_; }
      set {
        url_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 2;
    private readonly static bool EnableDefaultValue = false;

    private bool enable_;
    /// <summary>
    /// Specifies if logging should be performed. By default logging is turned off.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Enable {
      get { if ((_hasBits0 & 1) != 0) { return enable_; } else { return EnableDefaultValue; } }
      set {
        _hasBits0 |= 1;
        enable_ = value;
      }
    }
    /// <summary>Gets whether the "enable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnable {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "enable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnable() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "throttling_factor" field.</summary>
    public const int ThrottlingFactorFieldNumber = 3;
    private readonly static int ThrottlingFactorDefaultValue = 1;

    private int throttlingFactor_;
    /// <summary>
    /// Controls log throttling - a fraction of 1.0 / throttling_factor() sessions
    /// will be logged. A value of 1 means no throttling, while a value of 100
    /// causes only 1% of sessions to log data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ThrottlingFactor {
      get { if ((_hasBits0 & 2) != 0) { return throttlingFactor_; } else { return ThrottlingFactorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        throttlingFactor_ = value;
      }
    }
    /// <summary>Gets whether the "throttling_factor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasThrottlingFactor {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "throttling_factor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearThrottlingFactor() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LogServerProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LogServerProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Url, other.Url)) return false;
      if (Enable != other.Enable) return false;
      if (ThrottlingFactor != other.ThrottlingFactor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (url_ != null) hash ^= Url.GetHashCode();
      if (HasEnable) hash ^= Enable.GetHashCode();
      if (HasThrottlingFactor) hash ^= ThrottlingFactor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (url_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Url);
      }
      if (HasEnable) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (HasThrottlingFactor) {
        output.WriteRawTag(24);
        output.WriteInt32(ThrottlingFactor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (url_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Url);
      }
      if (HasEnable) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (HasThrottlingFactor) {
        output.WriteRawTag(24);
        output.WriteInt32(ThrottlingFactor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (url_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Url);
      }
      if (HasEnable) {
        size += 1 + 1;
      }
      if (HasThrottlingFactor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThrottlingFactor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LogServerProto other) {
      if (other == null) {
        return;
      }
      if (other.url_ != null) {
        if (url_ == null) {
          Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        Url.MergeFrom(other.Url);
      }
      if (other.HasEnable) {
        Enable = other.Enable;
      }
      if (other.HasThrottlingFactor) {
        ThrottlingFactor = other.ThrottlingFactor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (url_ == null) {
              Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(Url);
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 24: {
            ThrottlingFactor = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (url_ == null) {
              Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(Url);
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 24: {
            ThrottlingFactor = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class EndSnippetProto : pb::IMessage<EndSnippetProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EndSnippetProto> _parser = new pb::MessageParser<EndSnippetProto>(() => new EndSnippetProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EndSnippetProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EndSnippetProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EndSnippetProto(EndSnippetProto other) : this() {
      _hasBits0 = other._hasBits0;
      model_ = other.model_ != null ? other.model_.Clone() : null;
      authServerUrl_ = other.authServerUrl_ != null ? other.authServerUrl_.Clone() : null;
      disableAuthentication_ = other.disableAuthentication_;
      mfeDomains_ = other.mfeDomains_.Clone();
      mfeLangParam_ = other.mfeLangParam_;
      adsUrlPatterns_ = other.adsUrlPatterns_;
      reverseGeocoderUrl_ = other.reverseGeocoderUrl_ != null ? other.reverseGeocoderUrl_.Clone() : null;
      reverseGeocoderProtocolVersion_ = other.reverseGeocoderProtocolVersion_;
      skyDatabaseIsAvailable_ = other.skyDatabaseIsAvailable_;
      skyDatabaseUrl_ = other.skyDatabaseUrl_ != null ? other.skyDatabaseUrl_.Clone() : null;
      defaultWebPageIntlUrl_ = other.defaultWebPageIntlUrl_ != null ? other.defaultWebPageIntlUrl_.Clone() : null;
      numStartUpTips_ = other.numStartUpTips_;
      startUpTipsUrl_ = other.startUpTipsUrl_ != null ? other.startUpTipsUrl_.Clone() : null;
      numProStartUpTips_ = other.numProStartUpTips_;
      proStartUpTipsUrl_ = other.proStartUpTipsUrl_ != null ? other.proStartUpTipsUrl_.Clone() : null;
      startupTipsIntlUrl_ = other.startupTipsIntlUrl_ != null ? other.startupTipsIntlUrl_.Clone() : null;
      userGuideIntlUrl_ = other.userGuideIntlUrl_ != null ? other.userGuideIntlUrl_.Clone() : null;
      supportCenterIntlUrl_ = other.supportCenterIntlUrl_ != null ? other.supportCenterIntlUrl_.Clone() : null;
      businessListingIntlUrl_ = other.businessListingIntlUrl_ != null ? other.businessListingIntlUrl_.Clone() : null;
      supportAnswerIntlUrl_ = other.supportAnswerIntlUrl_ != null ? other.supportAnswerIntlUrl_.Clone() : null;
      supportTopicIntlUrl_ = other.supportTopicIntlUrl_ != null ? other.supportTopicIntlUrl_.Clone() : null;
      supportRequestIntlUrl_ = other.supportRequestIntlUrl_ != null ? other.supportRequestIntlUrl_.Clone() : null;
      earthIntlUrl_ = other.earthIntlUrl_ != null ? other.earthIntlUrl_.Clone() : null;
      addContentUrl_ = other.addContentUrl_ != null ? other.addContentUrl_.Clone() : null;
      sketchupNotInstalledUrl_ = other.sketchupNotInstalledUrl_ != null ? other.sketchupNotInstalledUrl_.Clone() : null;
      sketchupErrorUrl_ = other.sketchupErrorUrl_ != null ? other.sketchupErrorUrl_.Clone() : null;
      freeLicenseUrl_ = other.freeLicenseUrl_ != null ? other.freeLicenseUrl_.Clone() : null;
      proLicenseUrl_ = other.proLicenseUrl_ != null ? other.proLicenseUrl_.Clone() : null;
      tutorialUrl_ = other.tutorialUrl_ != null ? other.tutorialUrl_.Clone() : null;
      keyboardShortcutsUrl_ = other.keyboardShortcutsUrl_ != null ? other.keyboardShortcutsUrl_.Clone() : null;
      releaseNotesUrl_ = other.releaseNotesUrl_ != null ? other.releaseNotesUrl_.Clone() : null;
      hideUserData_ = other.hideUserData_;
      useGeLogo_ = other.useGeLogo_;
      dioramaDescriptionUrlBase_ = other.dioramaDescriptionUrlBase_ != null ? other.dioramaDescriptionUrlBase_.Clone() : null;
      dioramaDefaultColor_ = other.dioramaDefaultColor_;
      dioramaBlacklistUrl_ = other.dioramaBlacklistUrl_ != null ? other.dioramaBlacklistUrl_.Clone() : null;
      clientOptions_ = other.clientOptions_ != null ? other.clientOptions_.Clone() : null;
      fetchingOptions_ = other.fetchingOptions_ != null ? other.fetchingOptions_.Clone() : null;
      timeMachineOptions_ = other.timeMachineOptions_ != null ? other.timeMachineOptions_.Clone() : null;
      csiOptions_ = other.csiOptions_ != null ? other.csiOptions_.Clone() : null;
      searchTab_ = other.searchTab_.Clone();
      cobrandInfo_ = other.cobrandInfo_.Clone();
      validDatabase_ = other.validDatabase_.Clone();
      configScript_ = other.configScript_.Clone();
      deauthServerUrl_ = other.deauthServerUrl_ != null ? other.deauthServerUrl_.Clone() : null;
      swoopParameters_ = other.swoopParameters_ != null ? other.swoopParameters_.Clone() : null;
      bbsServerInfo_ = other.bbsServerInfo_ != null ? other.bbsServerInfo_.Clone() : null;
      dataErrorServerInfo_ = other.dataErrorServerInfo_ != null ? other.dataErrorServerInfo_.Clone() : null;
      planetaryDatabase_ = other.planetaryDatabase_.Clone();
      logServer_ = other.logServer_ != null ? other.logServer_.Clone() : null;
      autopiaOptions_ = other.autopiaOptions_ != null ? other.autopiaOptions_.Clone() : null;
      searchConfig_ = other.searchConfig_ != null ? other.searchConfig_.Clone() : null;
      searchInfo_ = other.searchInfo_ != null ? other.searchInfo_.Clone() : null;
      elevationServiceBaseUrl_ = other.elevationServiceBaseUrl_;
      elevationProfileQueryDelay_ = other.elevationProfileQueryDelay_;
      proUpgradeUrl_ = other.proUpgradeUrl_ != null ? other.proUpgradeUrl_.Clone() : null;
      earthCommunityUrl_ = other.earthCommunityUrl_ != null ? other.earthCommunityUrl_.Clone() : null;
      googleMapsUrl_ = other.googleMapsUrl_ != null ? other.googleMapsUrl_.Clone() : null;
      sharingUrl_ = other.sharingUrl_ != null ? other.sharingUrl_.Clone() : null;
      privacyPolicyUrl_ = other.privacyPolicyUrl_ != null ? other.privacyPolicyUrl_.Clone() : null;
      doGplusUserCheck_ = other.doGplusUserCheck_;
      rocktreeDataProto_ = other.rocktreeDataProto_ != null ? other.rocktreeDataProto_.Clone() : null;
      filmstripConfig_ = other.filmstripConfig_.Clone();
      showSigninButton_ = other.showSigninButton_;
      proMeasureUpsellUrl_ = other.proMeasureUpsellUrl_ != null ? other.proMeasureUpsellUrl_.Clone() : null;
      proPrintUpsellUrl_ = other.proPrintUpsellUrl_ != null ? other.proPrintUpsellUrl_.Clone() : null;
      starDataProto_ = other.starDataProto_ != null ? other.starDataProto_.Clone() : null;
      feedbackUrl_ = other.feedbackUrl_ != null ? other.feedbackUrl_.Clone() : null;
      oauth2LoginUrl_ = other.oauth2LoginUrl_ != null ? other.oauth2LoginUrl_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EndSnippetProto Clone() {
      return new EndSnippetProto(this);
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 1;
    private global::Keyhole.Dbroot.PlanetModelProto model_;
    /// <summary>
    /// Options that describe planet shape.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.PlanetModelProto Model {
      get { return model_; }
      set {
        model_ = value;
      }
    }

    /// <summary>Field number for the "auth_server_url" field.</summary>
    public const int AuthServerUrlFieldNumber = 2;
    private global::Keyhole.Dbroot.StringIdOrValueProto authServerUrl_;
    /// <summary>
    /// URL of authentication server for paying customers.
    /// e.g. "auth.keyhole.com". This can actually be a URL and contain a port,
    /// a path, and a protocol (such as https://server.company.com:8080/auth)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto AuthServerUrl {
      get { return authServerUrl_; }
      set {
        authServerUrl_ = value;
      }
    }

    /// <summary>Field number for the "disable_authentication" field.</summary>
    public const int DisableAuthenticationFieldNumber = 3;
    private readonly static bool DisableAuthenticationDefaultValue = false;

    private bool disableAuthentication_;
    /// <summary>
    /// Flag that can be used by entreprise customers - indicates that this
    /// database does not require session cookie-based authentication. Entreprise
    /// databases are typically protected with LDAP over HTTP or HTTPS.  Be *very*
    /// careful to never set this to true for kh.google.com or any other database
    /// we control unless you know for a fact it's the right thing to do.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DisableAuthentication {
      get { if ((_hasBits0 & 1) != 0) { return disableAuthentication_; } else { return DisableAuthenticationDefaultValue; } }
      set {
        _hasBits0 |= 1;
        disableAuthentication_ = value;
      }
    }
    /// <summary>Gets whether the "disable_authentication" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDisableAuthentication {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "disable_authentication" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDisableAuthentication() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "mfe_domains" field.</summary>
    public const int MfeDomainsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.MfeDomainFeaturesProto> _repeated_mfeDomains_codec
        = pb::FieldCodec.ForMessage(34, global::Keyhole.Dbroot.MfeDomainFeaturesProto.Parser);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.MfeDomainFeaturesProto> mfeDomains_ = new pbc::RepeatedField<global::Keyhole.Dbroot.MfeDomainFeaturesProto>();
    /// <summary>
    /// Deprecated in Earth 6.1 and higher in favor of search_config.
    /// For each known country, lists maps domains to use and associated enabled
    /// features. For instance, some countries might be launched without
    /// localsearch support.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.MfeDomainFeaturesProto> MfeDomains {
      get { return mfeDomains_; }
    }

    /// <summary>Field number for the "mfe_lang_param" field.</summary>
    public const int MfeLangParamFieldNumber = 5;
    private readonly static string MfeLangParamDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("aGw9JFtobF0="), 0, 8);

    private string mfeLangParam_;
    /// <summary>
    /// Deprecated in Earth 6.1 and higher.
    /// Parameter(s) that should sent with each request to MFE.
    /// '[' or ']' does not seem to be valid in default values, it causes
    /// errors when compiling the code. 0x5B and 0xx5D are their respective
    /// hex ascii codes.
    /// Note: it is valid to specifiy multiple parameters, for instance:
    /// end_snippet->set_mfe_lang_param("hl=$[hl]&amp;gl=$[gl]");
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MfeLangParam {
      get { return mfeLangParam_ ?? MfeLangParamDefaultValue; }
      set {
        mfeLangParam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mfe_lang_param" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMfeLangParam {
      get { return mfeLangParam_ != null; }
    }
    /// <summary>Clears the value of the "mfe_lang_param" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMfeLangParam() {
      mfeLangParam_ = null;
    }

    /// <summary>Field number for the "ads_url_patterns" field.</summary>
    public const int AdsUrlPatternsFieldNumber = 6;
    private readonly static string AdsUrlPatternsDefaultValue = "";

    private string adsUrlPatterns_;
    /// <summary>
    /// List of space-separated strings treated as glob patterns that describe
    /// which URLs should be treated as ads URLs and never be fetched by the
    /// client. The default value in the client is:
    /// "http://*doubleclick.net* http://*googlesyndication.com* "
    /// "http://*google.com/aclk* http://*googleadservices.com* */pagead/*"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AdsUrlPatterns {
      get { return adsUrlPatterns_ ?? AdsUrlPatternsDefaultValue; }
      set {
        adsUrlPatterns_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ads_url_patterns" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAdsUrlPatterns {
      get { return adsUrlPatterns_ != null; }
    }
    /// <summary>Clears the value of the "ads_url_patterns" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAdsUrlPatterns() {
      adsUrlPatterns_ = null;
    }

    /// <summary>Field number for the "reverse_geocoder_url" field.</summary>
    public const int ReverseGeocoderUrlFieldNumber = 7;
    private global::Keyhole.Dbroot.StringIdOrValueProto reverseGeocoderUrl_;
    /// <summary>
    /// Reverse geocoder server URL
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto ReverseGeocoderUrl {
      get { return reverseGeocoderUrl_; }
      set {
        reverseGeocoderUrl_ = value;
      }
    }

    /// <summary>Field number for the "reverse_geocoder_protocol_version" field.</summary>
    public const int ReverseGeocoderProtocolVersionFieldNumber = 8;
    private readonly static int ReverseGeocoderProtocolVersionDefaultValue = 3;

    private int reverseGeocoderProtocolVersion_;
    /// <summary>
    /// Reverse geocoder protocol version. Default is 3 which is the
    /// protocol supported by newer clients.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReverseGeocoderProtocolVersion {
      get { if ((_hasBits0 & 2) != 0) { return reverseGeocoderProtocolVersion_; } else { return ReverseGeocoderProtocolVersionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        reverseGeocoderProtocolVersion_ = value;
      }
    }
    /// <summary>Gets whether the "reverse_geocoder_protocol_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReverseGeocoderProtocolVersion {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "reverse_geocoder_protocol_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReverseGeocoderProtocolVersion() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "sky_database_is_available" field.</summary>
    public const int SkyDatabaseIsAvailableFieldNumber = 9;
    private readonly static bool SkyDatabaseIsAvailableDefaultValue = true;

    private bool skyDatabaseIsAvailable_;
    /// <summary>
    /// Whether or not sky database is present
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SkyDatabaseIsAvailable {
      get { if ((_hasBits0 & 4) != 0) { return skyDatabaseIsAvailable_; } else { return SkyDatabaseIsAvailableDefaultValue; } }
      set {
        _hasBits0 |= 4;
        skyDatabaseIsAvailable_ = value;
      }
    }
    /// <summary>Gets whether the "sky_database_is_available" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSkyDatabaseIsAvailable {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "sky_database_is_available" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSkyDatabaseIsAvailable() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "sky_database_url" field.</summary>
    public const int SkyDatabaseUrlFieldNumber = 10;
    private global::Keyhole.Dbroot.StringIdOrValueProto skyDatabaseUrl_;
    /// <summary>
    /// Location of sky database URL.
    /// e.g. "http://khmdb.google.com?db=sky"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto SkyDatabaseUrl {
      get { return skyDatabaseUrl_; }
      set {
        skyDatabaseUrl_ = value;
      }
    }

    /// <summary>Field number for the "default_web_page_intl_url" field.</summary>
    public const int DefaultWebPageIntlUrlFieldNumber = 11;
    private global::Keyhole.Dbroot.StringIdOrValueProto defaultWebPageIntlUrl_;
    /// <summary>
    /// Default location of web page.
    /// e.g. "http://www.google.com/intl/%1/";
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto DefaultWebPageIntlUrl {
      get { return defaultWebPageIntlUrl_; }
      set {
        defaultWebPageIntlUrl_ = value;
      }
    }

    /// <summary>Field number for the "num_start_up_tips" field.</summary>
    public const int NumStartUpTipsFieldNumber = 12;
    private readonly static int NumStartUpTipsDefaultValue = 17;

    private int numStartUpTips_;
    /// <summary>
    /// DEPRECATED as of version 7.0.
    /// Controls the number of start-up tip urls that the client will cycle
    /// through before repeating. This should be no greater than the number of
    /// startup tips available on the server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumStartUpTips {
      get { if ((_hasBits0 & 8) != 0) { return numStartUpTips_; } else { return NumStartUpTipsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        numStartUpTips_ = value;
      }
    }
    /// <summary>Gets whether the "num_start_up_tips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumStartUpTips {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "num_start_up_tips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumStartUpTips() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "start_up_tips_url" field.</summary>
    public const int StartUpTipsUrlFieldNumber = 13;
    private global::Keyhole.Dbroot.StringIdOrValueProto startUpTipsUrl_;
    /// <summary>
    /// DEPRECATED as of version 7.0.
    /// Where to get startup tips from.
    /// e.g. "http://earth.google.com/intl/%1/tips/v43/"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto StartUpTipsUrl {
      get { return startUpTipsUrl_; }
      set {
        startUpTipsUrl_ = value;
      }
    }

    /// <summary>Field number for the "num_pro_start_up_tips" field.</summary>
    public const int NumProStartUpTipsFieldNumber = 51;
    private readonly static int NumProStartUpTipsDefaultValue = 0;

    private int numProStartUpTips_;
    /// <summary>
    /// DEPRECATED as of version 7.0.
    /// Same settings for Pro/EC - Pro and EC clients will read these settings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumProStartUpTips {
      get { if ((_hasBits0 & 256) != 0) { return numProStartUpTips_; } else { return NumProStartUpTipsDefaultValue; } }
      set {
        _hasBits0 |= 256;
        numProStartUpTips_ = value;
      }
    }
    /// <summary>Gets whether the "num_pro_start_up_tips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumProStartUpTips {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "num_pro_start_up_tips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumProStartUpTips() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "pro_start_up_tips_url" field.</summary>
    public const int ProStartUpTipsUrlFieldNumber = 52;
    private global::Keyhole.Dbroot.StringIdOrValueProto proStartUpTipsUrl_;
    /// <summary>
    /// DEPRECATED as of version 7.0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto ProStartUpTipsUrl {
      get { return proStartUpTipsUrl_; }
      set {
        proStartUpTipsUrl_ = value;
      }
    }

    /// <summary>Field number for the "startup_tips_intl_url" field.</summary>
    public const int StartupTipsIntlUrlFieldNumber = 64;
    private global::Keyhole.Dbroot.StringIdOrValueProto startupTipsIntlUrl_;
    /// <summary>
    /// URL from which to load startup tips in Earth 7.0 and higher.  This will be
    /// the same URL for Free and Pro, since that logic is now dealt with on the
    /// server side.
    /// e.g. "http://support.google.com/earth/?p=startup_tip_1"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto StartupTipsIntlUrl {
      get { return startupTipsIntlUrl_; }
      set {
        startupTipsIntlUrl_ = value;
      }
    }

    /// <summary>Field number for the "user_guide_intl_url" field.</summary>
    public const int UserGuideIntlUrlFieldNumber = 14;
    private global::Keyhole.Dbroot.StringIdOrValueProto userGuideIntlUrl_;
    /// <summary>
    /// Url to user guide.
    /// e.g. "http://earth.google.com/intl/%1/userguide/v4/"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto UserGuideIntlUrl {
      get { return userGuideIntlUrl_; }
      set {
        userGuideIntlUrl_ = value;
      }
    }

    /// <summary>Field number for the "support_center_intl_url" field.</summary>
    public const int SupportCenterIntlUrlFieldNumber = 15;
    private global::Keyhole.Dbroot.StringIdOrValueProto supportCenterIntlUrl_;
    /// <summary>
    /// Url to support center.
    /// e.g. "http://earth.google.com/support/?hl=%1"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto SupportCenterIntlUrl {
      get { return supportCenterIntlUrl_; }
      set {
        supportCenterIntlUrl_ = value;
      }
    }

    /// <summary>Field number for the "business_listing_intl_url" field.</summary>
    public const int BusinessListingIntlUrlFieldNumber = 16;
    private global::Keyhole.Dbroot.StringIdOrValueProto businessListingIntlUrl_;
    /// <summary>
    /// Url to business listings.
    /// e.g. "http://www.google.com/local/add/login?hl=%3&amp;gl=%2"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto BusinessListingIntlUrl {
      get { return businessListingIntlUrl_; }
      set {
        businessListingIntlUrl_ = value;
      }
    }

    /// <summary>Field number for the "support_answer_intl_url" field.</summary>
    public const int SupportAnswerIntlUrlFieldNumber = 17;
    private global::Keyhole.Dbroot.StringIdOrValueProto supportAnswerIntlUrl_;
    /// <summary>
    /// Url to support answer.
    /// e.g. "http://earth.google.com/support/bin/answer.py?answer=%4&amp;hl=%1"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto SupportAnswerIntlUrl {
      get { return supportAnswerIntlUrl_; }
      set {
        supportAnswerIntlUrl_ = value;
      }
    }

    /// <summary>Field number for the "support_topic_intl_url" field.</summary>
    public const int SupportTopicIntlUrlFieldNumber = 18;
    private global::Keyhole.Dbroot.StringIdOrValueProto supportTopicIntlUrl_;
    /// <summary>
    /// Url to support topics used by certain diagnostic messages.
    /// e.g. "http://earth.google.com/support/bin/topic.py?topic=%4&amp;hl=%1"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto SupportTopicIntlUrl {
      get { return supportTopicIntlUrl_; }
      set {
        supportTopicIntlUrl_ = value;
      }
    }

    /// <summary>Field number for the "support_request_intl_url" field.</summary>
    public const int SupportRequestIntlUrlFieldNumber = 19;
    private global::Keyhole.Dbroot.StringIdOrValueProto supportRequestIntlUrl_;
    /// <summary>
    /// Url to support pages.
    /// e.g. "http://earth.google.com/support/bin/request.py?hl=%1"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto SupportRequestIntlUrl {
      get { return supportRequestIntlUrl_; }
      set {
        supportRequestIntlUrl_ = value;
      }
    }

    /// <summary>Field number for the "earth_intl_url" field.</summary>
    public const int EarthIntlUrlFieldNumber = 20;
    private global::Keyhole.Dbroot.StringIdOrValueProto earthIntlUrl_;
    /// <summary>
    /// Location of international page for earth.
    /// e.g. "http://earth.google.com/intl/$[hl]/"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto EarthIntlUrl {
      get { return earthIntlUrl_; }
      set {
        earthIntlUrl_ = value;
      }
    }

    /// <summary>Field number for the "add_content_url" field.</summary>
    public const int AddContentUrlFieldNumber = 21;
    private global::Keyhole.Dbroot.StringIdOrValueProto addContentUrl_;
    /// <summary>
    /// Location of server that accepts uploads from Google Earth.
    /// e.g. "http://earth.google.com/ig/directory?pid=earth&amp;synd=earth&amp;" +
    ///      "hl=$[hl]&amp;gl=%2"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto AddContentUrl {
      get { return addContentUrl_; }
      set {
        addContentUrl_ = value;
      }
    }

    /// <summary>Field number for the "sketchup_not_installed_url" field.</summary>
    public const int SketchupNotInstalledUrlFieldNumber = 22;
    private global::Keyhole.Dbroot.StringIdOrValueProto sketchupNotInstalledUrl_;
    /// <summary>
    /// DEPRECATED. There is no longer support for this field. http://b/1605305
    /// URL to show when SketchUp is not installed.
    /// e.g. "http://sketchup.google.com/intl/$[hl]/modeling.html"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto SketchupNotInstalledUrl {
      get { return sketchupNotInstalledUrl_; }
      set {
        sketchupNotInstalledUrl_ = value;
      }
    }

    /// <summary>Field number for the "sketchup_error_url" field.</summary>
    public const int SketchupErrorUrlFieldNumber = 23;
    private global::Keyhole.Dbroot.StringIdOrValueProto sketchupErrorUrl_;
    /// <summary>
    /// DEPRECATED. There is no longer support for this field. http://b/1605305
    /// URL to show when a SketchUp error occurs.
    /// e.g. "http://sketchup.google.com/intl/$[hl]/gemodelerror.html"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto SketchupErrorUrl {
      get { return sketchupErrorUrl_; }
      set {
        sketchupErrorUrl_ = value;
      }
    }

    /// <summary>Field number for the "free_license_url" field.</summary>
    public const int FreeLicenseUrlFieldNumber = 24;
    private global::Keyhole.Dbroot.StringIdOrValueProto freeLicenseUrl_;
    /// <summary>
    /// URL for the terms of service for the free client.
    /// sample value: http://earth.google.com/intl/$[hl]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto FreeLicenseUrl {
      get { return freeLicenseUrl_; }
      set {
        freeLicenseUrl_ = value;
      }
    }

    /// <summary>Field number for the "pro_license_url" field.</summary>
    public const int ProLicenseUrlFieldNumber = 25;
    private global::Keyhole.Dbroot.StringIdOrValueProto proLicenseUrl_;
    /// <summary>
    /// URL for the license agreement for Google Earth Pro.
    /// sample value: http://earth.google.com/intl/$[hl]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto ProLicenseUrl {
      get { return proLicenseUrl_; }
      set {
        proLicenseUrl_ = value;
      }
    }

    /// <summary>Field number for the "tutorial_url" field.</summary>
    public const int TutorialUrlFieldNumber = 48;
    private global::Keyhole.Dbroot.StringIdOrValueProto tutorialUrl_;
    /// <summary>
    /// URL for tutorial page.
    /// If not specified, this URL is built from user_guide_intl_url as
    /// user_guide_intl_url + "tutorials/index.html".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto TutorialUrl {
      get { return tutorialUrl_; }
      set {
        tutorialUrl_ = value;
      }
    }

    /// <summary>Field number for the "keyboard_shortcuts_url" field.</summary>
    public const int KeyboardShortcutsUrlFieldNumber = 49;
    private global::Keyhole.Dbroot.StringIdOrValueProto keyboardShortcutsUrl_;
    /// <summary>
    /// URL for keyboard shortcuts page.
    /// If not specified, this URL is built from user_guide_intl_url as
    /// user_guide_intl_url + "ug_keyboard.html".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto KeyboardShortcutsUrl {
      get { return keyboardShortcutsUrl_; }
      set {
        keyboardShortcutsUrl_ = value;
      }
    }

    /// <summary>Field number for the "release_notes_url" field.</summary>
    public const int ReleaseNotesUrlFieldNumber = 50;
    private global::Keyhole.Dbroot.StringIdOrValueProto releaseNotesUrl_;
    /// <summary>
    /// URL for release notes page.
    /// If not specified, this URL is built from support_answer_intl_url,
    /// replacing answer argument with 40901 and appending the application version
    /// as a fragment:
    /// http://earth.google.com/support/bin/answer.py?answer=40901&amp;hl=en#5.1.3533
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto ReleaseNotesUrl {
      get { return releaseNotesUrl_; }
      set {
        releaseNotesUrl_ = value;
      }
    }

    /// <summary>Field number for the "hide_user_data" field.</summary>
    public const int HideUserDataFieldNumber = 26;
    private readonly static bool HideUserDataDefaultValue = false;

    private bool hideUserData_;
    /// <summary>
    /// If true, hides user license key in about dialog. Useful for Pro only,
    /// allows information to not be visible for shared license keys.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HideUserData {
      get { if ((_hasBits0 & 16) != 0) { return hideUserData_; } else { return HideUserDataDefaultValue; } }
      set {
        _hasBits0 |= 16;
        hideUserData_ = value;
      }
    }
    /// <summary>Gets whether the "hide_user_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHideUserData {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "hide_user_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHideUserData() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "use_ge_logo" field.</summary>
    public const int UseGeLogoFieldNumber = 27;
    private readonly static bool UseGeLogoDefaultValue = true;

    private bool useGeLogo_;
    /// <summary>
    /// If true, hides the Google logo. This setting is only honored by entreprise
    /// clients.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseGeLogo {
      get { if ((_hasBits0 & 32) != 0) { return useGeLogo_; } else { return UseGeLogoDefaultValue; } }
      set {
        _hasBits0 |= 32;
        useGeLogo_ = value;
      }
    }
    /// <summary>Gets whether the "use_ge_logo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUseGeLogo {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "use_ge_logo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUseGeLogo() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "diorama_description_url_base" field.</summary>
    public const int DioramaDescriptionUrlBaseFieldNumber = 28;
    private global::Keyhole.Dbroot.StringIdOrValueProto dioramaDescriptionUrlBase_;
    /// <summary>
    /// URL to description of diorama layers.
    /// e.g. "http://mw2.google.com/mw-buglight/diorama/descriptions/en/"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto DioramaDescriptionUrlBase {
      get { return dioramaDescriptionUrlBase_; }
      set {
        dioramaDescriptionUrlBase_ = value;
      }
    }

    /// <summary>Field number for the "diorama_default_color" field.</summary>
    public const int DioramaDefaultColorFieldNumber = 29;
    private readonly static uint DioramaDefaultColorDefaultValue = 4291281607;

    private uint dioramaDefaultColor_;
    /// <summary>
    /// Color for diorama buildings that do not specify any color. Used for
    /// gray (non-photorealistic) buildings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DioramaDefaultColor {
      get { if ((_hasBits0 & 64) != 0) { return dioramaDefaultColor_; } else { return DioramaDefaultColorDefaultValue; } }
      set {
        _hasBits0 |= 64;
        dioramaDefaultColor_ = value;
      }
    }
    /// <summary>Gets whether the "diorama_default_color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDioramaDefaultColor {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "diorama_default_color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDioramaDefaultColor() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "diorama_blacklist_url" field.</summary>
    public const int DioramaBlacklistUrlFieldNumber = 53;
    private global::Keyhole.Dbroot.StringIdOrValueProto dioramaBlacklistUrl_;
    /// <summary>
    /// URL used to fetch Diorama blacklist (ID's of buildings to hide).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto DioramaBlacklistUrl {
      get { return dioramaBlacklistUrl_; }
      set {
        dioramaBlacklistUrl_ = value;
      }
    }

    /// <summary>Field number for the "client_options" field.</summary>
    public const int ClientOptionsFieldNumber = 30;
    private global::Keyhole.Dbroot.ClientOptionsProto clientOptions_;
    /// <summary>
    /// Client-side features that should be altered for this database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.ClientOptionsProto ClientOptions {
      get { return clientOptions_; }
      set {
        clientOptions_ = value;
      }
    }

    /// <summary>Field number for the "fetching_options" field.</summary>
    public const int FetchingOptionsFieldNumber = 31;
    private global::Keyhole.Dbroot.FetchingOptionsProto fetchingOptions_;
    /// <summary>
    /// Network-related options such as throttle and batched requests
    /// configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.FetchingOptionsProto FetchingOptions {
      get { return fetchingOptions_; }
      set {
        fetchingOptions_ = value;
      }
    }

    /// <summary>Field number for the "time_machine_options" field.</summary>
    public const int TimeMachineOptionsFieldNumber = 32;
    private global::Keyhole.Dbroot.TimeMachineOptionsProto timeMachineOptions_;
    /// <summary>
    /// Time-machine related settings
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.TimeMachineOptionsProto TimeMachineOptions {
      get { return timeMachineOptions_; }
      set {
        timeMachineOptions_ = value;
      }
    }

    /// <summary>Field number for the "csi_options" field.</summary>
    public const int CsiOptionsFieldNumber = 33;
    private global::Keyhole.Dbroot.CSIOptionsProto csiOptions_;
    /// <summary>
    /// CSI options for this database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.CSIOptionsProto CsiOptions {
      get { return csiOptions_; }
      set {
        csiOptions_ = value;
      }
    }

    /// <summary>Field number for the "search_tab" field.</summary>
    public const int SearchTabFieldNumber = 34;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.SearchTabProto> _repeated_searchTab_codec
        = pb::FieldCodec.ForMessage(274, global::Keyhole.Dbroot.SearchTabProto.Parser);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.SearchTabProto> searchTab_ = new pbc::RepeatedField<global::Keyhole.Dbroot.SearchTabProto>();
    /// <summary>
    /// List of customized search tabs. If list is empty, use default search tabs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.SearchTabProto> SearchTab {
      get { return searchTab_; }
    }

    /// <summary>Field number for the "cobrand_info" field.</summary>
    public const int CobrandInfoFieldNumber = 35;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.CobrandProto> _repeated_cobrandInfo_codec
        = pb::FieldCodec.ForMessage(282, global::Keyhole.Dbroot.CobrandProto.Parser);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.CobrandProto> cobrandInfo_ = new pbc::RepeatedField<global::Keyhole.Dbroot.CobrandProto>();
    /// <summary>
    /// List of extra logos to draw on screen.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.CobrandProto> CobrandInfo {
      get { return cobrandInfo_; }
    }

    /// <summary>Field number for the "valid_database" field.</summary>
    public const int ValidDatabaseFieldNumber = 36;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.DatabaseDescriptionProto> _repeated_validDatabase_codec
        = pb::FieldCodec.ForMessage(290, global::Keyhole.Dbroot.DatabaseDescriptionProto.Parser);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.DatabaseDescriptionProto> validDatabase_ = new pbc::RepeatedField<global::Keyhole.Dbroot.DatabaseDescriptionProto>();
    /// <summary>
    /// List of valid databases a client can connect to from this server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.DatabaseDescriptionProto> ValidDatabase {
      get { return validDatabase_; }
    }

    /// <summary>Field number for the "config_script" field.</summary>
    public const int ConfigScriptFieldNumber = 37;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.ConfigScriptProto> _repeated_configScript_codec
        = pb::FieldCodec.ForMessage(298, global::Keyhole.Dbroot.ConfigScriptProto.Parser);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.ConfigScriptProto> configScript_ = new pbc::RepeatedField<global::Keyhole.Dbroot.ConfigScriptProto>();
    /// <summary>
    /// List of client configuration scripts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.ConfigScriptProto> ConfigScript {
      get { return configScript_; }
    }

    /// <summary>Field number for the "deauth_server_url" field.</summary>
    public const int DeauthServerUrlFieldNumber = 38;
    private global::Keyhole.Dbroot.StringIdOrValueProto deauthServerUrl_;
    /// <summary>
    /// Url of deauthentication server (for paying customers only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto DeauthServerUrl {
      get { return deauthServerUrl_; }
      set {
        deauthServerUrl_ = value;
      }
    }

    /// <summary>Field number for the "swoop_parameters" field.</summary>
    public const int SwoopParametersFieldNumber = 39;
    private global::Keyhole.Dbroot.SwoopParamsProto swoopParameters_;
    /// <summary>
    /// Swoop parameters - if specified, will affect the amount of swoop when
    /// zooming in and out.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.SwoopParamsProto SwoopParameters {
      get { return swoopParameters_; }
      set {
        swoopParameters_ = value;
      }
    }

    /// <summary>Field number for the "bbs_server_info" field.</summary>
    public const int BbsServerInfoFieldNumber = 40;
    private global::Keyhole.Dbroot.PostingServerProto bbsServerInfo_;
    /// <summary>
    /// BBS server parameters. If not specified, default values in the client
    /// will be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.PostingServerProto BbsServerInfo {
      get { return bbsServerInfo_; }
      set {
        bbsServerInfo_ = value;
      }
    }

    /// <summary>Field number for the "data_error_server_info" field.</summary>
    public const int DataErrorServerInfoFieldNumber = 41;
    private global::Keyhole.Dbroot.PostingServerProto dataErrorServerInfo_;
    /// <summary>
    /// Data error server parameters. If not specified, default values in the
    /// client will be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.PostingServerProto DataErrorServerInfo {
      get { return dataErrorServerInfo_; }
      set {
        dataErrorServerInfo_ = value;
      }
    }

    /// <summary>Field number for the "planetary_database" field.</summary>
    public const int PlanetaryDatabaseFieldNumber = 42;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.PlanetaryDatabaseProto> _repeated_planetaryDatabase_codec
        = pb::FieldCodec.ForMessage(338, global::Keyhole.Dbroot.PlanetaryDatabaseProto.Parser);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.PlanetaryDatabaseProto> planetaryDatabase_ = new pbc::RepeatedField<global::Keyhole.Dbroot.PlanetaryDatabaseProto>();
    /// <summary>
    /// List of other databases accessible from this database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.PlanetaryDatabaseProto> PlanetaryDatabase {
      get { return planetaryDatabase_; }
    }

    /// <summary>Field number for the "log_server" field.</summary>
    public const int LogServerFieldNumber = 43;
    private global::Keyhole.Dbroot.LogServerProto logServer_;
    /// <summary>
    /// Log server configuration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.LogServerProto LogServer {
      get { return logServer_; }
      set {
        logServer_ = value;
      }
    }

    /// <summary>Field number for the "autopia_options" field.</summary>
    public const int AutopiaOptionsFieldNumber = 44;
    private global::Keyhole.Dbroot.AutopiaOptionsProto autopiaOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.AutopiaOptionsProto AutopiaOptions {
      get { return autopiaOptions_; }
      set {
        autopiaOptions_ = value;
      }
    }

    /// <summary>Field number for the "search_config" field.</summary>
    public const int SearchConfigFieldNumber = 54;
    private global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto searchConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto SearchConfig {
      get { return searchConfig_; }
      set {
        searchConfig_ = value;
      }
    }

    /// <summary>Field number for the "search_info" field.</summary>
    public const int SearchInfoFieldNumber = 45;
    private global::Keyhole.Dbroot.EndSnippetProto.Types.SearchInfoProto searchInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.EndSnippetProto.Types.SearchInfoProto SearchInfo {
      get { return searchInfo_; }
      set {
        searchInfo_ = value;
      }
    }

    /// <summary>Field number for the "elevation_service_base_url" field.</summary>
    public const int ElevationServiceBaseUrlFieldNumber = 46;
    private readonly static string ElevationServiceBaseUrlDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("aHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzL2FwaS9lbGV2YXRpb24v"), 0, 42);

    private string elevationServiceBaseUrl_;
    /// <summary>
    /// Terrain elevation service URL. If empty, service will be unavailable.
    /// This should be set to empty for EC clients to disable connection to google
    /// services.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ElevationServiceBaseUrl {
      get { return elevationServiceBaseUrl_ ?? ElevationServiceBaseUrlDefaultValue; }
      set {
        elevationServiceBaseUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "elevation_service_base_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasElevationServiceBaseUrl {
      get { return elevationServiceBaseUrl_ != null; }
    }
    /// <summary>Clears the value of the "elevation_service_base_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearElevationServiceBaseUrl() {
      elevationServiceBaseUrl_ = null;
    }

    /// <summary>Field number for the "elevation_profile_query_delay" field.</summary>
    public const int ElevationProfileQueryDelayFieldNumber = 47;
    private readonly static int ElevationProfileQueryDelayDefaultValue = 500;

    private int elevationProfileQueryDelay_;
    /// <summary>
    /// Length of time in ms to wait before sending query to elevation server.
    /// Can be used to throttle server requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ElevationProfileQueryDelay {
      get { if ((_hasBits0 & 128) != 0) { return elevationProfileQueryDelay_; } else { return ElevationProfileQueryDelayDefaultValue; } }
      set {
        _hasBits0 |= 128;
        elevationProfileQueryDelay_ = value;
      }
    }
    /// <summary>Gets whether the "elevation_profile_query_delay" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasElevationProfileQueryDelay {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "elevation_profile_query_delay" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearElevationProfileQueryDelay() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "pro_upgrade_url" field.</summary>
    public const int ProUpgradeUrlFieldNumber = 55;
    private global::Keyhole.Dbroot.StringIdOrValueProto proUpgradeUrl_;
    /// <summary>
    /// URL of webpage to go to buy Earth Pro License
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto ProUpgradeUrl {
      get { return proUpgradeUrl_; }
      set {
        proUpgradeUrl_ = value;
      }
    }

    /// <summary>Field number for the "earth_community_url" field.</summary>
    public const int EarthCommunityUrlFieldNumber = 56;
    private global::Keyhole.Dbroot.StringIdOrValueProto earthCommunityUrl_;
    /// <summary>
    /// URL of webpage to go for Earth Community
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto EarthCommunityUrl {
      get { return earthCommunityUrl_; }
      set {
        earthCommunityUrl_ = value;
      }
    }

    /// <summary>Field number for the "google_maps_url" field.</summary>
    public const int GoogleMapsUrlFieldNumber = 57;
    private global::Keyhole.Dbroot.StringIdOrValueProto googleMapsUrl_;
    /// <summary>
    /// URL for Google Maps, for features like "View in Maps". As we no
    /// longer assume that search is only MFE, we need an extra URL
    /// parameter to tell us where to send users who want to view the
    /// current location in Maps. This should be set to empty for EC
    /// clients to disable connection to google services. If nothing is
    /// specified, the client uses "http://maps.google.com/".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto GoogleMapsUrl {
      get { return googleMapsUrl_; }
      set {
        googleMapsUrl_ = value;
      }
    }

    /// <summary>Field number for the "sharing_url" field.</summary>
    public const int SharingUrlFieldNumber = 58;
    private global::Keyhole.Dbroot.StringIdOrValueProto sharingUrl_;
    /// <summary>
    /// URL for Sharing in Google+.
    /// e.g. "http://www.gstatic.com/earth/sharing/static/$[hl]/index.html"
    /// If empty, sharing will be unavailable. Introduced in 6.2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto SharingUrl {
      get { return sharingUrl_; }
      set {
        sharingUrl_ = value;
      }
    }

    /// <summary>Field number for the "privacy_policy_url" field.</summary>
    public const int PrivacyPolicyUrlFieldNumber = 59;
    private global::Keyhole.Dbroot.StringIdOrValueProto privacyPolicyUrl_;
    /// <summary>
    /// URL for the privacy policy. Use Google-wide policy, as we don't have
    /// a specific Earth privacy policy.
    /// sample value: http://www.google.com/intl/$[hl]/privacy/
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto PrivacyPolicyUrl {
      get { return privacyPolicyUrl_; }
      set {
        privacyPolicyUrl_ = value;
      }
    }

    /// <summary>Field number for the "do_gplus_user_check" field.</summary>
    public const int DoGplusUserCheckFieldNumber = 60;
    private readonly static bool DoGplusUserCheckDefaultValue = false;

    private bool doGplusUserCheck_;
    /// <summary>
    /// If true, the client will check to see if a logged-in user has signed up
    /// for Google+ and grey out the menu item if not.  The standalone
    /// sharebox should eventually handle this for us, at which point this should
    /// be turned off forever.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DoGplusUserCheck {
      get { if ((_hasBits0 & 512) != 0) { return doGplusUserCheck_; } else { return DoGplusUserCheckDefaultValue; } }
      set {
        _hasBits0 |= 512;
        doGplusUserCheck_ = value;
      }
    }
    /// <summary>Gets whether the "do_gplus_user_check" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDoGplusUserCheck {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "do_gplus_user_check" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDoGplusUserCheck() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "rocktree_data_proto" field.</summary>
    public const int RocktreeDataProtoFieldNumber = 61;
    private global::Keyhole.Dbroot.EndSnippetProto.Types.RockTreeDataProto rocktreeDataProto_;
    /// <summary>
    /// Configuration for the filmstrip view.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.EndSnippetProto.Types.RockTreeDataProto RocktreeDataProto {
      get { return rocktreeDataProto_; }
      set {
        rocktreeDataProto_ = value;
      }
    }

    /// <summary>Field number for the "filmstrip_config" field.</summary>
    public const int FilmstripConfigFieldNumber = 62;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.EndSnippetProto.Types.FilmstripConfigProto> _repeated_filmstripConfig_codec
        = pb::FieldCodec.ForMessage(498, global::Keyhole.Dbroot.EndSnippetProto.Types.FilmstripConfigProto.Parser);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.EndSnippetProto.Types.FilmstripConfigProto> filmstripConfig_ = new pbc::RepeatedField<global::Keyhole.Dbroot.EndSnippetProto.Types.FilmstripConfigProto>();
    /// <summary>
    /// List of filmstrip configs.  All client versions that support the filmstrip
    /// must have a filmstrip config that applies to them.  If more than one
    /// filmstrip config has satisfied requirements, the first one encountered will
    /// be used and the rest will be ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.EndSnippetProto.Types.FilmstripConfigProto> FilmstripConfig {
      get { return filmstripConfig_; }
    }

    /// <summary>Field number for the "show_signin_button" field.</summary>
    public const int ShowSigninButtonFieldNumber = 63;
    private readonly static bool ShowSigninButtonDefaultValue = false;

    private bool showSigninButton_;
    /// <summary>
    /// If true, shows the signin button in the upper right corner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShowSigninButton {
      get { if ((_hasBits0 & 1024) != 0) { return showSigninButton_; } else { return ShowSigninButtonDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        showSigninButton_ = value;
      }
    }
    /// <summary>Gets whether the "show_signin_button" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShowSigninButton {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "show_signin_button" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShowSigninButton() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "pro_measure_upsell_url" field.</summary>
    public const int ProMeasureUpsellUrlFieldNumber = 65;
    private global::Keyhole.Dbroot.StringIdOrValueProto proMeasureUpsellUrl_;
    /// <summary>
    /// The URL for the Google Earth Pro upsell web view in the Measure dialog.
    /// (Only relevant for free clients.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto ProMeasureUpsellUrl {
      get { return proMeasureUpsellUrl_; }
      set {
        proMeasureUpsellUrl_ = value;
      }
    }

    /// <summary>Field number for the "pro_print_upsell_url" field.</summary>
    public const int ProPrintUpsellUrlFieldNumber = 66;
    private global::Keyhole.Dbroot.StringIdOrValueProto proPrintUpsellUrl_;
    /// <summary>
    /// The URL for the Google Earth Pro upsell in the Print dialog.
    /// (Only relevant for free clients.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto ProPrintUpsellUrl {
      get { return proPrintUpsellUrl_; }
      set {
        proPrintUpsellUrl_ = value;
      }
    }

    /// <summary>Field number for the "star_data_proto" field.</summary>
    public const int StarDataProtoFieldNumber = 67;
    private global::Keyhole.Dbroot.EndSnippetProto.Types.StarDataProto starDataProto_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.EndSnippetProto.Types.StarDataProto StarDataProto {
      get { return starDataProto_; }
      set {
        starDataProto_ = value;
      }
    }

    /// <summary>Field number for the "feedback_url" field.</summary>
    public const int FeedbackUrlFieldNumber = 68;
    private global::Keyhole.Dbroot.StringIdOrValueProto feedbackUrl_;
    /// <summary>
    /// The URL for the gFeedback dialog.  If not specified, the feedback feature
    /// will be disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto FeedbackUrl {
      get { return feedbackUrl_; }
      set {
        feedbackUrl_ = value;
      }
    }

    /// <summary>Field number for the "oauth2_login_url" field.</summary>
    public const int Oauth2LoginUrlFieldNumber = 69;
    private global::Keyhole.Dbroot.StringIdOrValueProto oauth2LoginUrl_;
    /// <summary>
    /// The URL the client should use to perform an OAuth2 login.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto Oauth2LoginUrl {
      get { return oauth2LoginUrl_; }
      set {
        oauth2LoginUrl_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EndSnippetProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EndSnippetProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Model, other.Model)) return false;
      if (!object.Equals(AuthServerUrl, other.AuthServerUrl)) return false;
      if (DisableAuthentication != other.DisableAuthentication) return false;
      if(!mfeDomains_.Equals(other.mfeDomains_)) return false;
      if (MfeLangParam != other.MfeLangParam) return false;
      if (AdsUrlPatterns != other.AdsUrlPatterns) return false;
      if (!object.Equals(ReverseGeocoderUrl, other.ReverseGeocoderUrl)) return false;
      if (ReverseGeocoderProtocolVersion != other.ReverseGeocoderProtocolVersion) return false;
      if (SkyDatabaseIsAvailable != other.SkyDatabaseIsAvailable) return false;
      if (!object.Equals(SkyDatabaseUrl, other.SkyDatabaseUrl)) return false;
      if (!object.Equals(DefaultWebPageIntlUrl, other.DefaultWebPageIntlUrl)) return false;
      if (NumStartUpTips != other.NumStartUpTips) return false;
      if (!object.Equals(StartUpTipsUrl, other.StartUpTipsUrl)) return false;
      if (NumProStartUpTips != other.NumProStartUpTips) return false;
      if (!object.Equals(ProStartUpTipsUrl, other.ProStartUpTipsUrl)) return false;
      if (!object.Equals(StartupTipsIntlUrl, other.StartupTipsIntlUrl)) return false;
      if (!object.Equals(UserGuideIntlUrl, other.UserGuideIntlUrl)) return false;
      if (!object.Equals(SupportCenterIntlUrl, other.SupportCenterIntlUrl)) return false;
      if (!object.Equals(BusinessListingIntlUrl, other.BusinessListingIntlUrl)) return false;
      if (!object.Equals(SupportAnswerIntlUrl, other.SupportAnswerIntlUrl)) return false;
      if (!object.Equals(SupportTopicIntlUrl, other.SupportTopicIntlUrl)) return false;
      if (!object.Equals(SupportRequestIntlUrl, other.SupportRequestIntlUrl)) return false;
      if (!object.Equals(EarthIntlUrl, other.EarthIntlUrl)) return false;
      if (!object.Equals(AddContentUrl, other.AddContentUrl)) return false;
      if (!object.Equals(SketchupNotInstalledUrl, other.SketchupNotInstalledUrl)) return false;
      if (!object.Equals(SketchupErrorUrl, other.SketchupErrorUrl)) return false;
      if (!object.Equals(FreeLicenseUrl, other.FreeLicenseUrl)) return false;
      if (!object.Equals(ProLicenseUrl, other.ProLicenseUrl)) return false;
      if (!object.Equals(TutorialUrl, other.TutorialUrl)) return false;
      if (!object.Equals(KeyboardShortcutsUrl, other.KeyboardShortcutsUrl)) return false;
      if (!object.Equals(ReleaseNotesUrl, other.ReleaseNotesUrl)) return false;
      if (HideUserData != other.HideUserData) return false;
      if (UseGeLogo != other.UseGeLogo) return false;
      if (!object.Equals(DioramaDescriptionUrlBase, other.DioramaDescriptionUrlBase)) return false;
      if (DioramaDefaultColor != other.DioramaDefaultColor) return false;
      if (!object.Equals(DioramaBlacklistUrl, other.DioramaBlacklistUrl)) return false;
      if (!object.Equals(ClientOptions, other.ClientOptions)) return false;
      if (!object.Equals(FetchingOptions, other.FetchingOptions)) return false;
      if (!object.Equals(TimeMachineOptions, other.TimeMachineOptions)) return false;
      if (!object.Equals(CsiOptions, other.CsiOptions)) return false;
      if(!searchTab_.Equals(other.searchTab_)) return false;
      if(!cobrandInfo_.Equals(other.cobrandInfo_)) return false;
      if(!validDatabase_.Equals(other.validDatabase_)) return false;
      if(!configScript_.Equals(other.configScript_)) return false;
      if (!object.Equals(DeauthServerUrl, other.DeauthServerUrl)) return false;
      if (!object.Equals(SwoopParameters, other.SwoopParameters)) return false;
      if (!object.Equals(BbsServerInfo, other.BbsServerInfo)) return false;
      if (!object.Equals(DataErrorServerInfo, other.DataErrorServerInfo)) return false;
      if(!planetaryDatabase_.Equals(other.planetaryDatabase_)) return false;
      if (!object.Equals(LogServer, other.LogServer)) return false;
      if (!object.Equals(AutopiaOptions, other.AutopiaOptions)) return false;
      if (!object.Equals(SearchConfig, other.SearchConfig)) return false;
      if (!object.Equals(SearchInfo, other.SearchInfo)) return false;
      if (ElevationServiceBaseUrl != other.ElevationServiceBaseUrl) return false;
      if (ElevationProfileQueryDelay != other.ElevationProfileQueryDelay) return false;
      if (!object.Equals(ProUpgradeUrl, other.ProUpgradeUrl)) return false;
      if (!object.Equals(EarthCommunityUrl, other.EarthCommunityUrl)) return false;
      if (!object.Equals(GoogleMapsUrl, other.GoogleMapsUrl)) return false;
      if (!object.Equals(SharingUrl, other.SharingUrl)) return false;
      if (!object.Equals(PrivacyPolicyUrl, other.PrivacyPolicyUrl)) return false;
      if (DoGplusUserCheck != other.DoGplusUserCheck) return false;
      if (!object.Equals(RocktreeDataProto, other.RocktreeDataProto)) return false;
      if(!filmstripConfig_.Equals(other.filmstripConfig_)) return false;
      if (ShowSigninButton != other.ShowSigninButton) return false;
      if (!object.Equals(ProMeasureUpsellUrl, other.ProMeasureUpsellUrl)) return false;
      if (!object.Equals(ProPrintUpsellUrl, other.ProPrintUpsellUrl)) return false;
      if (!object.Equals(StarDataProto, other.StarDataProto)) return false;
      if (!object.Equals(FeedbackUrl, other.FeedbackUrl)) return false;
      if (!object.Equals(Oauth2LoginUrl, other.Oauth2LoginUrl)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (model_ != null) hash ^= Model.GetHashCode();
      if (authServerUrl_ != null) hash ^= AuthServerUrl.GetHashCode();
      if (HasDisableAuthentication) hash ^= DisableAuthentication.GetHashCode();
      hash ^= mfeDomains_.GetHashCode();
      if (HasMfeLangParam) hash ^= MfeLangParam.GetHashCode();
      if (HasAdsUrlPatterns) hash ^= AdsUrlPatterns.GetHashCode();
      if (reverseGeocoderUrl_ != null) hash ^= ReverseGeocoderUrl.GetHashCode();
      if (HasReverseGeocoderProtocolVersion) hash ^= ReverseGeocoderProtocolVersion.GetHashCode();
      if (HasSkyDatabaseIsAvailable) hash ^= SkyDatabaseIsAvailable.GetHashCode();
      if (skyDatabaseUrl_ != null) hash ^= SkyDatabaseUrl.GetHashCode();
      if (defaultWebPageIntlUrl_ != null) hash ^= DefaultWebPageIntlUrl.GetHashCode();
      if (HasNumStartUpTips) hash ^= NumStartUpTips.GetHashCode();
      if (startUpTipsUrl_ != null) hash ^= StartUpTipsUrl.GetHashCode();
      if (HasNumProStartUpTips) hash ^= NumProStartUpTips.GetHashCode();
      if (proStartUpTipsUrl_ != null) hash ^= ProStartUpTipsUrl.GetHashCode();
      if (startupTipsIntlUrl_ != null) hash ^= StartupTipsIntlUrl.GetHashCode();
      if (userGuideIntlUrl_ != null) hash ^= UserGuideIntlUrl.GetHashCode();
      if (supportCenterIntlUrl_ != null) hash ^= SupportCenterIntlUrl.GetHashCode();
      if (businessListingIntlUrl_ != null) hash ^= BusinessListingIntlUrl.GetHashCode();
      if (supportAnswerIntlUrl_ != null) hash ^= SupportAnswerIntlUrl.GetHashCode();
      if (supportTopicIntlUrl_ != null) hash ^= SupportTopicIntlUrl.GetHashCode();
      if (supportRequestIntlUrl_ != null) hash ^= SupportRequestIntlUrl.GetHashCode();
      if (earthIntlUrl_ != null) hash ^= EarthIntlUrl.GetHashCode();
      if (addContentUrl_ != null) hash ^= AddContentUrl.GetHashCode();
      if (sketchupNotInstalledUrl_ != null) hash ^= SketchupNotInstalledUrl.GetHashCode();
      if (sketchupErrorUrl_ != null) hash ^= SketchupErrorUrl.GetHashCode();
      if (freeLicenseUrl_ != null) hash ^= FreeLicenseUrl.GetHashCode();
      if (proLicenseUrl_ != null) hash ^= ProLicenseUrl.GetHashCode();
      if (tutorialUrl_ != null) hash ^= TutorialUrl.GetHashCode();
      if (keyboardShortcutsUrl_ != null) hash ^= KeyboardShortcutsUrl.GetHashCode();
      if (releaseNotesUrl_ != null) hash ^= ReleaseNotesUrl.GetHashCode();
      if (HasHideUserData) hash ^= HideUserData.GetHashCode();
      if (HasUseGeLogo) hash ^= UseGeLogo.GetHashCode();
      if (dioramaDescriptionUrlBase_ != null) hash ^= DioramaDescriptionUrlBase.GetHashCode();
      if (HasDioramaDefaultColor) hash ^= DioramaDefaultColor.GetHashCode();
      if (dioramaBlacklistUrl_ != null) hash ^= DioramaBlacklistUrl.GetHashCode();
      if (clientOptions_ != null) hash ^= ClientOptions.GetHashCode();
      if (fetchingOptions_ != null) hash ^= FetchingOptions.GetHashCode();
      if (timeMachineOptions_ != null) hash ^= TimeMachineOptions.GetHashCode();
      if (csiOptions_ != null) hash ^= CsiOptions.GetHashCode();
      hash ^= searchTab_.GetHashCode();
      hash ^= cobrandInfo_.GetHashCode();
      hash ^= validDatabase_.GetHashCode();
      hash ^= configScript_.GetHashCode();
      if (deauthServerUrl_ != null) hash ^= DeauthServerUrl.GetHashCode();
      if (swoopParameters_ != null) hash ^= SwoopParameters.GetHashCode();
      if (bbsServerInfo_ != null) hash ^= BbsServerInfo.GetHashCode();
      if (dataErrorServerInfo_ != null) hash ^= DataErrorServerInfo.GetHashCode();
      hash ^= planetaryDatabase_.GetHashCode();
      if (logServer_ != null) hash ^= LogServer.GetHashCode();
      if (autopiaOptions_ != null) hash ^= AutopiaOptions.GetHashCode();
      if (searchConfig_ != null) hash ^= SearchConfig.GetHashCode();
      if (searchInfo_ != null) hash ^= SearchInfo.GetHashCode();
      if (HasElevationServiceBaseUrl) hash ^= ElevationServiceBaseUrl.GetHashCode();
      if (HasElevationProfileQueryDelay) hash ^= ElevationProfileQueryDelay.GetHashCode();
      if (proUpgradeUrl_ != null) hash ^= ProUpgradeUrl.GetHashCode();
      if (earthCommunityUrl_ != null) hash ^= EarthCommunityUrl.GetHashCode();
      if (googleMapsUrl_ != null) hash ^= GoogleMapsUrl.GetHashCode();
      if (sharingUrl_ != null) hash ^= SharingUrl.GetHashCode();
      if (privacyPolicyUrl_ != null) hash ^= PrivacyPolicyUrl.GetHashCode();
      if (HasDoGplusUserCheck) hash ^= DoGplusUserCheck.GetHashCode();
      if (rocktreeDataProto_ != null) hash ^= RocktreeDataProto.GetHashCode();
      hash ^= filmstripConfig_.GetHashCode();
      if (HasShowSigninButton) hash ^= ShowSigninButton.GetHashCode();
      if (proMeasureUpsellUrl_ != null) hash ^= ProMeasureUpsellUrl.GetHashCode();
      if (proPrintUpsellUrl_ != null) hash ^= ProPrintUpsellUrl.GetHashCode();
      if (starDataProto_ != null) hash ^= StarDataProto.GetHashCode();
      if (feedbackUrl_ != null) hash ^= FeedbackUrl.GetHashCode();
      if (oauth2LoginUrl_ != null) hash ^= Oauth2LoginUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (model_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Model);
      }
      if (authServerUrl_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AuthServerUrl);
      }
      if (HasDisableAuthentication) {
        output.WriteRawTag(24);
        output.WriteBool(DisableAuthentication);
      }
      mfeDomains_.WriteTo(output, _repeated_mfeDomains_codec);
      if (HasMfeLangParam) {
        output.WriteRawTag(42);
        output.WriteString(MfeLangParam);
      }
      if (HasAdsUrlPatterns) {
        output.WriteRawTag(50);
        output.WriteString(AdsUrlPatterns);
      }
      if (reverseGeocoderUrl_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ReverseGeocoderUrl);
      }
      if (HasReverseGeocoderProtocolVersion) {
        output.WriteRawTag(64);
        output.WriteInt32(ReverseGeocoderProtocolVersion);
      }
      if (HasSkyDatabaseIsAvailable) {
        output.WriteRawTag(72);
        output.WriteBool(SkyDatabaseIsAvailable);
      }
      if (skyDatabaseUrl_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(SkyDatabaseUrl);
      }
      if (defaultWebPageIntlUrl_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DefaultWebPageIntlUrl);
      }
      if (HasNumStartUpTips) {
        output.WriteRawTag(96);
        output.WriteInt32(NumStartUpTips);
      }
      if (startUpTipsUrl_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(StartUpTipsUrl);
      }
      if (userGuideIntlUrl_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(UserGuideIntlUrl);
      }
      if (supportCenterIntlUrl_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(SupportCenterIntlUrl);
      }
      if (businessListingIntlUrl_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(BusinessListingIntlUrl);
      }
      if (supportAnswerIntlUrl_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(SupportAnswerIntlUrl);
      }
      if (supportTopicIntlUrl_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SupportTopicIntlUrl);
      }
      if (supportRequestIntlUrl_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(SupportRequestIntlUrl);
      }
      if (earthIntlUrl_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(EarthIntlUrl);
      }
      if (addContentUrl_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(AddContentUrl);
      }
      if (sketchupNotInstalledUrl_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(SketchupNotInstalledUrl);
      }
      if (sketchupErrorUrl_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(SketchupErrorUrl);
      }
      if (freeLicenseUrl_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(FreeLicenseUrl);
      }
      if (proLicenseUrl_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(ProLicenseUrl);
      }
      if (HasHideUserData) {
        output.WriteRawTag(208, 1);
        output.WriteBool(HideUserData);
      }
      if (HasUseGeLogo) {
        output.WriteRawTag(216, 1);
        output.WriteBool(UseGeLogo);
      }
      if (dioramaDescriptionUrlBase_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(DioramaDescriptionUrlBase);
      }
      if (HasDioramaDefaultColor) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(DioramaDefaultColor);
      }
      if (clientOptions_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(ClientOptions);
      }
      if (fetchingOptions_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(FetchingOptions);
      }
      if (timeMachineOptions_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(TimeMachineOptions);
      }
      if (csiOptions_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(CsiOptions);
      }
      searchTab_.WriteTo(output, _repeated_searchTab_codec);
      cobrandInfo_.WriteTo(output, _repeated_cobrandInfo_codec);
      validDatabase_.WriteTo(output, _repeated_validDatabase_codec);
      configScript_.WriteTo(output, _repeated_configScript_codec);
      if (deauthServerUrl_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(DeauthServerUrl);
      }
      if (swoopParameters_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(SwoopParameters);
      }
      if (bbsServerInfo_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(BbsServerInfo);
      }
      if (dataErrorServerInfo_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(DataErrorServerInfo);
      }
      planetaryDatabase_.WriteTo(output, _repeated_planetaryDatabase_codec);
      if (logServer_ != null) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(LogServer);
      }
      if (autopiaOptions_ != null) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(AutopiaOptions);
      }
      if (searchInfo_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(SearchInfo);
      }
      if (HasElevationServiceBaseUrl) {
        output.WriteRawTag(242, 2);
        output.WriteString(ElevationServiceBaseUrl);
      }
      if (HasElevationProfileQueryDelay) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(ElevationProfileQueryDelay);
      }
      if (tutorialUrl_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(TutorialUrl);
      }
      if (keyboardShortcutsUrl_ != null) {
        output.WriteRawTag(138, 3);
        output.WriteMessage(KeyboardShortcutsUrl);
      }
      if (releaseNotesUrl_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(ReleaseNotesUrl);
      }
      if (HasNumProStartUpTips) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(NumProStartUpTips);
      }
      if (proStartUpTipsUrl_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(ProStartUpTipsUrl);
      }
      if (dioramaBlacklistUrl_ != null) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(DioramaBlacklistUrl);
      }
      if (searchConfig_ != null) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(SearchConfig);
      }
      if (proUpgradeUrl_ != null) {
        output.WriteRawTag(186, 3);
        output.WriteMessage(ProUpgradeUrl);
      }
      if (earthCommunityUrl_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(EarthCommunityUrl);
      }
      if (googleMapsUrl_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(GoogleMapsUrl);
      }
      if (sharingUrl_ != null) {
        output.WriteRawTag(210, 3);
        output.WriteMessage(SharingUrl);
      }
      if (privacyPolicyUrl_ != null) {
        output.WriteRawTag(218, 3);
        output.WriteMessage(PrivacyPolicyUrl);
      }
      if (HasDoGplusUserCheck) {
        output.WriteRawTag(224, 3);
        output.WriteBool(DoGplusUserCheck);
      }
      if (rocktreeDataProto_ != null) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(RocktreeDataProto);
      }
      filmstripConfig_.WriteTo(output, _repeated_filmstripConfig_codec);
      if (HasShowSigninButton) {
        output.WriteRawTag(248, 3);
        output.WriteBool(ShowSigninButton);
      }
      if (startupTipsIntlUrl_ != null) {
        output.WriteRawTag(130, 4);
        output.WriteMessage(StartupTipsIntlUrl);
      }
      if (proMeasureUpsellUrl_ != null) {
        output.WriteRawTag(138, 4);
        output.WriteMessage(ProMeasureUpsellUrl);
      }
      if (proPrintUpsellUrl_ != null) {
        output.WriteRawTag(146, 4);
        output.WriteMessage(ProPrintUpsellUrl);
      }
      if (starDataProto_ != null) {
        output.WriteRawTag(154, 4);
        output.WriteMessage(StarDataProto);
      }
      if (feedbackUrl_ != null) {
        output.WriteRawTag(162, 4);
        output.WriteMessage(FeedbackUrl);
      }
      if (oauth2LoginUrl_ != null) {
        output.WriteRawTag(170, 4);
        output.WriteMessage(Oauth2LoginUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (model_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Model);
      }
      if (authServerUrl_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AuthServerUrl);
      }
      if (HasDisableAuthentication) {
        output.WriteRawTag(24);
        output.WriteBool(DisableAuthentication);
      }
      mfeDomains_.WriteTo(ref output, _repeated_mfeDomains_codec);
      if (HasMfeLangParam) {
        output.WriteRawTag(42);
        output.WriteString(MfeLangParam);
      }
      if (HasAdsUrlPatterns) {
        output.WriteRawTag(50);
        output.WriteString(AdsUrlPatterns);
      }
      if (reverseGeocoderUrl_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ReverseGeocoderUrl);
      }
      if (HasReverseGeocoderProtocolVersion) {
        output.WriteRawTag(64);
        output.WriteInt32(ReverseGeocoderProtocolVersion);
      }
      if (HasSkyDatabaseIsAvailable) {
        output.WriteRawTag(72);
        output.WriteBool(SkyDatabaseIsAvailable);
      }
      if (skyDatabaseUrl_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(SkyDatabaseUrl);
      }
      if (defaultWebPageIntlUrl_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DefaultWebPageIntlUrl);
      }
      if (HasNumStartUpTips) {
        output.WriteRawTag(96);
        output.WriteInt32(NumStartUpTips);
      }
      if (startUpTipsUrl_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(StartUpTipsUrl);
      }
      if (userGuideIntlUrl_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(UserGuideIntlUrl);
      }
      if (supportCenterIntlUrl_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(SupportCenterIntlUrl);
      }
      if (businessListingIntlUrl_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(BusinessListingIntlUrl);
      }
      if (supportAnswerIntlUrl_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(SupportAnswerIntlUrl);
      }
      if (supportTopicIntlUrl_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SupportTopicIntlUrl);
      }
      if (supportRequestIntlUrl_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(SupportRequestIntlUrl);
      }
      if (earthIntlUrl_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(EarthIntlUrl);
      }
      if (addContentUrl_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(AddContentUrl);
      }
      if (sketchupNotInstalledUrl_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(SketchupNotInstalledUrl);
      }
      if (sketchupErrorUrl_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(SketchupErrorUrl);
      }
      if (freeLicenseUrl_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(FreeLicenseUrl);
      }
      if (proLicenseUrl_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(ProLicenseUrl);
      }
      if (HasHideUserData) {
        output.WriteRawTag(208, 1);
        output.WriteBool(HideUserData);
      }
      if (HasUseGeLogo) {
        output.WriteRawTag(216, 1);
        output.WriteBool(UseGeLogo);
      }
      if (dioramaDescriptionUrlBase_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(DioramaDescriptionUrlBase);
      }
      if (HasDioramaDefaultColor) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(DioramaDefaultColor);
      }
      if (clientOptions_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(ClientOptions);
      }
      if (fetchingOptions_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(FetchingOptions);
      }
      if (timeMachineOptions_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(TimeMachineOptions);
      }
      if (csiOptions_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(CsiOptions);
      }
      searchTab_.WriteTo(ref output, _repeated_searchTab_codec);
      cobrandInfo_.WriteTo(ref output, _repeated_cobrandInfo_codec);
      validDatabase_.WriteTo(ref output, _repeated_validDatabase_codec);
      configScript_.WriteTo(ref output, _repeated_configScript_codec);
      if (deauthServerUrl_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(DeauthServerUrl);
      }
      if (swoopParameters_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(SwoopParameters);
      }
      if (bbsServerInfo_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(BbsServerInfo);
      }
      if (dataErrorServerInfo_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(DataErrorServerInfo);
      }
      planetaryDatabase_.WriteTo(ref output, _repeated_planetaryDatabase_codec);
      if (logServer_ != null) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(LogServer);
      }
      if (autopiaOptions_ != null) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(AutopiaOptions);
      }
      if (searchInfo_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(SearchInfo);
      }
      if (HasElevationServiceBaseUrl) {
        output.WriteRawTag(242, 2);
        output.WriteString(ElevationServiceBaseUrl);
      }
      if (HasElevationProfileQueryDelay) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(ElevationProfileQueryDelay);
      }
      if (tutorialUrl_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(TutorialUrl);
      }
      if (keyboardShortcutsUrl_ != null) {
        output.WriteRawTag(138, 3);
        output.WriteMessage(KeyboardShortcutsUrl);
      }
      if (releaseNotesUrl_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(ReleaseNotesUrl);
      }
      if (HasNumProStartUpTips) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(NumProStartUpTips);
      }
      if (proStartUpTipsUrl_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(ProStartUpTipsUrl);
      }
      if (dioramaBlacklistUrl_ != null) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(DioramaBlacklistUrl);
      }
      if (searchConfig_ != null) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(SearchConfig);
      }
      if (proUpgradeUrl_ != null) {
        output.WriteRawTag(186, 3);
        output.WriteMessage(ProUpgradeUrl);
      }
      if (earthCommunityUrl_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(EarthCommunityUrl);
      }
      if (googleMapsUrl_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(GoogleMapsUrl);
      }
      if (sharingUrl_ != null) {
        output.WriteRawTag(210, 3);
        output.WriteMessage(SharingUrl);
      }
      if (privacyPolicyUrl_ != null) {
        output.WriteRawTag(218, 3);
        output.WriteMessage(PrivacyPolicyUrl);
      }
      if (HasDoGplusUserCheck) {
        output.WriteRawTag(224, 3);
        output.WriteBool(DoGplusUserCheck);
      }
      if (rocktreeDataProto_ != null) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(RocktreeDataProto);
      }
      filmstripConfig_.WriteTo(ref output, _repeated_filmstripConfig_codec);
      if (HasShowSigninButton) {
        output.WriteRawTag(248, 3);
        output.WriteBool(ShowSigninButton);
      }
      if (startupTipsIntlUrl_ != null) {
        output.WriteRawTag(130, 4);
        output.WriteMessage(StartupTipsIntlUrl);
      }
      if (proMeasureUpsellUrl_ != null) {
        output.WriteRawTag(138, 4);
        output.WriteMessage(ProMeasureUpsellUrl);
      }
      if (proPrintUpsellUrl_ != null) {
        output.WriteRawTag(146, 4);
        output.WriteMessage(ProPrintUpsellUrl);
      }
      if (starDataProto_ != null) {
        output.WriteRawTag(154, 4);
        output.WriteMessage(StarDataProto);
      }
      if (feedbackUrl_ != null) {
        output.WriteRawTag(162, 4);
        output.WriteMessage(FeedbackUrl);
      }
      if (oauth2LoginUrl_ != null) {
        output.WriteRawTag(170, 4);
        output.WriteMessage(Oauth2LoginUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (model_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Model);
      }
      if (authServerUrl_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthServerUrl);
      }
      if (HasDisableAuthentication) {
        size += 1 + 1;
      }
      size += mfeDomains_.CalculateSize(_repeated_mfeDomains_codec);
      if (HasMfeLangParam) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MfeLangParam);
      }
      if (HasAdsUrlPatterns) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdsUrlPatterns);
      }
      if (reverseGeocoderUrl_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReverseGeocoderUrl);
      }
      if (HasReverseGeocoderProtocolVersion) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReverseGeocoderProtocolVersion);
      }
      if (HasSkyDatabaseIsAvailable) {
        size += 1 + 1;
      }
      if (skyDatabaseUrl_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SkyDatabaseUrl);
      }
      if (defaultWebPageIntlUrl_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultWebPageIntlUrl);
      }
      if (HasNumStartUpTips) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumStartUpTips);
      }
      if (startUpTipsUrl_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartUpTipsUrl);
      }
      if (HasNumProStartUpTips) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumProStartUpTips);
      }
      if (proStartUpTipsUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProStartUpTipsUrl);
      }
      if (startupTipsIntlUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StartupTipsIntlUrl);
      }
      if (userGuideIntlUrl_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserGuideIntlUrl);
      }
      if (supportCenterIntlUrl_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SupportCenterIntlUrl);
      }
      if (businessListingIntlUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BusinessListingIntlUrl);
      }
      if (supportAnswerIntlUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SupportAnswerIntlUrl);
      }
      if (supportTopicIntlUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SupportTopicIntlUrl);
      }
      if (supportRequestIntlUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SupportRequestIntlUrl);
      }
      if (earthIntlUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EarthIntlUrl);
      }
      if (addContentUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddContentUrl);
      }
      if (sketchupNotInstalledUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SketchupNotInstalledUrl);
      }
      if (sketchupErrorUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SketchupErrorUrl);
      }
      if (freeLicenseUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FreeLicenseUrl);
      }
      if (proLicenseUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProLicenseUrl);
      }
      if (tutorialUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TutorialUrl);
      }
      if (keyboardShortcutsUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(KeyboardShortcutsUrl);
      }
      if (releaseNotesUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReleaseNotesUrl);
      }
      if (HasHideUserData) {
        size += 2 + 1;
      }
      if (HasUseGeLogo) {
        size += 2 + 1;
      }
      if (dioramaDescriptionUrlBase_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DioramaDescriptionUrlBase);
      }
      if (HasDioramaDefaultColor) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DioramaDefaultColor);
      }
      if (dioramaBlacklistUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DioramaBlacklistUrl);
      }
      if (clientOptions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClientOptions);
      }
      if (fetchingOptions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FetchingOptions);
      }
      if (timeMachineOptions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TimeMachineOptions);
      }
      if (csiOptions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CsiOptions);
      }
      size += searchTab_.CalculateSize(_repeated_searchTab_codec);
      size += cobrandInfo_.CalculateSize(_repeated_cobrandInfo_codec);
      size += validDatabase_.CalculateSize(_repeated_validDatabase_codec);
      size += configScript_.CalculateSize(_repeated_configScript_codec);
      if (deauthServerUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeauthServerUrl);
      }
      if (swoopParameters_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SwoopParameters);
      }
      if (bbsServerInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BbsServerInfo);
      }
      if (dataErrorServerInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DataErrorServerInfo);
      }
      size += planetaryDatabase_.CalculateSize(_repeated_planetaryDatabase_codec);
      if (logServer_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LogServer);
      }
      if (autopiaOptions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AutopiaOptions);
      }
      if (searchConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SearchConfig);
      }
      if (searchInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SearchInfo);
      }
      if (HasElevationServiceBaseUrl) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ElevationServiceBaseUrl);
      }
      if (HasElevationProfileQueryDelay) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ElevationProfileQueryDelay);
      }
      if (proUpgradeUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProUpgradeUrl);
      }
      if (earthCommunityUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EarthCommunityUrl);
      }
      if (googleMapsUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GoogleMapsUrl);
      }
      if (sharingUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SharingUrl);
      }
      if (privacyPolicyUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrivacyPolicyUrl);
      }
      if (HasDoGplusUserCheck) {
        size += 2 + 1;
      }
      if (rocktreeDataProto_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RocktreeDataProto);
      }
      size += filmstripConfig_.CalculateSize(_repeated_filmstripConfig_codec);
      if (HasShowSigninButton) {
        size += 2 + 1;
      }
      if (proMeasureUpsellUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProMeasureUpsellUrl);
      }
      if (proPrintUpsellUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProPrintUpsellUrl);
      }
      if (starDataProto_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StarDataProto);
      }
      if (feedbackUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FeedbackUrl);
      }
      if (oauth2LoginUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Oauth2LoginUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EndSnippetProto other) {
      if (other == null) {
        return;
      }
      if (other.model_ != null) {
        if (model_ == null) {
          Model = new global::Keyhole.Dbroot.PlanetModelProto();
        }
        Model.MergeFrom(other.Model);
      }
      if (other.authServerUrl_ != null) {
        if (authServerUrl_ == null) {
          AuthServerUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        AuthServerUrl.MergeFrom(other.AuthServerUrl);
      }
      if (other.HasDisableAuthentication) {
        DisableAuthentication = other.DisableAuthentication;
      }
      mfeDomains_.Add(other.mfeDomains_);
      if (other.HasMfeLangParam) {
        MfeLangParam = other.MfeLangParam;
      }
      if (other.HasAdsUrlPatterns) {
        AdsUrlPatterns = other.AdsUrlPatterns;
      }
      if (other.reverseGeocoderUrl_ != null) {
        if (reverseGeocoderUrl_ == null) {
          ReverseGeocoderUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        ReverseGeocoderUrl.MergeFrom(other.ReverseGeocoderUrl);
      }
      if (other.HasReverseGeocoderProtocolVersion) {
        ReverseGeocoderProtocolVersion = other.ReverseGeocoderProtocolVersion;
      }
      if (other.HasSkyDatabaseIsAvailable) {
        SkyDatabaseIsAvailable = other.SkyDatabaseIsAvailable;
      }
      if (other.skyDatabaseUrl_ != null) {
        if (skyDatabaseUrl_ == null) {
          SkyDatabaseUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        SkyDatabaseUrl.MergeFrom(other.SkyDatabaseUrl);
      }
      if (other.defaultWebPageIntlUrl_ != null) {
        if (defaultWebPageIntlUrl_ == null) {
          DefaultWebPageIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        DefaultWebPageIntlUrl.MergeFrom(other.DefaultWebPageIntlUrl);
      }
      if (other.HasNumStartUpTips) {
        NumStartUpTips = other.NumStartUpTips;
      }
      if (other.startUpTipsUrl_ != null) {
        if (startUpTipsUrl_ == null) {
          StartUpTipsUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        StartUpTipsUrl.MergeFrom(other.StartUpTipsUrl);
      }
      if (other.HasNumProStartUpTips) {
        NumProStartUpTips = other.NumProStartUpTips;
      }
      if (other.proStartUpTipsUrl_ != null) {
        if (proStartUpTipsUrl_ == null) {
          ProStartUpTipsUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        ProStartUpTipsUrl.MergeFrom(other.ProStartUpTipsUrl);
      }
      if (other.startupTipsIntlUrl_ != null) {
        if (startupTipsIntlUrl_ == null) {
          StartupTipsIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        StartupTipsIntlUrl.MergeFrom(other.StartupTipsIntlUrl);
      }
      if (other.userGuideIntlUrl_ != null) {
        if (userGuideIntlUrl_ == null) {
          UserGuideIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        UserGuideIntlUrl.MergeFrom(other.UserGuideIntlUrl);
      }
      if (other.supportCenterIntlUrl_ != null) {
        if (supportCenterIntlUrl_ == null) {
          SupportCenterIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        SupportCenterIntlUrl.MergeFrom(other.SupportCenterIntlUrl);
      }
      if (other.businessListingIntlUrl_ != null) {
        if (businessListingIntlUrl_ == null) {
          BusinessListingIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        BusinessListingIntlUrl.MergeFrom(other.BusinessListingIntlUrl);
      }
      if (other.supportAnswerIntlUrl_ != null) {
        if (supportAnswerIntlUrl_ == null) {
          SupportAnswerIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        SupportAnswerIntlUrl.MergeFrom(other.SupportAnswerIntlUrl);
      }
      if (other.supportTopicIntlUrl_ != null) {
        if (supportTopicIntlUrl_ == null) {
          SupportTopicIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        SupportTopicIntlUrl.MergeFrom(other.SupportTopicIntlUrl);
      }
      if (other.supportRequestIntlUrl_ != null) {
        if (supportRequestIntlUrl_ == null) {
          SupportRequestIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        SupportRequestIntlUrl.MergeFrom(other.SupportRequestIntlUrl);
      }
      if (other.earthIntlUrl_ != null) {
        if (earthIntlUrl_ == null) {
          EarthIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        EarthIntlUrl.MergeFrom(other.EarthIntlUrl);
      }
      if (other.addContentUrl_ != null) {
        if (addContentUrl_ == null) {
          AddContentUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        AddContentUrl.MergeFrom(other.AddContentUrl);
      }
      if (other.sketchupNotInstalledUrl_ != null) {
        if (sketchupNotInstalledUrl_ == null) {
          SketchupNotInstalledUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        SketchupNotInstalledUrl.MergeFrom(other.SketchupNotInstalledUrl);
      }
      if (other.sketchupErrorUrl_ != null) {
        if (sketchupErrorUrl_ == null) {
          SketchupErrorUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        SketchupErrorUrl.MergeFrom(other.SketchupErrorUrl);
      }
      if (other.freeLicenseUrl_ != null) {
        if (freeLicenseUrl_ == null) {
          FreeLicenseUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        FreeLicenseUrl.MergeFrom(other.FreeLicenseUrl);
      }
      if (other.proLicenseUrl_ != null) {
        if (proLicenseUrl_ == null) {
          ProLicenseUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        ProLicenseUrl.MergeFrom(other.ProLicenseUrl);
      }
      if (other.tutorialUrl_ != null) {
        if (tutorialUrl_ == null) {
          TutorialUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        TutorialUrl.MergeFrom(other.TutorialUrl);
      }
      if (other.keyboardShortcutsUrl_ != null) {
        if (keyboardShortcutsUrl_ == null) {
          KeyboardShortcutsUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        KeyboardShortcutsUrl.MergeFrom(other.KeyboardShortcutsUrl);
      }
      if (other.releaseNotesUrl_ != null) {
        if (releaseNotesUrl_ == null) {
          ReleaseNotesUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        ReleaseNotesUrl.MergeFrom(other.ReleaseNotesUrl);
      }
      if (other.HasHideUserData) {
        HideUserData = other.HideUserData;
      }
      if (other.HasUseGeLogo) {
        UseGeLogo = other.UseGeLogo;
      }
      if (other.dioramaDescriptionUrlBase_ != null) {
        if (dioramaDescriptionUrlBase_ == null) {
          DioramaDescriptionUrlBase = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        DioramaDescriptionUrlBase.MergeFrom(other.DioramaDescriptionUrlBase);
      }
      if (other.HasDioramaDefaultColor) {
        DioramaDefaultColor = other.DioramaDefaultColor;
      }
      if (other.dioramaBlacklistUrl_ != null) {
        if (dioramaBlacklistUrl_ == null) {
          DioramaBlacklistUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        DioramaBlacklistUrl.MergeFrom(other.DioramaBlacklistUrl);
      }
      if (other.clientOptions_ != null) {
        if (clientOptions_ == null) {
          ClientOptions = new global::Keyhole.Dbroot.ClientOptionsProto();
        }
        ClientOptions.MergeFrom(other.ClientOptions);
      }
      if (other.fetchingOptions_ != null) {
        if (fetchingOptions_ == null) {
          FetchingOptions = new global::Keyhole.Dbroot.FetchingOptionsProto();
        }
        FetchingOptions.MergeFrom(other.FetchingOptions);
      }
      if (other.timeMachineOptions_ != null) {
        if (timeMachineOptions_ == null) {
          TimeMachineOptions = new global::Keyhole.Dbroot.TimeMachineOptionsProto();
        }
        TimeMachineOptions.MergeFrom(other.TimeMachineOptions);
      }
      if (other.csiOptions_ != null) {
        if (csiOptions_ == null) {
          CsiOptions = new global::Keyhole.Dbroot.CSIOptionsProto();
        }
        CsiOptions.MergeFrom(other.CsiOptions);
      }
      searchTab_.Add(other.searchTab_);
      cobrandInfo_.Add(other.cobrandInfo_);
      validDatabase_.Add(other.validDatabase_);
      configScript_.Add(other.configScript_);
      if (other.deauthServerUrl_ != null) {
        if (deauthServerUrl_ == null) {
          DeauthServerUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        DeauthServerUrl.MergeFrom(other.DeauthServerUrl);
      }
      if (other.swoopParameters_ != null) {
        if (swoopParameters_ == null) {
          SwoopParameters = new global::Keyhole.Dbroot.SwoopParamsProto();
        }
        SwoopParameters.MergeFrom(other.SwoopParameters);
      }
      if (other.bbsServerInfo_ != null) {
        if (bbsServerInfo_ == null) {
          BbsServerInfo = new global::Keyhole.Dbroot.PostingServerProto();
        }
        BbsServerInfo.MergeFrom(other.BbsServerInfo);
      }
      if (other.dataErrorServerInfo_ != null) {
        if (dataErrorServerInfo_ == null) {
          DataErrorServerInfo = new global::Keyhole.Dbroot.PostingServerProto();
        }
        DataErrorServerInfo.MergeFrom(other.DataErrorServerInfo);
      }
      planetaryDatabase_.Add(other.planetaryDatabase_);
      if (other.logServer_ != null) {
        if (logServer_ == null) {
          LogServer = new global::Keyhole.Dbroot.LogServerProto();
        }
        LogServer.MergeFrom(other.LogServer);
      }
      if (other.autopiaOptions_ != null) {
        if (autopiaOptions_ == null) {
          AutopiaOptions = new global::Keyhole.Dbroot.AutopiaOptionsProto();
        }
        AutopiaOptions.MergeFrom(other.AutopiaOptions);
      }
      if (other.searchConfig_ != null) {
        if (searchConfig_ == null) {
          SearchConfig = new global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto();
        }
        SearchConfig.MergeFrom(other.SearchConfig);
      }
      if (other.searchInfo_ != null) {
        if (searchInfo_ == null) {
          SearchInfo = new global::Keyhole.Dbroot.EndSnippetProto.Types.SearchInfoProto();
        }
        SearchInfo.MergeFrom(other.SearchInfo);
      }
      if (other.HasElevationServiceBaseUrl) {
        ElevationServiceBaseUrl = other.ElevationServiceBaseUrl;
      }
      if (other.HasElevationProfileQueryDelay) {
        ElevationProfileQueryDelay = other.ElevationProfileQueryDelay;
      }
      if (other.proUpgradeUrl_ != null) {
        if (proUpgradeUrl_ == null) {
          ProUpgradeUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        ProUpgradeUrl.MergeFrom(other.ProUpgradeUrl);
      }
      if (other.earthCommunityUrl_ != null) {
        if (earthCommunityUrl_ == null) {
          EarthCommunityUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        EarthCommunityUrl.MergeFrom(other.EarthCommunityUrl);
      }
      if (other.googleMapsUrl_ != null) {
        if (googleMapsUrl_ == null) {
          GoogleMapsUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        GoogleMapsUrl.MergeFrom(other.GoogleMapsUrl);
      }
      if (other.sharingUrl_ != null) {
        if (sharingUrl_ == null) {
          SharingUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        SharingUrl.MergeFrom(other.SharingUrl);
      }
      if (other.privacyPolicyUrl_ != null) {
        if (privacyPolicyUrl_ == null) {
          PrivacyPolicyUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        PrivacyPolicyUrl.MergeFrom(other.PrivacyPolicyUrl);
      }
      if (other.HasDoGplusUserCheck) {
        DoGplusUserCheck = other.DoGplusUserCheck;
      }
      if (other.rocktreeDataProto_ != null) {
        if (rocktreeDataProto_ == null) {
          RocktreeDataProto = new global::Keyhole.Dbroot.EndSnippetProto.Types.RockTreeDataProto();
        }
        RocktreeDataProto.MergeFrom(other.RocktreeDataProto);
      }
      filmstripConfig_.Add(other.filmstripConfig_);
      if (other.HasShowSigninButton) {
        ShowSigninButton = other.ShowSigninButton;
      }
      if (other.proMeasureUpsellUrl_ != null) {
        if (proMeasureUpsellUrl_ == null) {
          ProMeasureUpsellUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        ProMeasureUpsellUrl.MergeFrom(other.ProMeasureUpsellUrl);
      }
      if (other.proPrintUpsellUrl_ != null) {
        if (proPrintUpsellUrl_ == null) {
          ProPrintUpsellUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        ProPrintUpsellUrl.MergeFrom(other.ProPrintUpsellUrl);
      }
      if (other.starDataProto_ != null) {
        if (starDataProto_ == null) {
          StarDataProto = new global::Keyhole.Dbroot.EndSnippetProto.Types.StarDataProto();
        }
        StarDataProto.MergeFrom(other.StarDataProto);
      }
      if (other.feedbackUrl_ != null) {
        if (feedbackUrl_ == null) {
          FeedbackUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        FeedbackUrl.MergeFrom(other.FeedbackUrl);
      }
      if (other.oauth2LoginUrl_ != null) {
        if (oauth2LoginUrl_ == null) {
          Oauth2LoginUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        Oauth2LoginUrl.MergeFrom(other.Oauth2LoginUrl);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (model_ == null) {
              Model = new global::Keyhole.Dbroot.PlanetModelProto();
            }
            input.ReadMessage(Model);
            break;
          }
          case 18: {
            if (authServerUrl_ == null) {
              AuthServerUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(AuthServerUrl);
            break;
          }
          case 24: {
            DisableAuthentication = input.ReadBool();
            break;
          }
          case 34: {
            mfeDomains_.AddEntriesFrom(input, _repeated_mfeDomains_codec);
            break;
          }
          case 42: {
            MfeLangParam = input.ReadString();
            break;
          }
          case 50: {
            AdsUrlPatterns = input.ReadString();
            break;
          }
          case 58: {
            if (reverseGeocoderUrl_ == null) {
              ReverseGeocoderUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(ReverseGeocoderUrl);
            break;
          }
          case 64: {
            ReverseGeocoderProtocolVersion = input.ReadInt32();
            break;
          }
          case 72: {
            SkyDatabaseIsAvailable = input.ReadBool();
            break;
          }
          case 82: {
            if (skyDatabaseUrl_ == null) {
              SkyDatabaseUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(SkyDatabaseUrl);
            break;
          }
          case 90: {
            if (defaultWebPageIntlUrl_ == null) {
              DefaultWebPageIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(DefaultWebPageIntlUrl);
            break;
          }
          case 96: {
            NumStartUpTips = input.ReadInt32();
            break;
          }
          case 106: {
            if (startUpTipsUrl_ == null) {
              StartUpTipsUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(StartUpTipsUrl);
            break;
          }
          case 114: {
            if (userGuideIntlUrl_ == null) {
              UserGuideIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(UserGuideIntlUrl);
            break;
          }
          case 122: {
            if (supportCenterIntlUrl_ == null) {
              SupportCenterIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(SupportCenterIntlUrl);
            break;
          }
          case 130: {
            if (businessListingIntlUrl_ == null) {
              BusinessListingIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(BusinessListingIntlUrl);
            break;
          }
          case 138: {
            if (supportAnswerIntlUrl_ == null) {
              SupportAnswerIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(SupportAnswerIntlUrl);
            break;
          }
          case 146: {
            if (supportTopicIntlUrl_ == null) {
              SupportTopicIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(SupportTopicIntlUrl);
            break;
          }
          case 154: {
            if (supportRequestIntlUrl_ == null) {
              SupportRequestIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(SupportRequestIntlUrl);
            break;
          }
          case 162: {
            if (earthIntlUrl_ == null) {
              EarthIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(EarthIntlUrl);
            break;
          }
          case 170: {
            if (addContentUrl_ == null) {
              AddContentUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(AddContentUrl);
            break;
          }
          case 178: {
            if (sketchupNotInstalledUrl_ == null) {
              SketchupNotInstalledUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(SketchupNotInstalledUrl);
            break;
          }
          case 186: {
            if (sketchupErrorUrl_ == null) {
              SketchupErrorUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(SketchupErrorUrl);
            break;
          }
          case 194: {
            if (freeLicenseUrl_ == null) {
              FreeLicenseUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(FreeLicenseUrl);
            break;
          }
          case 202: {
            if (proLicenseUrl_ == null) {
              ProLicenseUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(ProLicenseUrl);
            break;
          }
          case 208: {
            HideUserData = input.ReadBool();
            break;
          }
          case 216: {
            UseGeLogo = input.ReadBool();
            break;
          }
          case 226: {
            if (dioramaDescriptionUrlBase_ == null) {
              DioramaDescriptionUrlBase = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(DioramaDescriptionUrlBase);
            break;
          }
          case 232: {
            DioramaDefaultColor = input.ReadUInt32();
            break;
          }
          case 242: {
            if (clientOptions_ == null) {
              ClientOptions = new global::Keyhole.Dbroot.ClientOptionsProto();
            }
            input.ReadMessage(ClientOptions);
            break;
          }
          case 250: {
            if (fetchingOptions_ == null) {
              FetchingOptions = new global::Keyhole.Dbroot.FetchingOptionsProto();
            }
            input.ReadMessage(FetchingOptions);
            break;
          }
          case 258: {
            if (timeMachineOptions_ == null) {
              TimeMachineOptions = new global::Keyhole.Dbroot.TimeMachineOptionsProto();
            }
            input.ReadMessage(TimeMachineOptions);
            break;
          }
          case 266: {
            if (csiOptions_ == null) {
              CsiOptions = new global::Keyhole.Dbroot.CSIOptionsProto();
            }
            input.ReadMessage(CsiOptions);
            break;
          }
          case 274: {
            searchTab_.AddEntriesFrom(input, _repeated_searchTab_codec);
            break;
          }
          case 282: {
            cobrandInfo_.AddEntriesFrom(input, _repeated_cobrandInfo_codec);
            break;
          }
          case 290: {
            validDatabase_.AddEntriesFrom(input, _repeated_validDatabase_codec);
            break;
          }
          case 298: {
            configScript_.AddEntriesFrom(input, _repeated_configScript_codec);
            break;
          }
          case 306: {
            if (deauthServerUrl_ == null) {
              DeauthServerUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(DeauthServerUrl);
            break;
          }
          case 314: {
            if (swoopParameters_ == null) {
              SwoopParameters = new global::Keyhole.Dbroot.SwoopParamsProto();
            }
            input.ReadMessage(SwoopParameters);
            break;
          }
          case 322: {
            if (bbsServerInfo_ == null) {
              BbsServerInfo = new global::Keyhole.Dbroot.PostingServerProto();
            }
            input.ReadMessage(BbsServerInfo);
            break;
          }
          case 330: {
            if (dataErrorServerInfo_ == null) {
              DataErrorServerInfo = new global::Keyhole.Dbroot.PostingServerProto();
            }
            input.ReadMessage(DataErrorServerInfo);
            break;
          }
          case 338: {
            planetaryDatabase_.AddEntriesFrom(input, _repeated_planetaryDatabase_codec);
            break;
          }
          case 346: {
            if (logServer_ == null) {
              LogServer = new global::Keyhole.Dbroot.LogServerProto();
            }
            input.ReadMessage(LogServer);
            break;
          }
          case 354: {
            if (autopiaOptions_ == null) {
              AutopiaOptions = new global::Keyhole.Dbroot.AutopiaOptionsProto();
            }
            input.ReadMessage(AutopiaOptions);
            break;
          }
          case 362: {
            if (searchInfo_ == null) {
              SearchInfo = new global::Keyhole.Dbroot.EndSnippetProto.Types.SearchInfoProto();
            }
            input.ReadMessage(SearchInfo);
            break;
          }
          case 370: {
            ElevationServiceBaseUrl = input.ReadString();
            break;
          }
          case 376: {
            ElevationProfileQueryDelay = input.ReadInt32();
            break;
          }
          case 386: {
            if (tutorialUrl_ == null) {
              TutorialUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(TutorialUrl);
            break;
          }
          case 394: {
            if (keyboardShortcutsUrl_ == null) {
              KeyboardShortcutsUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(KeyboardShortcutsUrl);
            break;
          }
          case 402: {
            if (releaseNotesUrl_ == null) {
              ReleaseNotesUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(ReleaseNotesUrl);
            break;
          }
          case 408: {
            NumProStartUpTips = input.ReadInt32();
            break;
          }
          case 418: {
            if (proStartUpTipsUrl_ == null) {
              ProStartUpTipsUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(ProStartUpTipsUrl);
            break;
          }
          case 426: {
            if (dioramaBlacklistUrl_ == null) {
              DioramaBlacklistUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(DioramaBlacklistUrl);
            break;
          }
          case 434: {
            if (searchConfig_ == null) {
              SearchConfig = new global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto();
            }
            input.ReadMessage(SearchConfig);
            break;
          }
          case 442: {
            if (proUpgradeUrl_ == null) {
              ProUpgradeUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(ProUpgradeUrl);
            break;
          }
          case 450: {
            if (earthCommunityUrl_ == null) {
              EarthCommunityUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(EarthCommunityUrl);
            break;
          }
          case 458: {
            if (googleMapsUrl_ == null) {
              GoogleMapsUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(GoogleMapsUrl);
            break;
          }
          case 466: {
            if (sharingUrl_ == null) {
              SharingUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(SharingUrl);
            break;
          }
          case 474: {
            if (privacyPolicyUrl_ == null) {
              PrivacyPolicyUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(PrivacyPolicyUrl);
            break;
          }
          case 480: {
            DoGplusUserCheck = input.ReadBool();
            break;
          }
          case 490: {
            if (rocktreeDataProto_ == null) {
              RocktreeDataProto = new global::Keyhole.Dbroot.EndSnippetProto.Types.RockTreeDataProto();
            }
            input.ReadMessage(RocktreeDataProto);
            break;
          }
          case 498: {
            filmstripConfig_.AddEntriesFrom(input, _repeated_filmstripConfig_codec);
            break;
          }
          case 504: {
            ShowSigninButton = input.ReadBool();
            break;
          }
          case 514: {
            if (startupTipsIntlUrl_ == null) {
              StartupTipsIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(StartupTipsIntlUrl);
            break;
          }
          case 522: {
            if (proMeasureUpsellUrl_ == null) {
              ProMeasureUpsellUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(ProMeasureUpsellUrl);
            break;
          }
          case 530: {
            if (proPrintUpsellUrl_ == null) {
              ProPrintUpsellUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(ProPrintUpsellUrl);
            break;
          }
          case 538: {
            if (starDataProto_ == null) {
              StarDataProto = new global::Keyhole.Dbroot.EndSnippetProto.Types.StarDataProto();
            }
            input.ReadMessage(StarDataProto);
            break;
          }
          case 546: {
            if (feedbackUrl_ == null) {
              FeedbackUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(FeedbackUrl);
            break;
          }
          case 554: {
            if (oauth2LoginUrl_ == null) {
              Oauth2LoginUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(Oauth2LoginUrl);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (model_ == null) {
              Model = new global::Keyhole.Dbroot.PlanetModelProto();
            }
            input.ReadMessage(Model);
            break;
          }
          case 18: {
            if (authServerUrl_ == null) {
              AuthServerUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(AuthServerUrl);
            break;
          }
          case 24: {
            DisableAuthentication = input.ReadBool();
            break;
          }
          case 34: {
            mfeDomains_.AddEntriesFrom(ref input, _repeated_mfeDomains_codec);
            break;
          }
          case 42: {
            MfeLangParam = input.ReadString();
            break;
          }
          case 50: {
            AdsUrlPatterns = input.ReadString();
            break;
          }
          case 58: {
            if (reverseGeocoderUrl_ == null) {
              ReverseGeocoderUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(ReverseGeocoderUrl);
            break;
          }
          case 64: {
            ReverseGeocoderProtocolVersion = input.ReadInt32();
            break;
          }
          case 72: {
            SkyDatabaseIsAvailable = input.ReadBool();
            break;
          }
          case 82: {
            if (skyDatabaseUrl_ == null) {
              SkyDatabaseUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(SkyDatabaseUrl);
            break;
          }
          case 90: {
            if (defaultWebPageIntlUrl_ == null) {
              DefaultWebPageIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(DefaultWebPageIntlUrl);
            break;
          }
          case 96: {
            NumStartUpTips = input.ReadInt32();
            break;
          }
          case 106: {
            if (startUpTipsUrl_ == null) {
              StartUpTipsUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(StartUpTipsUrl);
            break;
          }
          case 114: {
            if (userGuideIntlUrl_ == null) {
              UserGuideIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(UserGuideIntlUrl);
            break;
          }
          case 122: {
            if (supportCenterIntlUrl_ == null) {
              SupportCenterIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(SupportCenterIntlUrl);
            break;
          }
          case 130: {
            if (businessListingIntlUrl_ == null) {
              BusinessListingIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(BusinessListingIntlUrl);
            break;
          }
          case 138: {
            if (supportAnswerIntlUrl_ == null) {
              SupportAnswerIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(SupportAnswerIntlUrl);
            break;
          }
          case 146: {
            if (supportTopicIntlUrl_ == null) {
              SupportTopicIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(SupportTopicIntlUrl);
            break;
          }
          case 154: {
            if (supportRequestIntlUrl_ == null) {
              SupportRequestIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(SupportRequestIntlUrl);
            break;
          }
          case 162: {
            if (earthIntlUrl_ == null) {
              EarthIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(EarthIntlUrl);
            break;
          }
          case 170: {
            if (addContentUrl_ == null) {
              AddContentUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(AddContentUrl);
            break;
          }
          case 178: {
            if (sketchupNotInstalledUrl_ == null) {
              SketchupNotInstalledUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(SketchupNotInstalledUrl);
            break;
          }
          case 186: {
            if (sketchupErrorUrl_ == null) {
              SketchupErrorUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(SketchupErrorUrl);
            break;
          }
          case 194: {
            if (freeLicenseUrl_ == null) {
              FreeLicenseUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(FreeLicenseUrl);
            break;
          }
          case 202: {
            if (proLicenseUrl_ == null) {
              ProLicenseUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(ProLicenseUrl);
            break;
          }
          case 208: {
            HideUserData = input.ReadBool();
            break;
          }
          case 216: {
            UseGeLogo = input.ReadBool();
            break;
          }
          case 226: {
            if (dioramaDescriptionUrlBase_ == null) {
              DioramaDescriptionUrlBase = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(DioramaDescriptionUrlBase);
            break;
          }
          case 232: {
            DioramaDefaultColor = input.ReadUInt32();
            break;
          }
          case 242: {
            if (clientOptions_ == null) {
              ClientOptions = new global::Keyhole.Dbroot.ClientOptionsProto();
            }
            input.ReadMessage(ClientOptions);
            break;
          }
          case 250: {
            if (fetchingOptions_ == null) {
              FetchingOptions = new global::Keyhole.Dbroot.FetchingOptionsProto();
            }
            input.ReadMessage(FetchingOptions);
            break;
          }
          case 258: {
            if (timeMachineOptions_ == null) {
              TimeMachineOptions = new global::Keyhole.Dbroot.TimeMachineOptionsProto();
            }
            input.ReadMessage(TimeMachineOptions);
            break;
          }
          case 266: {
            if (csiOptions_ == null) {
              CsiOptions = new global::Keyhole.Dbroot.CSIOptionsProto();
            }
            input.ReadMessage(CsiOptions);
            break;
          }
          case 274: {
            searchTab_.AddEntriesFrom(ref input, _repeated_searchTab_codec);
            break;
          }
          case 282: {
            cobrandInfo_.AddEntriesFrom(ref input, _repeated_cobrandInfo_codec);
            break;
          }
          case 290: {
            validDatabase_.AddEntriesFrom(ref input, _repeated_validDatabase_codec);
            break;
          }
          case 298: {
            configScript_.AddEntriesFrom(ref input, _repeated_configScript_codec);
            break;
          }
          case 306: {
            if (deauthServerUrl_ == null) {
              DeauthServerUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(DeauthServerUrl);
            break;
          }
          case 314: {
            if (swoopParameters_ == null) {
              SwoopParameters = new global::Keyhole.Dbroot.SwoopParamsProto();
            }
            input.ReadMessage(SwoopParameters);
            break;
          }
          case 322: {
            if (bbsServerInfo_ == null) {
              BbsServerInfo = new global::Keyhole.Dbroot.PostingServerProto();
            }
            input.ReadMessage(BbsServerInfo);
            break;
          }
          case 330: {
            if (dataErrorServerInfo_ == null) {
              DataErrorServerInfo = new global::Keyhole.Dbroot.PostingServerProto();
            }
            input.ReadMessage(DataErrorServerInfo);
            break;
          }
          case 338: {
            planetaryDatabase_.AddEntriesFrom(ref input, _repeated_planetaryDatabase_codec);
            break;
          }
          case 346: {
            if (logServer_ == null) {
              LogServer = new global::Keyhole.Dbroot.LogServerProto();
            }
            input.ReadMessage(LogServer);
            break;
          }
          case 354: {
            if (autopiaOptions_ == null) {
              AutopiaOptions = new global::Keyhole.Dbroot.AutopiaOptionsProto();
            }
            input.ReadMessage(AutopiaOptions);
            break;
          }
          case 362: {
            if (searchInfo_ == null) {
              SearchInfo = new global::Keyhole.Dbroot.EndSnippetProto.Types.SearchInfoProto();
            }
            input.ReadMessage(SearchInfo);
            break;
          }
          case 370: {
            ElevationServiceBaseUrl = input.ReadString();
            break;
          }
          case 376: {
            ElevationProfileQueryDelay = input.ReadInt32();
            break;
          }
          case 386: {
            if (tutorialUrl_ == null) {
              TutorialUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(TutorialUrl);
            break;
          }
          case 394: {
            if (keyboardShortcutsUrl_ == null) {
              KeyboardShortcutsUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(KeyboardShortcutsUrl);
            break;
          }
          case 402: {
            if (releaseNotesUrl_ == null) {
              ReleaseNotesUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(ReleaseNotesUrl);
            break;
          }
          case 408: {
            NumProStartUpTips = input.ReadInt32();
            break;
          }
          case 418: {
            if (proStartUpTipsUrl_ == null) {
              ProStartUpTipsUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(ProStartUpTipsUrl);
            break;
          }
          case 426: {
            if (dioramaBlacklistUrl_ == null) {
              DioramaBlacklistUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(DioramaBlacklistUrl);
            break;
          }
          case 434: {
            if (searchConfig_ == null) {
              SearchConfig = new global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto();
            }
            input.ReadMessage(SearchConfig);
            break;
          }
          case 442: {
            if (proUpgradeUrl_ == null) {
              ProUpgradeUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(ProUpgradeUrl);
            break;
          }
          case 450: {
            if (earthCommunityUrl_ == null) {
              EarthCommunityUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(EarthCommunityUrl);
            break;
          }
          case 458: {
            if (googleMapsUrl_ == null) {
              GoogleMapsUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(GoogleMapsUrl);
            break;
          }
          case 466: {
            if (sharingUrl_ == null) {
              SharingUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(SharingUrl);
            break;
          }
          case 474: {
            if (privacyPolicyUrl_ == null) {
              PrivacyPolicyUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(PrivacyPolicyUrl);
            break;
          }
          case 480: {
            DoGplusUserCheck = input.ReadBool();
            break;
          }
          case 490: {
            if (rocktreeDataProto_ == null) {
              RocktreeDataProto = new global::Keyhole.Dbroot.EndSnippetProto.Types.RockTreeDataProto();
            }
            input.ReadMessage(RocktreeDataProto);
            break;
          }
          case 498: {
            filmstripConfig_.AddEntriesFrom(ref input, _repeated_filmstripConfig_codec);
            break;
          }
          case 504: {
            ShowSigninButton = input.ReadBool();
            break;
          }
          case 514: {
            if (startupTipsIntlUrl_ == null) {
              StartupTipsIntlUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(StartupTipsIntlUrl);
            break;
          }
          case 522: {
            if (proMeasureUpsellUrl_ == null) {
              ProMeasureUpsellUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(ProMeasureUpsellUrl);
            break;
          }
          case 530: {
            if (proPrintUpsellUrl_ == null) {
              ProPrintUpsellUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(ProPrintUpsellUrl);
            break;
          }
          case 538: {
            if (starDataProto_ == null) {
              StarDataProto = new global::Keyhole.Dbroot.EndSnippetProto.Types.StarDataProto();
            }
            input.ReadMessage(StarDataProto);
            break;
          }
          case 546: {
            if (feedbackUrl_ == null) {
              FeedbackUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(FeedbackUrl);
            break;
          }
          case 554: {
            if (oauth2LoginUrl_ == null) {
              Oauth2LoginUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(Oauth2LoginUrl);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the EndSnippetProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Search server configuration for Earth 6.1 and higher.  This obsoletes
      /// search_info and the SearchInfoProto message, and also obsoletes search_tab
      /// and SearchTabProto.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class SearchConfigProto : pb::IMessage<SearchConfigProto>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SearchConfigProto> _parser = new pb::MessageParser<SearchConfigProto>(() => new SearchConfigProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<SearchConfigProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Keyhole.Dbroot.EndSnippetProto.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SearchConfigProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SearchConfigProto(SearchConfigProto other) : this() {
          searchServer_ = other.searchServer_.Clone();
          oneboxService_ = other.oneboxService_.Clone();
          kmlSearchUrl_ = other.kmlSearchUrl_ != null ? other.kmlSearchUrl_.Clone() : null;
          kmlRenderUrl_ = other.kmlRenderUrl_ != null ? other.kmlRenderUrl_.Clone() : null;
          searchHistoryUrl_ = other.searchHistoryUrl_ != null ? other.searchHistoryUrl_.Clone() : null;
          errorPageUrl_ = other.errorPageUrl_ != null ? other.errorPageUrl_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SearchConfigProto Clone() {
          return new SearchConfigProto(this);
        }

        /// <summary>Field number for the "search_server" field.</summary>
        public const int SearchServerFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer> _repeated_searchServer_codec
            = pb::FieldCodec.ForMessage(10, global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Parser);
        private readonly pbc::RepeatedField<global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer> searchServer_ = new pbc::RepeatedField<global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer>();
        /// <summary>
        /// One or more search servers.  In the consumer Google Earth client, there
        /// is only one of these in the KH database, and it's Google Maps.
        /// Enterprise customers can add extra servers to have them appear in a
        /// tab-like UI above the search field.  For the time being, we will also
        /// convert legacy SearchTabProtos into SearchServers as best we can.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer> SearchServer {
          get { return searchServer_; }
        }

        /// <summary>Field number for the "onebox_service" field.</summary>
        public const int OneboxServiceFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.OneboxServiceProto> _repeated_oneboxService_codec
            = pb::FieldCodec.ForMessage(18, global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.OneboxServiceProto.Parser);
        private readonly pbc::RepeatedField<global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.OneboxServiceProto> oneboxService_ = new pbc::RepeatedField<global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.OneboxServiceProto>();
        /// <summary>
        /// List of onebox services. This field is repeated to support requirements.
        /// The client will select the first onebox service whose requirements allow
        /// it to connect. All others will be ignored.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.OneboxServiceProto> OneboxService {
          get { return oneboxService_; }
        }

        /// <summary>Field number for the "kml_search_url" field.</summary>
        public const int KmlSearchUrlFieldNumber = 3;
        private global::Keyhole.Dbroot.StringIdOrValueProto kmlSearchUrl_;
        /// <summary>
        /// URL of a page that will be shown when a KML search is performed.  This
        /// page should have JavaScript that reads the KML from the environment and
        /// renders it as HTML, and also performs onebox and searchlet searches if
        /// applicable.  The URL should be fully encoded, and can use $[hl] and
        /// friends if necessary.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Keyhole.Dbroot.StringIdOrValueProto KmlSearchUrl {
          get { return kmlSearchUrl_; }
          set {
            kmlSearchUrl_ = value;
          }
        }

        /// <summary>Field number for the "kml_render_url" field.</summary>
        public const int KmlRenderUrlFieldNumber = 4;
        private global::Keyhole.Dbroot.StringIdOrValueProto kmlRenderUrl_;
        /// <summary>
        /// URL of a page that will be shown when KML is rendered in the search
        /// panel.  This page should have JavaScript that reads the KML from the
        /// environment and renders it as HTML, but should NOT perform onebox or
        /// searchlet searches.  The URL should be fully encoded, and can use $[hl]
        /// and friends if necessary.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Keyhole.Dbroot.StringIdOrValueProto KmlRenderUrl {
          get { return kmlRenderUrl_; }
          set {
            kmlRenderUrl_ = value;
          }
        }

        /// <summary>Field number for the "search_history_url" field.</summary>
        public const int SearchHistoryUrlFieldNumber = 6;
        private global::Keyhole.Dbroot.StringIdOrValueProto searchHistoryUrl_;
        /// <summary>
        /// URL of a page that will be shown when the search history is requested.
        /// This page should have JavaScript that reads the search history from
        /// the client and renders it as HTML.  The URL should be fully encoded,
        /// and can use $[hl] and friends if necessary.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Keyhole.Dbroot.StringIdOrValueProto SearchHistoryUrl {
          get { return searchHistoryUrl_; }
          set {
            searchHistoryUrl_ = value;
          }
        }

        /// <summary>Field number for the "error_page_url" field.</summary>
        public const int ErrorPageUrlFieldNumber = 5;
        private global::Keyhole.Dbroot.StringIdOrValueProto errorPageUrl_;
        /// <summary>
        /// URL of a page that will be displayed if a network error or other local
        /// error occurs while performing a search.  This might be an error for a
        /// local geocode while in offline mode, a connection error while trying to
        /// connect to MFE, or some other error where we can't get an error message
        /// from the server.  (Obviously this page should be cached locally, or it's
        /// not terribly useful.)  The URL should be fully encoded, and can use $[hl]
        /// and friends if necessary.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Keyhole.Dbroot.StringIdOrValueProto ErrorPageUrl {
          get { return errorPageUrl_; }
          set {
            errorPageUrl_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as SearchConfigProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(SearchConfigProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!searchServer_.Equals(other.searchServer_)) return false;
          if(!oneboxService_.Equals(other.oneboxService_)) return false;
          if (!object.Equals(KmlSearchUrl, other.KmlSearchUrl)) return false;
          if (!object.Equals(KmlRenderUrl, other.KmlRenderUrl)) return false;
          if (!object.Equals(SearchHistoryUrl, other.SearchHistoryUrl)) return false;
          if (!object.Equals(ErrorPageUrl, other.ErrorPageUrl)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= searchServer_.GetHashCode();
          hash ^= oneboxService_.GetHashCode();
          if (kmlSearchUrl_ != null) hash ^= KmlSearchUrl.GetHashCode();
          if (kmlRenderUrl_ != null) hash ^= KmlRenderUrl.GetHashCode();
          if (searchHistoryUrl_ != null) hash ^= SearchHistoryUrl.GetHashCode();
          if (errorPageUrl_ != null) hash ^= ErrorPageUrl.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          searchServer_.WriteTo(output, _repeated_searchServer_codec);
          oneboxService_.WriteTo(output, _repeated_oneboxService_codec);
          if (kmlSearchUrl_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(KmlSearchUrl);
          }
          if (kmlRenderUrl_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(KmlRenderUrl);
          }
          if (errorPageUrl_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(ErrorPageUrl);
          }
          if (searchHistoryUrl_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(SearchHistoryUrl);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          searchServer_.WriteTo(ref output, _repeated_searchServer_codec);
          oneboxService_.WriteTo(ref output, _repeated_oneboxService_codec);
          if (kmlSearchUrl_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(KmlSearchUrl);
          }
          if (kmlRenderUrl_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(KmlRenderUrl);
          }
          if (errorPageUrl_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(ErrorPageUrl);
          }
          if (searchHistoryUrl_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(SearchHistoryUrl);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += searchServer_.CalculateSize(_repeated_searchServer_codec);
          size += oneboxService_.CalculateSize(_repeated_oneboxService_codec);
          if (kmlSearchUrl_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(KmlSearchUrl);
          }
          if (kmlRenderUrl_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(KmlRenderUrl);
          }
          if (searchHistoryUrl_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchHistoryUrl);
          }
          if (errorPageUrl_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ErrorPageUrl);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(SearchConfigProto other) {
          if (other == null) {
            return;
          }
          searchServer_.Add(other.searchServer_);
          oneboxService_.Add(other.oneboxService_);
          if (other.kmlSearchUrl_ != null) {
            if (kmlSearchUrl_ == null) {
              KmlSearchUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            KmlSearchUrl.MergeFrom(other.KmlSearchUrl);
          }
          if (other.kmlRenderUrl_ != null) {
            if (kmlRenderUrl_ == null) {
              KmlRenderUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            KmlRenderUrl.MergeFrom(other.KmlRenderUrl);
          }
          if (other.searchHistoryUrl_ != null) {
            if (searchHistoryUrl_ == null) {
              SearchHistoryUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            SearchHistoryUrl.MergeFrom(other.SearchHistoryUrl);
          }
          if (other.errorPageUrl_ != null) {
            if (errorPageUrl_ == null) {
              ErrorPageUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            ErrorPageUrl.MergeFrom(other.ErrorPageUrl);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                searchServer_.AddEntriesFrom(input, _repeated_searchServer_codec);
                break;
              }
              case 18: {
                oneboxService_.AddEntriesFrom(input, _repeated_oneboxService_codec);
                break;
              }
              case 26: {
                if (kmlSearchUrl_ == null) {
                  KmlSearchUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(KmlSearchUrl);
                break;
              }
              case 34: {
                if (kmlRenderUrl_ == null) {
                  KmlRenderUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(KmlRenderUrl);
                break;
              }
              case 42: {
                if (errorPageUrl_ == null) {
                  ErrorPageUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(ErrorPageUrl);
                break;
              }
              case 50: {
                if (searchHistoryUrl_ == null) {
                  SearchHistoryUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(SearchHistoryUrl);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                searchServer_.AddEntriesFrom(ref input, _repeated_searchServer_codec);
                break;
              }
              case 18: {
                oneboxService_.AddEntriesFrom(ref input, _repeated_oneboxService_codec);
                break;
              }
              case 26: {
                if (kmlSearchUrl_ == null) {
                  KmlSearchUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(KmlSearchUrl);
                break;
              }
              case 34: {
                if (kmlRenderUrl_ == null) {
                  KmlRenderUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(KmlRenderUrl);
                break;
              }
              case 42: {
                if (errorPageUrl_ == null) {
                  ErrorPageUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(ErrorPageUrl);
                break;
              }
              case 50: {
                if (searchHistoryUrl_ == null) {
                  SearchHistoryUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(SearchHistoryUrl);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the SearchConfigProto message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          /// <summary>
          /// Represents a search server that returns XML or KML search results.
          /// There can be any number of these.
          /// </summary>
          [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
          public sealed partial class SearchServer : pb::IMessage<SearchServer>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<SearchServer> _parser = new pb::MessageParser<SearchServer>(() => new SearchServer());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<SearchServer> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public SearchServer() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public SearchServer(SearchServer other) : this() {
              _hasBits0 = other._hasBits0;
              name_ = other.name_ != null ? other.name_.Clone() : null;
              url_ = other.url_ != null ? other.url_.Clone() : null;
              type_ = other.type_;
              htmlTransformUrl_ = other.htmlTransformUrl_ != null ? other.htmlTransformUrl_.Clone() : null;
              kmlTransformUrl_ = other.kmlTransformUrl_ != null ? other.kmlTransformUrl_.Clone() : null;
              supplementalUi_ = other.supplementalUi_ != null ? other.supplementalUi_.Clone() : null;
              suggestion_ = other.suggestion_.Clone();
              searchlet_ = other.searchlet_.Clone();
              requirements_ = other.requirements_ != null ? other.requirements_.Clone() : null;
              suggestServer_ = other.suggestServer_ != null ? other.suggestServer_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public SearchServer Clone() {
              return new SearchServer(this);
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 1;
            private global::Keyhole.Dbroot.StringIdOrValueProto name_;
            /// <summary>
            /// The name of the search service.  This will be shown to the user if
            /// (and only if) there is more than one primary_search_server defined.
            /// To avoid bloating the UI, it should be as short as possible.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Keyhole.Dbroot.StringIdOrValueProto Name {
              get { return name_; }
              set {
                name_ = value;
              }
            }

            /// <summary>Field number for the "url" field.</summary>
            public const int UrlFieldNumber = 2;
            private global::Keyhole.Dbroot.StringIdOrValueProto url_;
            /// <summary>
            /// The server URL, including protocol, port, and path.
            /// This URL must be fully encoded and use only ASCII characters.
            /// The query parameters will be added automatically, and should not be
            /// specified here.  You can use $[hl] and friends here if necessary, but
            /// the hl and gl parameters will be appended to the query anyway.
            /// Example: http://maps.google.com/local
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Keyhole.Dbroot.StringIdOrValueProto Url {
              get { return url_; }
              set {
                url_ = value;
              }
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 3;
            private readonly static global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.ResultType TypeDefaultValue = global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.ResultType.Kml;

            private global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.ResultType type_;
            /// <summary>
            /// The format in which this server will return results.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.ResultType Type {
              get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
              set {
                _hasBits0 |= 1;
                type_ = value;
              }
            }
            /// <summary>Gets whether the "type" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasType {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "type" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearType() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "html_transform_url" field.</summary>
            public const int HtmlTransformUrlFieldNumber = 4;
            private global::Keyhole.Dbroot.StringIdOrValueProto htmlTransformUrl_;
            /// <summary>
            /// If type is RESULT_TYPE_XML, the XML document received from the server
            /// will be fed through the XSLT stylesheet at this (fully encoded,
            /// ASCII-only) URL to generate the HTML that will be shown in the search
            /// results view.  (If type is RESULT_TYPE_KML, the HTML will be generated
            /// using JavaScript.) You can use $[hl] and friends here if necessary.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Keyhole.Dbroot.StringIdOrValueProto HtmlTransformUrl {
              get { return htmlTransformUrl_; }
              set {
                htmlTransformUrl_ = value;
              }
            }

            /// <summary>Field number for the "kml_transform_url" field.</summary>
            public const int KmlTransformUrlFieldNumber = 5;
            private global::Keyhole.Dbroot.StringIdOrValueProto kmlTransformUrl_;
            /// <summary>
            /// If type is RESULT_TYPE_XML, the XML document received from the server
            /// will be fed through the XSLT stylesheet at this (fully-encoded,
            /// ASCII-only) URL to generate the KML that will be shown in the 3D view.
            /// (If type is RESULT_TYPE_KML, the KML returned from the server will, of
            /// course, be used directly.) You can use $[hl] and friends here if
            /// necessary.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Keyhole.Dbroot.StringIdOrValueProto KmlTransformUrl {
              get { return kmlTransformUrl_; }
              set {
                kmlTransformUrl_ = value;
              }
            }

            /// <summary>Field number for the "supplemental_ui" field.</summary>
            public const int SupplementalUiFieldNumber = 6;
            private global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.SupplementalUi supplementalUi_;
            /// <summary>
            /// If specified, info about the supplemental UI.  If omitted, no
            /// supplemental UI button will be shown.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.SupplementalUi SupplementalUi {
              get { return supplementalUi_; }
              set {
                supplementalUi_ = value;
              }
            }

            /// <summary>Field number for the "suggestion" field.</summary>
            public const int SuggestionFieldNumber = 9;
            private static readonly pb::FieldCodec<global::Keyhole.Dbroot.StringIdOrValueProto> _repeated_suggestion_codec
                = pb::FieldCodec.ForMessage(74, global::Keyhole.Dbroot.StringIdOrValueProto.Parser);
            private readonly pbc::RepeatedField<global::Keyhole.Dbroot.StringIdOrValueProto> suggestion_ = new pbc::RepeatedField<global::Keyhole.Dbroot.StringIdOrValueProto>();
            /// <summary>
            /// If specified, one or more suggested searches for this server.  Could
            /// be something like "pizza near nyc" or "epsilon eridani".  When the
            /// search UI is shown in the client, one of these suggestions will be
            /// randomly selected and shown beneath the search field.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public pbc::RepeatedField<global::Keyhole.Dbroot.StringIdOrValueProto> Suggestion {
              get { return suggestion_; }
            }

            /// <summary>Field number for the "searchlet" field.</summary>
            public const int SearchletFieldNumber = 7;
            private static readonly pb::FieldCodec<global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.SearchletProto> _repeated_searchlet_codec
                = pb::FieldCodec.ForMessage(58, global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.SearchletProto.Parser);
            private readonly pbc::RepeatedField<global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.SearchletProto> searchlet_ = new pbc::RepeatedField<global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.SearchletProto>();
            /// <summary>
            /// List of searchlets that should be queried. Only searchlets that match
            /// the version number of the client will be queried, and only those that
            /// return non-empty results will be displayed.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public pbc::RepeatedField<global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.SearchletProto> Searchlet {
              get { return searchlet_; }
            }

            /// <summary>Field number for the "requirements" field.</summary>
            public const int RequirementsFieldNumber = 8;
            private global::Keyhole.Dbroot.RequirementProto requirements_;
            /// <summary>
            /// Optional requirements. The server will only be loaded if requirements
            /// are met. This can be used to selectively exclude a server based on
            /// client capabilities. See definition of RequirementProto for more
            /// details.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Keyhole.Dbroot.RequirementProto Requirements {
              get { return requirements_; }
              set {
                requirements_ = value;
              }
            }

            /// <summary>Field number for the "suggest_server" field.</summary>
            public const int SuggestServerFieldNumber = 10;
            private global::Keyhole.Dbroot.StringIdOrValueProto suggestServer_;
            /// <summary>
            /// The URL of a server, conforming to the Maps Suggest HTTP API, that
            /// should be used to provide search suggestions for queries to this
            /// server. If not provided, suggestions will be derived from local history
            /// only.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Keyhole.Dbroot.StringIdOrValueProto SuggestServer {
              get { return suggestServer_; }
              set {
                suggestServer_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as SearchServer);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(SearchServer other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Name, other.Name)) return false;
              if (!object.Equals(Url, other.Url)) return false;
              if (Type != other.Type) return false;
              if (!object.Equals(HtmlTransformUrl, other.HtmlTransformUrl)) return false;
              if (!object.Equals(KmlTransformUrl, other.KmlTransformUrl)) return false;
              if (!object.Equals(SupplementalUi, other.SupplementalUi)) return false;
              if(!suggestion_.Equals(other.suggestion_)) return false;
              if(!searchlet_.Equals(other.searchlet_)) return false;
              if (!object.Equals(Requirements, other.Requirements)) return false;
              if (!object.Equals(SuggestServer, other.SuggestServer)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              if (name_ != null) hash ^= Name.GetHashCode();
              if (url_ != null) hash ^= Url.GetHashCode();
              if (HasType) hash ^= Type.GetHashCode();
              if (htmlTransformUrl_ != null) hash ^= HtmlTransformUrl.GetHashCode();
              if (kmlTransformUrl_ != null) hash ^= KmlTransformUrl.GetHashCode();
              if (supplementalUi_ != null) hash ^= SupplementalUi.GetHashCode();
              hash ^= suggestion_.GetHashCode();
              hash ^= searchlet_.GetHashCode();
              if (requirements_ != null) hash ^= Requirements.GetHashCode();
              if (suggestServer_ != null) hash ^= SuggestServer.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (name_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Name);
              }
              if (url_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Url);
              }
              if (HasType) {
                output.WriteRawTag(24);
                output.WriteEnum((int) Type);
              }
              if (htmlTransformUrl_ != null) {
                output.WriteRawTag(34);
                output.WriteMessage(HtmlTransformUrl);
              }
              if (kmlTransformUrl_ != null) {
                output.WriteRawTag(42);
                output.WriteMessage(KmlTransformUrl);
              }
              if (supplementalUi_ != null) {
                output.WriteRawTag(50);
                output.WriteMessage(SupplementalUi);
              }
              searchlet_.WriteTo(output, _repeated_searchlet_codec);
              if (requirements_ != null) {
                output.WriteRawTag(66);
                output.WriteMessage(Requirements);
              }
              suggestion_.WriteTo(output, _repeated_suggestion_codec);
              if (suggestServer_ != null) {
                output.WriteRawTag(82);
                output.WriteMessage(SuggestServer);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (name_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Name);
              }
              if (url_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Url);
              }
              if (HasType) {
                output.WriteRawTag(24);
                output.WriteEnum((int) Type);
              }
              if (htmlTransformUrl_ != null) {
                output.WriteRawTag(34);
                output.WriteMessage(HtmlTransformUrl);
              }
              if (kmlTransformUrl_ != null) {
                output.WriteRawTag(42);
                output.WriteMessage(KmlTransformUrl);
              }
              if (supplementalUi_ != null) {
                output.WriteRawTag(50);
                output.WriteMessage(SupplementalUi);
              }
              searchlet_.WriteTo(ref output, _repeated_searchlet_codec);
              if (requirements_ != null) {
                output.WriteRawTag(66);
                output.WriteMessage(Requirements);
              }
              suggestion_.WriteTo(ref output, _repeated_suggestion_codec);
              if (suggestServer_ != null) {
                output.WriteRawTag(82);
                output.WriteMessage(SuggestServer);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              if (name_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
              }
              if (url_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Url);
              }
              if (HasType) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
              }
              if (htmlTransformUrl_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(HtmlTransformUrl);
              }
              if (kmlTransformUrl_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(KmlTransformUrl);
              }
              if (supplementalUi_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SupplementalUi);
              }
              size += suggestion_.CalculateSize(_repeated_suggestion_codec);
              size += searchlet_.CalculateSize(_repeated_searchlet_codec);
              if (requirements_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Requirements);
              }
              if (suggestServer_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SuggestServer);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(SearchServer other) {
              if (other == null) {
                return;
              }
              if (other.name_ != null) {
                if (name_ == null) {
                  Name = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                Name.MergeFrom(other.Name);
              }
              if (other.url_ != null) {
                if (url_ == null) {
                  Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                Url.MergeFrom(other.Url);
              }
              if (other.HasType) {
                Type = other.Type;
              }
              if (other.htmlTransformUrl_ != null) {
                if (htmlTransformUrl_ == null) {
                  HtmlTransformUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                HtmlTransformUrl.MergeFrom(other.HtmlTransformUrl);
              }
              if (other.kmlTransformUrl_ != null) {
                if (kmlTransformUrl_ == null) {
                  KmlTransformUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                KmlTransformUrl.MergeFrom(other.KmlTransformUrl);
              }
              if (other.supplementalUi_ != null) {
                if (supplementalUi_ == null) {
                  SupplementalUi = new global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.SupplementalUi();
                }
                SupplementalUi.MergeFrom(other.SupplementalUi);
              }
              suggestion_.Add(other.suggestion_);
              searchlet_.Add(other.searchlet_);
              if (other.requirements_ != null) {
                if (requirements_ == null) {
                  Requirements = new global::Keyhole.Dbroot.RequirementProto();
                }
                Requirements.MergeFrom(other.Requirements);
              }
              if (other.suggestServer_ != null) {
                if (suggestServer_ == null) {
                  SuggestServer = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                SuggestServer.MergeFrom(other.SuggestServer);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
              if ((tag & 7) == 4) {
                // Abort on any end group tag.
                return;
              }
              switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (name_ == null) {
                      Name = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(Name);
                    break;
                  }
                  case 18: {
                    if (url_ == null) {
                      Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(Url);
                    break;
                  }
                  case 24: {
                    Type = (global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.ResultType) input.ReadEnum();
                    break;
                  }
                  case 34: {
                    if (htmlTransformUrl_ == null) {
                      HtmlTransformUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(HtmlTransformUrl);
                    break;
                  }
                  case 42: {
                    if (kmlTransformUrl_ == null) {
                      KmlTransformUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(KmlTransformUrl);
                    break;
                  }
                  case 50: {
                    if (supplementalUi_ == null) {
                      SupplementalUi = new global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.SupplementalUi();
                    }
                    input.ReadMessage(SupplementalUi);
                    break;
                  }
                  case 58: {
                    searchlet_.AddEntriesFrom(input, _repeated_searchlet_codec);
                    break;
                  }
                  case 66: {
                    if (requirements_ == null) {
                      Requirements = new global::Keyhole.Dbroot.RequirementProto();
                    }
                    input.ReadMessage(Requirements);
                    break;
                  }
                  case 74: {
                    suggestion_.AddEntriesFrom(input, _repeated_suggestion_codec);
                    break;
                  }
                  case 82: {
                    if (suggestServer_ == null) {
                      SuggestServer = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(SuggestServer);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
              if ((tag & 7) == 4) {
                // Abort on any end group tag.
                return;
              }
              switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    if (name_ == null) {
                      Name = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(Name);
                    break;
                  }
                  case 18: {
                    if (url_ == null) {
                      Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(Url);
                    break;
                  }
                  case 24: {
                    Type = (global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.ResultType) input.ReadEnum();
                    break;
                  }
                  case 34: {
                    if (htmlTransformUrl_ == null) {
                      HtmlTransformUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(HtmlTransformUrl);
                    break;
                  }
                  case 42: {
                    if (kmlTransformUrl_ == null) {
                      KmlTransformUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(KmlTransformUrl);
                    break;
                  }
                  case 50: {
                    if (supplementalUi_ == null) {
                      SupplementalUi = new global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Types.SupplementalUi();
                    }
                    input.ReadMessage(SupplementalUi);
                    break;
                  }
                  case 58: {
                    searchlet_.AddEntriesFrom(ref input, _repeated_searchlet_codec);
                    break;
                  }
                  case 66: {
                    if (requirements_ == null) {
                      Requirements = new global::Keyhole.Dbroot.RequirementProto();
                    }
                    input.ReadMessage(Requirements);
                    break;
                  }
                  case 74: {
                    suggestion_.AddEntriesFrom(ref input, _repeated_suggestion_codec);
                    break;
                  }
                  case 82: {
                    if (suggestServer_ == null) {
                      SuggestServer = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(SuggestServer);
                    break;
                  }
                }
              }
            }
            #endif

            #region Nested types
            /// <summary>Container for nested types declared in the SearchServer message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static partial class Types {
              /// <summary>
              /// Result format type for search results.
              /// </summary>
              public enum ResultType {
                /// <summary>
                /// The results are pure KML, which should be rendered in the Earth 3D
                /// view directly. The search results listing should be generated from
                /// the KML in whatever way is most appropriate.
                /// </summary>
                [pbr::OriginalName("RESULT_TYPE_KML")] Kml = 0,
                /// <summary>
                /// The results are an XML document which can be piped through XSLT style
                /// sheets to generate KML for display in the Earth 3D view and HTML for
                /// display in the search results listing.
                /// </summary>
                [pbr::OriginalName("RESULT_TYPE_XML")] Xml = 1,
              }

              /// <summary>
              /// Information about the supplemental UI, which shows an HTML page that
              /// can be used for rich search entry UI.
              /// </summary>
              [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
              public sealed partial class SupplementalUi : pb::IMessage<SupplementalUi>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<SupplementalUi> _parser = new pb::MessageParser<SupplementalUi>(() => new SupplementalUi());
                private pb::UnknownFieldSet _unknownFields;
                private int _hasBits0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public static pb::MessageParser<SupplementalUi> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public SupplementalUi() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public SupplementalUi(SupplementalUi other) : this() {
                  _hasBits0 = other._hasBits0;
                  url_ = other.url_ != null ? other.url_.Clone() : null;
                  label_ = other.label_ != null ? other.label_.Clone() : null;
                  height_ = other.height_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public SupplementalUi Clone() {
                  return new SupplementalUi(this);
                }

                /// <summary>Field number for the "url" field.</summary>
                public const int UrlFieldNumber = 1;
                private global::Keyhole.Dbroot.StringIdOrValueProto url_;
                /// <summary>
                /// If specified, a button will appear below the search field that, when
                /// clicked, will load this URL in the search panel.  The page can
                /// perform search requests through a JavaScript API.  If omitted, the
                /// button will not be shown. You can use $[hl] and friends here if
                /// necessary.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public global::Keyhole.Dbroot.StringIdOrValueProto Url {
                  get { return url_; }
                  set {
                    url_ = value;
                  }
                }

                /// <summary>Field number for the "label" field.</summary>
                public const int LabelFieldNumber = 2;
                private global::Keyhole.Dbroot.StringIdOrValueProto label_;
                /// <summary>
                /// If specified, the label for the supplemental UI.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public global::Keyhole.Dbroot.StringIdOrValueProto Label {
                  get { return label_; }
                  set {
                    label_ = value;
                  }
                }

                /// <summary>Field number for the "height" field.</summary>
                public const int HeightFieldNumber = 3;
                private readonly static int HeightDefaultValue = 160;

                private int height_;
                /// <summary>
                /// The height, in pixels, that will be allocated in the search panel for
                /// the supplemental UI.  This includes the height of the search panel
                /// itself.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public int Height {
                  get { if ((_hasBits0 & 1) != 0) { return height_; } else { return HeightDefaultValue; } }
                  set {
                    _hasBits0 |= 1;
                    height_ = value;
                  }
                }
                /// <summary>Gets whether the "height" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public bool HasHeight {
                  get { return (_hasBits0 & 1) != 0; }
                }
                /// <summary>Clears the value of the "height" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public void ClearHeight() {
                  _hasBits0 &= ~1;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public override bool Equals(object other) {
                  return Equals(other as SupplementalUi);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public bool Equals(SupplementalUi other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (!object.Equals(Url, other.Url)) return false;
                  if (!object.Equals(Label, other.Label)) return false;
                  if (Height != other.Height) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public override int GetHashCode() {
                  int hash = 1;
                  if (url_ != null) hash ^= Url.GetHashCode();
                  if (label_ != null) hash ^= Label.GetHashCode();
                  if (HasHeight) hash ^= Height.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  if (url_ != null) {
                    output.WriteRawTag(10);
                    output.WriteMessage(Url);
                  }
                  if (label_ != null) {
                    output.WriteRawTag(18);
                    output.WriteMessage(Label);
                  }
                  if (HasHeight) {
                    output.WriteRawTag(24);
                    output.WriteInt32(Height);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  if (url_ != null) {
                    output.WriteRawTag(10);
                    output.WriteMessage(Url);
                  }
                  if (label_ != null) {
                    output.WriteRawTag(18);
                    output.WriteMessage(Label);
                  }
                  if (HasHeight) {
                    output.WriteRawTag(24);
                    output.WriteInt32(Height);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public int CalculateSize() {
                  int size = 0;
                  if (url_ != null) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Url);
                  }
                  if (label_ != null) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Label);
                  }
                  if (HasHeight) {
                    size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public void MergeFrom(SupplementalUi other) {
                  if (other == null) {
                    return;
                  }
                  if (other.url_ != null) {
                    if (url_ == null) {
                      Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    Url.MergeFrom(other.Url);
                  }
                  if (other.label_ != null) {
                    if (label_ == null) {
                      Label = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    Label.MergeFrom(other.Label);
                  }
                  if (other.HasHeight) {
                    Height = other.Height;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                  if ((tag & 7) == 4) {
                    // Abort on any end group tag.
                    return;
                  }
                  switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        if (url_ == null) {
                          Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
                        }
                        input.ReadMessage(Url);
                        break;
                      }
                      case 18: {
                        if (label_ == null) {
                          Label = new global::Keyhole.Dbroot.StringIdOrValueProto();
                        }
                        input.ReadMessage(Label);
                        break;
                      }
                      case 24: {
                        Height = input.ReadInt32();
                        break;
                      }
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                  if ((tag & 7) == 4) {
                    // Abort on any end group tag.
                    return;
                  }
                  switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                      case 10: {
                        if (url_ == null) {
                          Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
                        }
                        input.ReadMessage(Url);
                        break;
                      }
                      case 18: {
                        if (label_ == null) {
                          Label = new global::Keyhole.Dbroot.StringIdOrValueProto();
                        }
                        input.ReadMessage(Label);
                        break;
                      }
                      case 24: {
                        Height = input.ReadInt32();
                        break;
                      }
                    }
                  }
                }
                #endif

              }

              /// <summary>
              /// Searchlet configuration.
              /// </summary>
              [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
              public sealed partial class SearchletProto : pb::IMessage<SearchletProto>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<SearchletProto> _parser = new pb::MessageParser<SearchletProto>(() => new SearchletProto());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public static pb::MessageParser<SearchletProto> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Types.SearchServer.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public SearchletProto() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public SearchletProto(SearchletProto other) : this() {
                  url_ = other.url_ != null ? other.url_.Clone() : null;
                  name_ = other.name_ != null ? other.name_.Clone() : null;
                  requirements_ = other.requirements_ != null ? other.requirements_.Clone() : null;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public SearchletProto Clone() {
                  return new SearchletProto(this);
                }

                /// <summary>Field number for the "url" field.</summary>
                public const int UrlFieldNumber = 1;
                private global::Keyhole.Dbroot.StringIdOrValueProto url_;
                /// <summary>
                /// The URL of the searchlet service, including protocol, port, and path.
                /// This URL must be fully encoded and use only ASCII characters.
                /// The query parameters will be added automatically, and should not be
                /// specified here. You can, however, use $[hl] and friends here in the
                /// URL path if necessary.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public global::Keyhole.Dbroot.StringIdOrValueProto Url {
                  get { return url_; }
                  set {
                    url_ = value;
                  }
                }

                /// <summary>Field number for the "name" field.</summary>
                public const int NameFieldNumber = 2;
                private global::Keyhole.Dbroot.StringIdOrValueProto name_;
                /// <summary>
                /// The name of this searchlet, which will be shown in its results.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public global::Keyhole.Dbroot.StringIdOrValueProto Name {
                  get { return name_; }
                  set {
                    name_ = value;
                  }
                }

                /// <summary>Field number for the "requirements" field.</summary>
                public const int RequirementsFieldNumber = 3;
                private global::Keyhole.Dbroot.RequirementProto requirements_;
                /// <summary>
                /// optional requirements - searchlet will only be used if requirements
                /// are met. This can be used to selectively exclude a searchlet based on
                /// client capabilities. See definition of RequirementProto for more
                /// details.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public global::Keyhole.Dbroot.RequirementProto Requirements {
                  get { return requirements_; }
                  set {
                    requirements_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public override bool Equals(object other) {
                  return Equals(other as SearchletProto);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public bool Equals(SearchletProto other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (!object.Equals(Url, other.Url)) return false;
                  if (!object.Equals(Name, other.Name)) return false;
                  if (!object.Equals(Requirements, other.Requirements)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public override int GetHashCode() {
                  int hash = 1;
                  if (url_ != null) hash ^= Url.GetHashCode();
                  if (name_ != null) hash ^= Name.GetHashCode();
                  if (requirements_ != null) hash ^= Requirements.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  if (url_ != null) {
                    output.WriteRawTag(10);
                    output.WriteMessage(Url);
                  }
                  if (name_ != null) {
                    output.WriteRawTag(18);
                    output.WriteMessage(Name);
                  }
                  if (requirements_ != null) {
                    output.WriteRawTag(26);
                    output.WriteMessage(Requirements);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  if (url_ != null) {
                    output.WriteRawTag(10);
                    output.WriteMessage(Url);
                  }
                  if (name_ != null) {
                    output.WriteRawTag(18);
                    output.WriteMessage(Name);
                  }
                  if (requirements_ != null) {
                    output.WriteRawTag(26);
                    output.WriteMessage(Requirements);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public int CalculateSize() {
                  int size = 0;
                  if (url_ != null) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Url);
                  }
                  if (name_ != null) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
                  }
                  if (requirements_ != null) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Requirements);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public void MergeFrom(SearchletProto other) {
                  if (other == null) {
                    return;
                  }
                  if (other.url_ != null) {
                    if (url_ == null) {
                      Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    Url.MergeFrom(other.Url);
                  }
                  if (other.name_ != null) {
                    if (name_ == null) {
                      Name = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    Name.MergeFrom(other.Name);
                  }
                  if (other.requirements_ != null) {
                    if (requirements_ == null) {
                      Requirements = new global::Keyhole.Dbroot.RequirementProto();
                    }
                    Requirements.MergeFrom(other.Requirements);
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                  if ((tag & 7) == 4) {
                    // Abort on any end group tag.
                    return;
                  }
                  switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        if (url_ == null) {
                          Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
                        }
                        input.ReadMessage(Url);
                        break;
                      }
                      case 18: {
                        if (name_ == null) {
                          Name = new global::Keyhole.Dbroot.StringIdOrValueProto();
                        }
                        input.ReadMessage(Name);
                        break;
                      }
                      case 26: {
                        if (requirements_ == null) {
                          Requirements = new global::Keyhole.Dbroot.RequirementProto();
                        }
                        input.ReadMessage(Requirements);
                        break;
                      }
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                  if ((tag & 7) == 4) {
                    // Abort on any end group tag.
                    return;
                  }
                  switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                      case 10: {
                        if (url_ == null) {
                          Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
                        }
                        input.ReadMessage(Url);
                        break;
                      }
                      case 18: {
                        if (name_ == null) {
                          Name = new global::Keyhole.Dbroot.StringIdOrValueProto();
                        }
                        input.ReadMessage(Name);
                        break;
                      }
                      case 26: {
                        if (requirements_ == null) {
                          Requirements = new global::Keyhole.Dbroot.RequirementProto();
                        }
                        input.ReadMessage(Requirements);
                        break;
                      }
                    }
                  }
                }
                #endif

              }

            }
            #endregion

          }

          /// <summary>
          /// Configuration for the onebox service.
          /// </summary>
          [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
          public sealed partial class OneboxServiceProto : pb::IMessage<OneboxServiceProto>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<OneboxServiceProto> _parser = new pb::MessageParser<OneboxServiceProto>(() => new OneboxServiceProto());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<OneboxServiceProto> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Keyhole.Dbroot.EndSnippetProto.Types.SearchConfigProto.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public OneboxServiceProto() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public OneboxServiceProto(OneboxServiceProto other) : this() {
              serviceUrl_ = other.serviceUrl_ != null ? other.serviceUrl_.Clone() : null;
              requirements_ = other.requirements_ != null ? other.requirements_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public OneboxServiceProto Clone() {
              return new OneboxServiceProto(this);
            }

            /// <summary>Field number for the "service_url" field.</summary>
            public const int ServiceUrlFieldNumber = 1;
            private global::Keyhole.Dbroot.StringIdOrValueProto serviceUrl_;
            /// <summary>
            /// The URL of the onebox service, including protocol, port, and path.
            /// This URL must be fully encoded and use only ASCII characters.  It can
            /// use $[hl] and friends here if necessary.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Keyhole.Dbroot.StringIdOrValueProto ServiceUrl {
              get { return serviceUrl_; }
              set {
                serviceUrl_ = value;
              }
            }

            /// <summary>Field number for the "requirements" field.</summary>
            public const int RequirementsFieldNumber = 2;
            private global::Keyhole.Dbroot.RequirementProto requirements_;
            /// <summary>
            /// optional requirements - onebox service will only be used if
            /// requirements are met. This can be used to selectively choose a onebox
            /// service based on client capabilities. See definition of
            /// RequirementProto for more details.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Keyhole.Dbroot.RequirementProto Requirements {
              get { return requirements_; }
              set {
                requirements_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as OneboxServiceProto);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(OneboxServiceProto other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(ServiceUrl, other.ServiceUrl)) return false;
              if (!object.Equals(Requirements, other.Requirements)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              if (serviceUrl_ != null) hash ^= ServiceUrl.GetHashCode();
              if (requirements_ != null) hash ^= Requirements.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (serviceUrl_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(ServiceUrl);
              }
              if (requirements_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Requirements);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (serviceUrl_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(ServiceUrl);
              }
              if (requirements_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Requirements);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              if (serviceUrl_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceUrl);
              }
              if (requirements_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Requirements);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(OneboxServiceProto other) {
              if (other == null) {
                return;
              }
              if (other.serviceUrl_ != null) {
                if (serviceUrl_ == null) {
                  ServiceUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                ServiceUrl.MergeFrom(other.ServiceUrl);
              }
              if (other.requirements_ != null) {
                if (requirements_ == null) {
                  Requirements = new global::Keyhole.Dbroot.RequirementProto();
                }
                Requirements.MergeFrom(other.Requirements);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
              if ((tag & 7) == 4) {
                // Abort on any end group tag.
                return;
              }
              switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (serviceUrl_ == null) {
                      ServiceUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(ServiceUrl);
                    break;
                  }
                  case 18: {
                    if (requirements_ == null) {
                      Requirements = new global::Keyhole.Dbroot.RequirementProto();
                    }
                    input.ReadMessage(Requirements);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
              if ((tag & 7) == 4) {
                // Abort on any end group tag.
                return;
              }
              switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    if (serviceUrl_ == null) {
                      ServiceUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(ServiceUrl);
                    break;
                  }
                  case 18: {
                    if (requirements_ == null) {
                      Requirements = new global::Keyhole.Dbroot.RequirementProto();
                    }
                    input.ReadMessage(Requirements);
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

      /// <summary>
      /// Search server configuration.  Deprecated and unused since Earth 6.1.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class SearchInfoProto : pb::IMessage<SearchInfoProto>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SearchInfoProto> _parser = new pb::MessageParser<SearchInfoProto>(() => new SearchInfoProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<SearchInfoProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Keyhole.Dbroot.EndSnippetProto.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SearchInfoProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SearchInfoProto(SearchInfoProto other) : this() {
          defaultUrl_ = other.defaultUrl_;
          geocodeParam_ = other.geocodeParam_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SearchInfoProto Clone() {
          return new SearchInfoProto(this);
        }

        /// <summary>Field number for the "default_url" field.</summary>
        public const int DefaultUrlFieldNumber = 1;
        private readonly static string DefaultUrlDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("aHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBz"), 0, 27);

        private string defaultUrl_;
        /// <summary>
        /// Default search server (MFE) URL.
        /// Note that this can be reconfigured on a per-country basis with
        /// MfeDomainFeaturesProto.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string DefaultUrl {
          get { return defaultUrl_ ?? DefaultUrlDefaultValue; }
          set {
            defaultUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "default_url" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasDefaultUrl {
          get { return defaultUrl_ != null; }
        }
        /// <summary>Clears the value of the "default_url" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearDefaultUrl() {
          defaultUrl_ = null;
        }

        /// <summary>Field number for the "geocode_param" field.</summary>
        public const int GeocodeParamFieldNumber = 2;
        private readonly static string GeocodeParamDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("cQ=="), 0, 1);

        private string geocodeParam_;
        /// <summary>
        /// Query parameter to use for queries on maps server.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string GeocodeParam {
          get { return geocodeParam_ ?? GeocodeParamDefaultValue; }
          set {
            geocodeParam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "geocode_param" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasGeocodeParam {
          get { return geocodeParam_ != null; }
        }
        /// <summary>Clears the value of the "geocode_param" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearGeocodeParam() {
          geocodeParam_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as SearchInfoProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(SearchInfoProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DefaultUrl != other.DefaultUrl) return false;
          if (GeocodeParam != other.GeocodeParam) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasDefaultUrl) hash ^= DefaultUrl.GetHashCode();
          if (HasGeocodeParam) hash ^= GeocodeParam.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasDefaultUrl) {
            output.WriteRawTag(10);
            output.WriteString(DefaultUrl);
          }
          if (HasGeocodeParam) {
            output.WriteRawTag(18);
            output.WriteString(GeocodeParam);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasDefaultUrl) {
            output.WriteRawTag(10);
            output.WriteString(DefaultUrl);
          }
          if (HasGeocodeParam) {
            output.WriteRawTag(18);
            output.WriteString(GeocodeParam);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasDefaultUrl) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultUrl);
          }
          if (HasGeocodeParam) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GeocodeParam);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(SearchInfoProto other) {
          if (other == null) {
            return;
          }
          if (other.HasDefaultUrl) {
            DefaultUrl = other.DefaultUrl;
          }
          if (other.HasGeocodeParam) {
            GeocodeParam = other.GeocodeParam;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                DefaultUrl = input.ReadString();
                break;
              }
              case 18: {
                GeocodeParam = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                DefaultUrl = input.ReadString();
                break;
              }
              case 18: {
                GeocodeParam = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Data for the client to connect to a server for RockTree (EOS3D) data.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class RockTreeDataProto : pb::IMessage<RockTreeDataProto>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<RockTreeDataProto> _parser = new pb::MessageParser<RockTreeDataProto>(() => new RockTreeDataProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<RockTreeDataProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Keyhole.Dbroot.EndSnippetProto.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public RockTreeDataProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public RockTreeDataProto(RockTreeDataProto other) : this() {
          url_ = other.url_ != null ? other.url_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public RockTreeDataProto Clone() {
          return new RockTreeDataProto(this);
        }

        /// <summary>Field number for the "url" field.</summary>
        public const int UrlFieldNumber = 1;
        private global::Keyhole.Dbroot.StringIdOrValueProto url_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Keyhole.Dbroot.StringIdOrValueProto Url {
          get { return url_; }
          set {
            url_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as RockTreeDataProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(RockTreeDataProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Url, other.Url)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (url_ != null) hash ^= Url.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (url_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Url);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (url_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Url);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (url_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Url);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(RockTreeDataProto other) {
          if (other == null) {
            return;
          }
          if (other.url_ != null) {
            if (url_ == null) {
              Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            Url.MergeFrom(other.Url);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (url_ == null) {
                  Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(Url);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (url_ == null) {
                  Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(Url);
                break;
              }
            }
          }
        }
        #endif

      }

      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class FilmstripConfigProto : pb::IMessage<FilmstripConfigProto>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<FilmstripConfigProto> _parser = new pb::MessageParser<FilmstripConfigProto>(() => new FilmstripConfigProto());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<FilmstripConfigProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Keyhole.Dbroot.EndSnippetProto.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public FilmstripConfigProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public FilmstripConfigProto(FilmstripConfigProto other) : this() {
          _hasBits0 = other._hasBits0;
          requirements_ = other.requirements_ != null ? other.requirements_.Clone() : null;
          alleycatUrlTemplate_ = other.alleycatUrlTemplate_ != null ? other.alleycatUrlTemplate_.Clone() : null;
          fallbackAlleycatUrlTemplate_ = other.fallbackAlleycatUrlTemplate_ != null ? other.fallbackAlleycatUrlTemplate_.Clone() : null;
          metadataUrlTemplate_ = other.metadataUrlTemplate_ != null ? other.metadataUrlTemplate_.Clone() : null;
          thumbnailUrlTemplate_ = other.thumbnailUrlTemplate_ != null ? other.thumbnailUrlTemplate_.Clone() : null;
          kmlUrlTemplate_ = other.kmlUrlTemplate_ != null ? other.kmlUrlTemplate_.Clone() : null;
          featuredToursUrl_ = other.featuredToursUrl_ != null ? other.featuredToursUrl_.Clone() : null;
          enableViewportFallback_ = other.enableViewportFallback_;
          viewportFallbackDistance_ = other.viewportFallbackDistance_;
          imageryType_ = other.imageryType_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public FilmstripConfigProto Clone() {
          return new FilmstripConfigProto(this);
        }

        /// <summary>Field number for the "requirements" field.</summary>
        public const int RequirementsFieldNumber = 1;
        private global::Keyhole.Dbroot.RequirementProto requirements_;
        /// <summary>
        /// Client requirements for using the templates listed below.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Keyhole.Dbroot.RequirementProto Requirements {
          get { return requirements_; }
          set {
            requirements_ = value;
          }
        }

        /// <summary>Field number for the "alleycat_url_template" field.</summary>
        public const int AlleycatUrlTemplateFieldNumber = 2;
        private global::Keyhole.Dbroot.StringIdOrValueProto alleycatUrlTemplate_;
        /// <summary>
        /// Template for the alleycat server URL that should be queried for the
        /// filmstrip items at a given viewport.
        ///
        /// Template can be different depending on the user agent or client version.
        /// For example, Linux -7.0 can use default config with only Earth Tours,
        /// and Android 7.2- can use new URL with panoramas. Add new FilmstripConfig
        /// message to the snippet along with user agent / version requirement to
        /// use non-default URL.
        ///
        /// Android example: go/filmstripdbrootconfig
        ///
        /// Server API: go/getbestview
        ///
        /// For this template, the following properties apply:
        ///   - The URL *must* be absolute.
        ///   - $[max] will be replaced with the maximum number of results (specified
        ///         by the client implementation).
        ///   - $[focus] will be replaced with the current focus point as a comma-
        ///         separated lat-lon pair.
        ///   - $[polygon] will be replaced with a comma-separated list of
        ///         comma-separated lat-lon pairs representing the viewport.
        ///
        /// Examples:
        ///     Current API:
        ///     http://cbk0.google.com/cbk?output=polygon&amp;it=8:$[max]
        ///         &amp;polygon=$[polygon]&amp;ll=$[focus]&amp;rank=closest
        ///
        ///     Proposed example future API:
        ///      1. 40% of Earth Tours, 40% of UGC Panos, 20% of Art Project
        ///      http://cbk1.google.com/cbk?output=polygon&amp;cb_client=earth
        ///        &amp;it=8:$[max:0.4],11:$[max:0.4],4:$[max:0.2]&amp;polygon=$[polygon]
        ///        &amp;ll=$[focus]&amp;rank=centered
        ///
        ///      2. Best $[max] items in view of either Earth Tour or UGC Pano type
        ///         (types are crossranked, number of each type is variable).
        ///      http://cbk1.google.com/cbk?output=polygon&amp;cb_client=earth
        ///        &amp;it=8:1,11:1&amp;polygon=$[polygon]
        ///        &amp;ll=$[focus]&amp;rank=centered&amp;rs=$[max]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Keyhole.Dbroot.StringIdOrValueProto AlleycatUrlTemplate {
          get { return alleycatUrlTemplate_; }
          set {
            alleycatUrlTemplate_ = value;
          }
        }

        /// <summary>Field number for the "fallback_alleycat_url_template" field.</summary>
        public const int FallbackAlleycatUrlTemplateFieldNumber = 9;
        private global::Keyhole.Dbroot.StringIdOrValueProto fallbackAlleycatUrlTemplate_;
        /// <summary>
        /// Secondary alleycat server URL template.  This will be used during
        /// viewport fallback.
        /// For this template, the following properties apply:
        ///   - The URL *must* be absolute.
        ///   - $[max] will be replaced with the maximum number of results (specified
        ///         by the client implementation).
        ///   - $[focus] will be replaced with the current focus point as a comma-
        ///         separated lat-lon pair.
        ///
        /// Examples:
        ///     Current API:
        ///     http://cbk0.google.com/cbk?output=polygon&amp;it=8:$[max]
        ///         &amp;radius=120000&amp;rank=closest
        ///
        ///     Proposed future API:
        ///     http://cbk0.google.com/cbk?output=polygon&amp;it=8:5,14:100&amp;mix=1
        ///         &amp;max=$[max]&amp;radius=120000&amp;rank=closest
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Keyhole.Dbroot.StringIdOrValueProto FallbackAlleycatUrlTemplate {
          get { return fallbackAlleycatUrlTemplate_; }
          set {
            fallbackAlleycatUrlTemplate_ = value;
          }
        }

        /// <summary>Field number for the "metadata_url_template" field.</summary>
        public const int MetadataUrlTemplateFieldNumber = 3;
        private global::Keyhole.Dbroot.StringIdOrValueProto metadataUrlTemplate_;
        /// <summary>
        /// Template for the URL at which the metadata for a given ID can be found.
        /// Ex: http://mw1.google.com/mw-earth-vectordb/tourguide/json/$[id].json
        /// DEPRECATED. Used by clients that get config from default dbroot snippet.
        /// See AlleycatImageryTypeProto imagery_types below for recommended format.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Keyhole.Dbroot.StringIdOrValueProto MetadataUrlTemplate {
          get { return metadataUrlTemplate_; }
          set {
            metadataUrlTemplate_ = value;
          }
        }

        /// <summary>Field number for the "thumbnail_url_template" field.</summary>
        public const int ThumbnailUrlTemplateFieldNumber = 4;
        private global::Keyhole.Dbroot.StringIdOrValueProto thumbnailUrlTemplate_;
        /// <summary>
        /// Template for the URL at which the thumbnail for a given ID can be found.
        /// Ex: http://mw1.google.com/mw-earth-vectordb/tourguide/thumbnails/$[id].jpg
        /// DEPRECATED. Used by clients that get config from default dbroot snippet.
        /// See AlleycatImageryTypeProto imagery_types below for recommended format.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Keyhole.Dbroot.StringIdOrValueProto ThumbnailUrlTemplate {
          get { return thumbnailUrlTemplate_; }
          set {
            thumbnailUrlTemplate_ = value;
          }
        }

        /// <summary>Field number for the "kml_url_template" field.</summary>
        public const int KmlUrlTemplateFieldNumber = 5;
        private global::Keyhole.Dbroot.StringIdOrValueProto kmlUrlTemplate_;
        /// <summary>
        /// Template for the URL at which the KML for a given ID can be found.
        /// Ex: http://mw1.google.com/mw-earth-vectordb/tourguide/tours/$[id]_$[hl].kml
        /// DEPRECATED. Used by clients that get config from default dbroot snippet.
        /// See AlleycatImageryTypeProto imagery_types below for recommended format.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Keyhole.Dbroot.StringIdOrValueProto KmlUrlTemplate {
          get { return kmlUrlTemplate_; }
          set {
            kmlUrlTemplate_ = value;
          }
        }

        /// <summary>Field number for the "featured_tours_url" field.</summary>
        public const int FeaturedToursUrlFieldNumber = 6;
        private global::Keyhole.Dbroot.StringIdOrValueProto featuredToursUrl_;
        /// <summary>
        /// URL at which the featured tours JSON file can be found.
        /// Ex: http://mw1.google.com/mw-earth-vectordb/tourguide/featured.json
        /// Note: Since this is not a template, $[id] will not be replaced by
        /// anything, but $[hl] will still be resolved as above.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Keyhole.Dbroot.StringIdOrValueProto FeaturedToursUrl {
          get { return featuredToursUrl_; }
          set {
            featuredToursUrl_ = value;
          }
        }

        /// <summary>Field number for the "enable_viewport_fallback" field.</summary>
        public const int EnableViewportFallbackFieldNumber = 7;
        private readonly static bool EnableViewportFallbackDefaultValue = false;

        private bool enableViewportFallback_;
        /// <summary>
        /// Whether to perform client-side viewport fallback.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool EnableViewportFallback {
          get { if ((_hasBits0 & 1) != 0) { return enableViewportFallback_; } else { return EnableViewportFallbackDefaultValue; } }
          set {
            _hasBits0 |= 1;
            enableViewportFallback_ = value;
          }
        }
        /// <summary>Gets whether the "enable_viewport_fallback" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasEnableViewportFallback {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "enable_viewport_fallback" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearEnableViewportFallback() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "viewport_fallback_distance" field.</summary>
        public const int ViewportFallbackDistanceFieldNumber = 8;
        private readonly static uint ViewportFallbackDistanceDefaultValue = 0;

        private uint viewportFallbackDistance_;
        /// <summary>
        /// DEPRECATED. Unused. Specify fallback_alleycat_url_template instead.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint ViewportFallbackDistance {
          get { if ((_hasBits0 & 2) != 0) { return viewportFallbackDistance_; } else { return ViewportFallbackDistanceDefaultValue; } }
          set {
            _hasBits0 |= 2;
            viewportFallbackDistance_ = value;
          }
        }
        /// <summary>Gets whether the "viewport_fallback_distance" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasViewportFallbackDistance {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "viewport_fallback_distance" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearViewportFallbackDistance() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "imagery_type" field.</summary>
        public const int ImageryTypeFieldNumber = 10;
        private static readonly pb::FieldCodec<global::Keyhole.Dbroot.EndSnippetProto.Types.FilmstripConfigProto.Types.AlleycatImageryTypeProto> _repeated_imageryType_codec
            = pb::FieldCodec.ForMessage(82, global::Keyhole.Dbroot.EndSnippetProto.Types.FilmstripConfigProto.Types.AlleycatImageryTypeProto.Parser);
        private readonly pbc::RepeatedField<global::Keyhole.Dbroot.EndSnippetProto.Types.FilmstripConfigProto.Types.AlleycatImageryTypeProto> imageryType_ = new pbc::RepeatedField<global::Keyhole.Dbroot.EndSnippetProto.Types.FilmstripConfigProto.Types.AlleycatImageryTypeProto>();
        /// <summary>
        /// See comments and example above.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Keyhole.Dbroot.EndSnippetProto.Types.FilmstripConfigProto.Types.AlleycatImageryTypeProto> ImageryType {
          get { return imageryType_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as FilmstripConfigProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(FilmstripConfigProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Requirements, other.Requirements)) return false;
          if (!object.Equals(AlleycatUrlTemplate, other.AlleycatUrlTemplate)) return false;
          if (!object.Equals(FallbackAlleycatUrlTemplate, other.FallbackAlleycatUrlTemplate)) return false;
          if (!object.Equals(MetadataUrlTemplate, other.MetadataUrlTemplate)) return false;
          if (!object.Equals(ThumbnailUrlTemplate, other.ThumbnailUrlTemplate)) return false;
          if (!object.Equals(KmlUrlTemplate, other.KmlUrlTemplate)) return false;
          if (!object.Equals(FeaturedToursUrl, other.FeaturedToursUrl)) return false;
          if (EnableViewportFallback != other.EnableViewportFallback) return false;
          if (ViewportFallbackDistance != other.ViewportFallbackDistance) return false;
          if(!imageryType_.Equals(other.imageryType_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (requirements_ != null) hash ^= Requirements.GetHashCode();
          if (alleycatUrlTemplate_ != null) hash ^= AlleycatUrlTemplate.GetHashCode();
          if (fallbackAlleycatUrlTemplate_ != null) hash ^= FallbackAlleycatUrlTemplate.GetHashCode();
          if (metadataUrlTemplate_ != null) hash ^= MetadataUrlTemplate.GetHashCode();
          if (thumbnailUrlTemplate_ != null) hash ^= ThumbnailUrlTemplate.GetHashCode();
          if (kmlUrlTemplate_ != null) hash ^= KmlUrlTemplate.GetHashCode();
          if (featuredToursUrl_ != null) hash ^= FeaturedToursUrl.GetHashCode();
          if (HasEnableViewportFallback) hash ^= EnableViewportFallback.GetHashCode();
          if (HasViewportFallbackDistance) hash ^= ViewportFallbackDistance.GetHashCode();
          hash ^= imageryType_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (requirements_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Requirements);
          }
          if (alleycatUrlTemplate_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(AlleycatUrlTemplate);
          }
          if (metadataUrlTemplate_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(MetadataUrlTemplate);
          }
          if (thumbnailUrlTemplate_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(ThumbnailUrlTemplate);
          }
          if (kmlUrlTemplate_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(KmlUrlTemplate);
          }
          if (featuredToursUrl_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(FeaturedToursUrl);
          }
          if (HasEnableViewportFallback) {
            output.WriteRawTag(56);
            output.WriteBool(EnableViewportFallback);
          }
          if (HasViewportFallbackDistance) {
            output.WriteRawTag(64);
            output.WriteUInt32(ViewportFallbackDistance);
          }
          if (fallbackAlleycatUrlTemplate_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(FallbackAlleycatUrlTemplate);
          }
          imageryType_.WriteTo(output, _repeated_imageryType_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (requirements_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Requirements);
          }
          if (alleycatUrlTemplate_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(AlleycatUrlTemplate);
          }
          if (metadataUrlTemplate_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(MetadataUrlTemplate);
          }
          if (thumbnailUrlTemplate_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(ThumbnailUrlTemplate);
          }
          if (kmlUrlTemplate_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(KmlUrlTemplate);
          }
          if (featuredToursUrl_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(FeaturedToursUrl);
          }
          if (HasEnableViewportFallback) {
            output.WriteRawTag(56);
            output.WriteBool(EnableViewportFallback);
          }
          if (HasViewportFallbackDistance) {
            output.WriteRawTag(64);
            output.WriteUInt32(ViewportFallbackDistance);
          }
          if (fallbackAlleycatUrlTemplate_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(FallbackAlleycatUrlTemplate);
          }
          imageryType_.WriteTo(ref output, _repeated_imageryType_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (requirements_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Requirements);
          }
          if (alleycatUrlTemplate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AlleycatUrlTemplate);
          }
          if (fallbackAlleycatUrlTemplate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FallbackAlleycatUrlTemplate);
          }
          if (metadataUrlTemplate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetadataUrlTemplate);
          }
          if (thumbnailUrlTemplate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ThumbnailUrlTemplate);
          }
          if (kmlUrlTemplate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(KmlUrlTemplate);
          }
          if (featuredToursUrl_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeaturedToursUrl);
          }
          if (HasEnableViewportFallback) {
            size += 1 + 1;
          }
          if (HasViewportFallbackDistance) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ViewportFallbackDistance);
          }
          size += imageryType_.CalculateSize(_repeated_imageryType_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(FilmstripConfigProto other) {
          if (other == null) {
            return;
          }
          if (other.requirements_ != null) {
            if (requirements_ == null) {
              Requirements = new global::Keyhole.Dbroot.RequirementProto();
            }
            Requirements.MergeFrom(other.Requirements);
          }
          if (other.alleycatUrlTemplate_ != null) {
            if (alleycatUrlTemplate_ == null) {
              AlleycatUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            AlleycatUrlTemplate.MergeFrom(other.AlleycatUrlTemplate);
          }
          if (other.fallbackAlleycatUrlTemplate_ != null) {
            if (fallbackAlleycatUrlTemplate_ == null) {
              FallbackAlleycatUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            FallbackAlleycatUrlTemplate.MergeFrom(other.FallbackAlleycatUrlTemplate);
          }
          if (other.metadataUrlTemplate_ != null) {
            if (metadataUrlTemplate_ == null) {
              MetadataUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            MetadataUrlTemplate.MergeFrom(other.MetadataUrlTemplate);
          }
          if (other.thumbnailUrlTemplate_ != null) {
            if (thumbnailUrlTemplate_ == null) {
              ThumbnailUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            ThumbnailUrlTemplate.MergeFrom(other.ThumbnailUrlTemplate);
          }
          if (other.kmlUrlTemplate_ != null) {
            if (kmlUrlTemplate_ == null) {
              KmlUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            KmlUrlTemplate.MergeFrom(other.KmlUrlTemplate);
          }
          if (other.featuredToursUrl_ != null) {
            if (featuredToursUrl_ == null) {
              FeaturedToursUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            FeaturedToursUrl.MergeFrom(other.FeaturedToursUrl);
          }
          if (other.HasEnableViewportFallback) {
            EnableViewportFallback = other.EnableViewportFallback;
          }
          if (other.HasViewportFallbackDistance) {
            ViewportFallbackDistance = other.ViewportFallbackDistance;
          }
          imageryType_.Add(other.imageryType_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (requirements_ == null) {
                  Requirements = new global::Keyhole.Dbroot.RequirementProto();
                }
                input.ReadMessage(Requirements);
                break;
              }
              case 18: {
                if (alleycatUrlTemplate_ == null) {
                  AlleycatUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(AlleycatUrlTemplate);
                break;
              }
              case 26: {
                if (metadataUrlTemplate_ == null) {
                  MetadataUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(MetadataUrlTemplate);
                break;
              }
              case 34: {
                if (thumbnailUrlTemplate_ == null) {
                  ThumbnailUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(ThumbnailUrlTemplate);
                break;
              }
              case 42: {
                if (kmlUrlTemplate_ == null) {
                  KmlUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(KmlUrlTemplate);
                break;
              }
              case 50: {
                if (featuredToursUrl_ == null) {
                  FeaturedToursUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(FeaturedToursUrl);
                break;
              }
              case 56: {
                EnableViewportFallback = input.ReadBool();
                break;
              }
              case 64: {
                ViewportFallbackDistance = input.ReadUInt32();
                break;
              }
              case 74: {
                if (fallbackAlleycatUrlTemplate_ == null) {
                  FallbackAlleycatUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(FallbackAlleycatUrlTemplate);
                break;
              }
              case 82: {
                imageryType_.AddEntriesFrom(input, _repeated_imageryType_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (requirements_ == null) {
                  Requirements = new global::Keyhole.Dbroot.RequirementProto();
                }
                input.ReadMessage(Requirements);
                break;
              }
              case 18: {
                if (alleycatUrlTemplate_ == null) {
                  AlleycatUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(AlleycatUrlTemplate);
                break;
              }
              case 26: {
                if (metadataUrlTemplate_ == null) {
                  MetadataUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(MetadataUrlTemplate);
                break;
              }
              case 34: {
                if (thumbnailUrlTemplate_ == null) {
                  ThumbnailUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(ThumbnailUrlTemplate);
                break;
              }
              case 42: {
                if (kmlUrlTemplate_ == null) {
                  KmlUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(KmlUrlTemplate);
                break;
              }
              case 50: {
                if (featuredToursUrl_ == null) {
                  FeaturedToursUrl = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(FeaturedToursUrl);
                break;
              }
              case 56: {
                EnableViewportFallback = input.ReadBool();
                break;
              }
              case 64: {
                ViewportFallbackDistance = input.ReadUInt32();
                break;
              }
              case 74: {
                if (fallbackAlleycatUrlTemplate_ == null) {
                  FallbackAlleycatUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(FallbackAlleycatUrlTemplate);
                break;
              }
              case 82: {
                imageryType_.AddEntriesFrom(ref input, _repeated_imageryType_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the FilmstripConfigProto message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          /// <summary>
          /// Each alleycat imagery type supported by Earth filmstrip needs to be
          /// described. Some imagery types might have one or more empty URL
          /// templates, meaning no additional request needs to be made to handle
          /// image of that type.
          ///
          /// Example use: go/filmstripdbrootconfig
          /// </summary>
          [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
          public sealed partial class AlleycatImageryTypeProto : pb::IMessage<AlleycatImageryTypeProto>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<AlleycatImageryTypeProto> _parser = new pb::MessageParser<AlleycatImageryTypeProto>(() => new AlleycatImageryTypeProto());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<AlleycatImageryTypeProto> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Keyhole.Dbroot.EndSnippetProto.Types.FilmstripConfigProto.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public AlleycatImageryTypeProto() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public AlleycatImageryTypeProto(AlleycatImageryTypeProto other) : this() {
              _hasBits0 = other._hasBits0;
              imageryTypeId_ = other.imageryTypeId_;
              imageryTypeLabel_ = other.imageryTypeLabel_;
              metadataUrlTemplate_ = other.metadataUrlTemplate_ != null ? other.metadataUrlTemplate_.Clone() : null;
              thumbnailUrlTemplate_ = other.thumbnailUrlTemplate_ != null ? other.thumbnailUrlTemplate_.Clone() : null;
              kmlUrlTemplate_ = other.kmlUrlTemplate_ != null ? other.kmlUrlTemplate_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public AlleycatImageryTypeProto Clone() {
              return new AlleycatImageryTypeProto(this);
            }

            /// <summary>Field number for the "imagery_type_id" field.</summary>
            public const int ImageryTypeIdFieldNumber = 1;
            private readonly static int ImageryTypeIdDefaultValue = 0;

            private int imageryTypeId_;
            /// <summary>
            /// Alleycat Imagery type id. E.g. 8 for Earth Tour.
            /// Reference: go/bestview/imagery-types
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int ImageryTypeId {
              get { if ((_hasBits0 & 1) != 0) { return imageryTypeId_; } else { return ImageryTypeIdDefaultValue; } }
              set {
                _hasBits0 |= 1;
                imageryTypeId_ = value;
              }
            }
            /// <summary>Gets whether the "imagery_type_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasImageryTypeId {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "imagery_type_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearImageryTypeId() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "imagery_type_label" field.</summary>
            public const int ImageryTypeLabelFieldNumber = 2;
            private readonly static string ImageryTypeLabelDefaultValue = "";

            private string imageryTypeLabel_;
            /// <summary>
            /// Imagery Type label. E.g. "Earth Tour". Untranslated - don't show to
            /// user. Currently only used for developers' information.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public string ImageryTypeLabel {
              get { return imageryTypeLabel_ ?? ImageryTypeLabelDefaultValue; }
              set {
                imageryTypeLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "imagery_type_label" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasImageryTypeLabel {
              get { return imageryTypeLabel_ != null; }
            }
            /// <summary>Clears the value of the "imagery_type_label" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearImageryTypeLabel() {
              imageryTypeLabel_ = null;
            }

            /// <summary>Field number for the "metadata_url_template" field.</summary>
            public const int MetadataUrlTemplateFieldNumber = 3;
            private global::Keyhole.Dbroot.StringIdOrValueProto metadataUrlTemplate_;
            /// <summary>
            /// URL template for fetching additional metadata. "" if not needed.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Keyhole.Dbroot.StringIdOrValueProto MetadataUrlTemplate {
              get { return metadataUrlTemplate_; }
              set {
                metadataUrlTemplate_ = value;
              }
            }

            /// <summary>Field number for the "thumbnail_url_template" field.</summary>
            public const int ThumbnailUrlTemplateFieldNumber = 4;
            private global::Keyhole.Dbroot.StringIdOrValueProto thumbnailUrlTemplate_;
            /// <summary>
            /// URL template for fetching thumbnail. "" if not needed.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Keyhole.Dbroot.StringIdOrValueProto ThumbnailUrlTemplate {
              get { return thumbnailUrlTemplate_; }
              set {
                thumbnailUrlTemplate_ = value;
              }
            }

            /// <summary>Field number for the "kml_url_template" field.</summary>
            public const int KmlUrlTemplateFieldNumber = 5;
            private global::Keyhole.Dbroot.StringIdOrValueProto kmlUrlTemplate_;
            /// <summary>
            /// URL template for fetching KML. "" if not needed
            /// (e.g. if KML is generated on client side).
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Keyhole.Dbroot.StringIdOrValueProto KmlUrlTemplate {
              get { return kmlUrlTemplate_; }
              set {
                kmlUrlTemplate_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as AlleycatImageryTypeProto);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(AlleycatImageryTypeProto other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ImageryTypeId != other.ImageryTypeId) return false;
              if (ImageryTypeLabel != other.ImageryTypeLabel) return false;
              if (!object.Equals(MetadataUrlTemplate, other.MetadataUrlTemplate)) return false;
              if (!object.Equals(ThumbnailUrlTemplate, other.ThumbnailUrlTemplate)) return false;
              if (!object.Equals(KmlUrlTemplate, other.KmlUrlTemplate)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              if (HasImageryTypeId) hash ^= ImageryTypeId.GetHashCode();
              if (HasImageryTypeLabel) hash ^= ImageryTypeLabel.GetHashCode();
              if (metadataUrlTemplate_ != null) hash ^= MetadataUrlTemplate.GetHashCode();
              if (thumbnailUrlTemplate_ != null) hash ^= ThumbnailUrlTemplate.GetHashCode();
              if (kmlUrlTemplate_ != null) hash ^= KmlUrlTemplate.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasImageryTypeId) {
                output.WriteRawTag(8);
                output.WriteInt32(ImageryTypeId);
              }
              if (HasImageryTypeLabel) {
                output.WriteRawTag(18);
                output.WriteString(ImageryTypeLabel);
              }
              if (metadataUrlTemplate_ != null) {
                output.WriteRawTag(26);
                output.WriteMessage(MetadataUrlTemplate);
              }
              if (thumbnailUrlTemplate_ != null) {
                output.WriteRawTag(34);
                output.WriteMessage(ThumbnailUrlTemplate);
              }
              if (kmlUrlTemplate_ != null) {
                output.WriteRawTag(42);
                output.WriteMessage(KmlUrlTemplate);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasImageryTypeId) {
                output.WriteRawTag(8);
                output.WriteInt32(ImageryTypeId);
              }
              if (HasImageryTypeLabel) {
                output.WriteRawTag(18);
                output.WriteString(ImageryTypeLabel);
              }
              if (metadataUrlTemplate_ != null) {
                output.WriteRawTag(26);
                output.WriteMessage(MetadataUrlTemplate);
              }
              if (thumbnailUrlTemplate_ != null) {
                output.WriteRawTag(34);
                output.WriteMessage(ThumbnailUrlTemplate);
              }
              if (kmlUrlTemplate_ != null) {
                output.WriteRawTag(42);
                output.WriteMessage(KmlUrlTemplate);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              if (HasImageryTypeId) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageryTypeId);
              }
              if (HasImageryTypeLabel) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageryTypeLabel);
              }
              if (metadataUrlTemplate_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetadataUrlTemplate);
              }
              if (thumbnailUrlTemplate_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ThumbnailUrlTemplate);
              }
              if (kmlUrlTemplate_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(KmlUrlTemplate);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(AlleycatImageryTypeProto other) {
              if (other == null) {
                return;
              }
              if (other.HasImageryTypeId) {
                ImageryTypeId = other.ImageryTypeId;
              }
              if (other.HasImageryTypeLabel) {
                ImageryTypeLabel = other.ImageryTypeLabel;
              }
              if (other.metadataUrlTemplate_ != null) {
                if (metadataUrlTemplate_ == null) {
                  MetadataUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                MetadataUrlTemplate.MergeFrom(other.MetadataUrlTemplate);
              }
              if (other.thumbnailUrlTemplate_ != null) {
                if (thumbnailUrlTemplate_ == null) {
                  ThumbnailUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                ThumbnailUrlTemplate.MergeFrom(other.ThumbnailUrlTemplate);
              }
              if (other.kmlUrlTemplate_ != null) {
                if (kmlUrlTemplate_ == null) {
                  KmlUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                KmlUrlTemplate.MergeFrom(other.KmlUrlTemplate);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
              if ((tag & 7) == 4) {
                // Abort on any end group tag.
                return;
              }
              switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    ImageryTypeId = input.ReadInt32();
                    break;
                  }
                  case 18: {
                    ImageryTypeLabel = input.ReadString();
                    break;
                  }
                  case 26: {
                    if (metadataUrlTemplate_ == null) {
                      MetadataUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(MetadataUrlTemplate);
                    break;
                  }
                  case 34: {
                    if (thumbnailUrlTemplate_ == null) {
                      ThumbnailUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(ThumbnailUrlTemplate);
                    break;
                  }
                  case 42: {
                    if (kmlUrlTemplate_ == null) {
                      KmlUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(KmlUrlTemplate);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
              if ((tag & 7) == 4) {
                // Abort on any end group tag.
                return;
              }
              switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    ImageryTypeId = input.ReadInt32();
                    break;
                  }
                  case 18: {
                    ImageryTypeLabel = input.ReadString();
                    break;
                  }
                  case 26: {
                    if (metadataUrlTemplate_ == null) {
                      MetadataUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(MetadataUrlTemplate);
                    break;
                  }
                  case 34: {
                    if (thumbnailUrlTemplate_ == null) {
                      ThumbnailUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(ThumbnailUrlTemplate);
                    break;
                  }
                  case 42: {
                    if (kmlUrlTemplate_ == null) {
                      KmlUrlTemplate = new global::Keyhole.Dbroot.StringIdOrValueProto();
                    }
                    input.ReadMessage(KmlUrlTemplate);
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

      /// <summary>
      /// Data for the client to connect to a server for star data.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class StarDataProto : pb::IMessage<StarDataProto>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<StarDataProto> _parser = new pb::MessageParser<StarDataProto>(() => new StarDataProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<StarDataProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Keyhole.Dbroot.EndSnippetProto.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public StarDataProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public StarDataProto(StarDataProto other) : this() {
          url_ = other.url_ != null ? other.url_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public StarDataProto Clone() {
          return new StarDataProto(this);
        }

        /// <summary>Field number for the "url" field.</summary>
        public const int UrlFieldNumber = 1;
        private global::Keyhole.Dbroot.StringIdOrValueProto url_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Keyhole.Dbroot.StringIdOrValueProto Url {
          get { return url_; }
          set {
            url_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as StarDataProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(StarDataProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Url, other.Url)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (url_ != null) hash ^= Url.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (url_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Url);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (url_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Url);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (url_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Url);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(StarDataProto other) {
          if (other == null) {
            return;
          }
          if (other.url_ != null) {
            if (url_ == null) {
              Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            Url.MergeFrom(other.Url);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (url_ == null) {
                  Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(Url);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (url_ == null) {
                  Url = new global::Keyhole.Dbroot.StringIdOrValueProto();
                }
                input.ReadMessage(Url);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Message that references another portion of dbroot that should be fetched
  /// and merged with this dbroot. This is the main feature of DbRootProto which
  /// allows DbRoot to be split into multiple, hierarchical dbroots that the client
  /// will fetch and merge together.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DbRootRefProto : pb::IMessage<DbRootRefProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DbRootRefProto> _parser = new pb::MessageParser<DbRootRefProto>(() => new DbRootRefProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DbRootRefProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DbRootRefProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DbRootRefProto(DbRootRefProto other) : this() {
      _hasBits0 = other._hasBits0;
      url_ = other.url_;
      isCritical_ = other.isCritical_;
      requirements_ = other.requirements_ != null ? other.requirements_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DbRootRefProto Clone() {
      return new DbRootRefProto(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 2;
    private readonly static string UrlDefaultValue = "";

    private string url_;
    /// <summary>
    /// Location of other dbroot. URL can be relative (to this document) or
    /// absolute. URL must be resolved by client. Do not forget that the client
    /// fetching dbroot objects *always* appends query parameters identifying its
    /// language and platform.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Url {
      get { return url_ ?? UrlDefaultValue; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUrl {
      get { return url_ != null; }
    }
    /// <summary>Clears the value of the "url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUrl() {
      url_ = null;
    }

    /// <summary>Field number for the "is_critical" field.</summary>
    public const int IsCriticalFieldNumber = 1;
    private readonly static bool IsCriticalDefaultValue = false;

    private bool isCritical_;
    /// <summary>
    /// Flag that tells whether or not this object must be downloaded
    /// before showing the planet. By default only the first object is
    /// critical (the client cannot show the planet before knowing what the
    /// database contains).
    /// Note: non-critical objects cannot reference critical objects (these will
    /// not be counted as "critical", because the client has no way to know that a
    /// non-critical object that it contains any critical object before fetching
    /// and parsing it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCritical {
      get { if ((_hasBits0 & 1) != 0) { return isCritical_; } else { return IsCriticalDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isCritical_ = value;
      }
    }
    /// <summary>Gets whether the "is_critical" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCritical {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_critical" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCritical() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "requirements" field.</summary>
    public const int RequirementsFieldNumber = 3;
    private global::Keyhole.Dbroot.RequirementProto requirements_;
    /// <summary>
    /// optional requirements - object will only be downloaded if requirements
    /// are met. This can be used to selectively exclude an object based on client
    /// capabilities. See definition of RequirementProto for more details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.RequirementProto Requirements {
      get { return requirements_; }
      set {
        requirements_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DbRootRefProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DbRootRefProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      if (IsCritical != other.IsCritical) return false;
      if (!object.Equals(Requirements, other.Requirements)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUrl) hash ^= Url.GetHashCode();
      if (HasIsCritical) hash ^= IsCritical.GetHashCode();
      if (requirements_ != null) hash ^= Requirements.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIsCritical) {
        output.WriteRawTag(8);
        output.WriteBool(IsCritical);
      }
      if (HasUrl) {
        output.WriteRawTag(18);
        output.WriteString(Url);
      }
      if (requirements_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Requirements);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIsCritical) {
        output.WriteRawTag(8);
        output.WriteBool(IsCritical);
      }
      if (HasUrl) {
        output.WriteRawTag(18);
        output.WriteString(Url);
      }
      if (requirements_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Requirements);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (HasIsCritical) {
        size += 1 + 1;
      }
      if (requirements_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Requirements);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DbRootRefProto other) {
      if (other == null) {
        return;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      if (other.HasIsCritical) {
        IsCritical = other.IsCritical;
      }
      if (other.requirements_ != null) {
        if (requirements_ == null) {
          Requirements = new global::Keyhole.Dbroot.RequirementProto();
        }
        Requirements.MergeFrom(other.Requirements);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsCritical = input.ReadBool();
            break;
          }
          case 18: {
            Url = input.ReadString();
            break;
          }
          case 26: {
            if (requirements_ == null) {
              Requirements = new global::Keyhole.Dbroot.RequirementProto();
            }
            input.ReadMessage(Requirements);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsCritical = input.ReadBool();
            break;
          }
          case 18: {
            Url = input.ReadString();
            break;
          }
          case 26: {
            if (requirements_ == null) {
              Requirements = new global::Keyhole.Dbroot.RequirementProto();
            }
            input.ReadMessage(Requirements);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DatabaseVersionProto : pb::IMessage<DatabaseVersionProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DatabaseVersionProto> _parser = new pb::MessageParser<DatabaseVersionProto>(() => new DatabaseVersionProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DatabaseVersionProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DatabaseVersionProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DatabaseVersionProto(DatabaseVersionProto other) : this() {
      _hasBits0 = other._hasBits0;
      quadtreeVersion_ = other.quadtreeVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DatabaseVersionProto Clone() {
      return new DatabaseVersionProto(this);
    }

    /// <summary>Field number for the "quadtree_version" field.</summary>
    public const int QuadtreeVersionFieldNumber = 1;
    private readonly static uint QuadtreeVersionDefaultValue = 0;

    private uint quadtreeVersion_;
    /// <summary>
    /// Number that indicates the "version" of the quad-tree - used to be
    /// 'qtDataVersion' in the flatfile protocol (in the preamble of dbroot), and
    /// is also known as "epoch".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint QuadtreeVersion {
      get { if ((_hasBits0 & 1) != 0) { return quadtreeVersion_; } else { return QuadtreeVersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        quadtreeVersion_ = value;
      }
    }
    /// <summary>Gets whether the "quadtree_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasQuadtreeVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "quadtree_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearQuadtreeVersion() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DatabaseVersionProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DatabaseVersionProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuadtreeVersion != other.QuadtreeVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuadtreeVersion) hash ^= QuadtreeVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuadtreeVersion) {
        output.WriteRawTag(8);
        output.WriteUInt32(QuadtreeVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuadtreeVersion) {
        output.WriteRawTag(8);
        output.WriteUInt32(QuadtreeVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasQuadtreeVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QuadtreeVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DatabaseVersionProto other) {
      if (other == null) {
        return;
      }
      if (other.HasQuadtreeVersion) {
        QuadtreeVersion = other.QuadtreeVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QuadtreeVersion = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            QuadtreeVersion = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The central part of DbRoot, which aggregates information about the database.
  /// Next id: 17
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DbRootProto : pb::IMessage<DbRootProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DbRootProto> _parser = new pb::MessageParser<DbRootProto>(() => new DbRootProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DbRootProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DbRootProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DbRootProto(DbRootProto other) : this() {
      _hasBits0 = other._hasBits0;
      databaseName_ = other.databaseName_ != null ? other.databaseName_.Clone() : null;
      imageryPresent_ = other.imageryPresent_;
      protoImagery_ = other.protoImagery_;
      terrainPresent_ = other.terrainPresent_;
      providerInfo_ = other.providerInfo_.Clone();
      nestedFeature_ = other.nestedFeature_.Clone();
      styleAttribute_ = other.styleAttribute_.Clone();
      styleMap_ = other.styleMap_.Clone();
      endSnippet_ = other.endSnippet_ != null ? other.endSnippet_.Clone() : null;
      translationEntry_ = other.translationEntry_.Clone();
      language_ = other.language_;
      version_ = other.version_;
      dbrootReference_ = other.dbrootReference_.Clone();
      databaseVersion_ = other.databaseVersion_ != null ? other.databaseVersion_.Clone() : null;
      refreshTimeout_ = other.refreshTimeout_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DbRootProto Clone() {
      return new DbRootProto(this);
    }

    /// <summary>Field number for the "database_name" field.</summary>
    public const int DatabaseNameFieldNumber = 15;
    private global::Keyhole.Dbroot.StringIdOrValueProto databaseName_;
    /// <summary>
    /// Name of the database that should appear as layer name in the layers panel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.StringIdOrValueProto DatabaseName {
      get { return databaseName_; }
      set {
        databaseName_ = value;
      }
    }

    /// <summary>Field number for the "imagery_present" field.</summary>
    public const int ImageryPresentFieldNumber = 1;
    private readonly static bool ImageryPresentDefaultValue = true;

    private bool imageryPresent_;
    /// <summary>
    /// Describes whether this database contains imagery.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ImageryPresent {
      get { if ((_hasBits0 & 1) != 0) { return imageryPresent_; } else { return ImageryPresentDefaultValue; } }
      set {
        _hasBits0 |= 1;
        imageryPresent_ = value;
      }
    }
    /// <summary>Gets whether the "imagery_present" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasImageryPresent {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "imagery_present" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearImageryPresent() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "proto_imagery" field.</summary>
    public const int ProtoImageryFieldNumber = 14;
    private readonly static bool ProtoImageryDefaultValue = false;

    private bool protoImagery_;
    /// <summary>
    /// True if the imagery packets are going to be served as protocol buffers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ProtoImagery {
      get { if ((_hasBits0 & 8) != 0) { return protoImagery_; } else { return ProtoImageryDefaultValue; } }
      set {
        _hasBits0 |= 8;
        protoImagery_ = value;
      }
    }
    /// <summary>Gets whether the "proto_imagery" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProtoImagery {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "proto_imagery" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProtoImagery() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "terrain_present" field.</summary>
    public const int TerrainPresentFieldNumber = 2;
    private readonly static bool TerrainPresentDefaultValue = false;

    private bool terrainPresent_;
    /// <summary>
    /// Describes whether this database contains terrain.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool TerrainPresent {
      get { if ((_hasBits0 & 2) != 0) { return terrainPresent_; } else { return TerrainPresentDefaultValue; } }
      set {
        _hasBits0 |= 2;
        terrainPresent_ = value;
      }
    }
    /// <summary>Gets whether the "terrain_present" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTerrainPresent {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "terrain_present" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTerrainPresent() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "provider_info" field.</summary>
    public const int ProviderInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.ProviderInfoProto> _repeated_providerInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Keyhole.Dbroot.ProviderInfoProto.Parser);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.ProviderInfoProto> providerInfo_ = new pbc::RepeatedField<global::Keyhole.Dbroot.ProviderInfoProto>();
    /// <summary>
    /// Stores information about the data provider and copyright information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.ProviderInfoProto> ProviderInfo {
      get { return providerInfo_; }
    }

    /// <summary>Field number for the "nested_feature" field.</summary>
    public const int NestedFeatureFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.NestedFeatureProto> _repeated_nestedFeature_codec
        = pb::FieldCodec.ForMessage(34, global::Keyhole.Dbroot.NestedFeatureProto.Parser);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.NestedFeatureProto> nestedFeature_ = new pbc::RepeatedField<global::Keyhole.Dbroot.NestedFeatureProto>();
    /// <summary>
    /// List of "layers" that are available in database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.NestedFeatureProto> NestedFeature {
      get { return nestedFeature_; }
    }

    /// <summary>Field number for the "style_attribute" field.</summary>
    public const int StyleAttributeFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.StyleAttributeProto> _repeated_styleAttribute_codec
        = pb::FieldCodec.ForMessage(42, global::Keyhole.Dbroot.StyleAttributeProto.Parser);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.StyleAttributeProto> styleAttribute_ = new pbc::RepeatedField<global::Keyhole.Dbroot.StyleAttributeProto>();
    /// <summary>
    /// List of styles referenced by style maps.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.StyleAttributeProto> StyleAttribute {
      get { return styleAttribute_; }
    }

    /// <summary>Field number for the "style_map" field.</summary>
    public const int StyleMapFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.StyleMapProto> _repeated_styleMap_codec
        = pb::FieldCodec.ForMessage(50, global::Keyhole.Dbroot.StyleMapProto.Parser);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.StyleMapProto> styleMap_ = new pbc::RepeatedField<global::Keyhole.Dbroot.StyleMapProto>();
    /// <summary>
    /// List of style maps used by layers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.StyleMapProto> StyleMap {
      get { return styleMap_; }
    }

    /// <summary>Field number for the "end_snippet" field.</summary>
    public const int EndSnippetFieldNumber = 7;
    private global::Keyhole.Dbroot.EndSnippetProto endSnippet_;
    /// <summary>
    /// Miscellaneous configuration options for database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.EndSnippetProto EndSnippet {
      get { return endSnippet_; }
      set {
        endSnippet_ = value;
      }
    }

    /// <summary>Field number for the "translation_entry" field.</summary>
    public const int TranslationEntryFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.StringEntryProto> _repeated_translationEntry_codec
        = pb::FieldCodec.ForMessage(66, global::Keyhole.Dbroot.StringEntryProto.Parser);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.StringEntryProto> translationEntry_ = new pbc::RepeatedField<global::Keyhole.Dbroot.StringEntryProto>();
    /// <summary>
    /// List of id/string value pairs - this constitutes the translation table for
    /// all messages used in dbroot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.StringEntryProto> TranslationEntry {
      get { return translationEntry_; }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 9;
    private readonly static string LanguageDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("ZW4="), 0, 2);

    private string language_;
    /// <summary>
    /// The language associated with this DbRoot.  This is a language
    /// code compatible with the Google III language API, meaning that it
    /// should be treated as an opaque identifier that can denote
    /// language, script, country, and a bunch of other stuff.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Language {
      get { return language_ ?? LanguageDefaultValue; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "language" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLanguage {
      get { return language_ != null; }
    }
    /// <summary>Clears the value of the "language" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLanguage() {
      language_ = null;
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 10;
    private readonly static int VersionDefaultValue = 5;

    private int version_;
    /// <summary>
    /// The dbroots use a versioning system. Newer clients will look for
    /// version 6. If they don't find it they will request version 5 and so on.
    /// Currently the only dbroot version supported is v5.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Version {
      get { if ((_hasBits0 & 4) != 0) { return version_; } else { return VersionDefaultValue; } }
      set {
        _hasBits0 |= 4;
        version_ = value;
      }
    }
    /// <summary>Gets whether the "version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVersion {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVersion() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "dbroot_reference" field.</summary>
    public const int DbrootReferenceFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Keyhole.Dbroot.DbRootRefProto> _repeated_dbrootReference_codec
        = pb::FieldCodec.ForMessage(90, global::Keyhole.Dbroot.DbRootRefProto.Parser);
    private readonly pbc::RepeatedField<global::Keyhole.Dbroot.DbRootRefProto> dbrootReference_ = new pbc::RepeatedField<global::Keyhole.Dbroot.DbRootRefProto>();
    /// <summary>
    /// List of objects that should be downloaded to make this dbroot complete.
    /// For instance, the translation table for all string IDs used in this dbroot
    /// might be located in another dbroot object. It is a good idea to group
    /// together information that does not change across languages or platforms and
    /// build different dbroots per platform or language that clients will request
    /// depending on their configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Keyhole.Dbroot.DbRootRefProto> DbrootReference {
      get { return dbrootReference_; }
    }

    /// <summary>Field number for the "database_version" field.</summary>
    public const int DatabaseVersionFieldNumber = 13;
    private global::Keyhole.Dbroot.DatabaseVersionProto databaseVersion_;
    /// <summary>
    /// This should be set in main part to let the client know the current quadtree
    /// version number. However, it's legal to build dbroot parts without this
    /// message - the epoch of the database is typically known late in the
    /// production pipeline.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.DatabaseVersionProto DatabaseVersion {
      get { return databaseVersion_; }
      set {
        databaseVersion_ = value;
      }
    }

    /// <summary>Field number for the "refresh_timeout" field.</summary>
    public const int RefreshTimeoutFieldNumber = 16;
    private readonly static int RefreshTimeoutDefaultValue = 0;

    private int refreshTimeout_;
    /// <summary>
    /// Indicates how often this should be refreshed from server. Value is
    /// interpreted in seconds. 0 turns off refreshing.
    /// Supported as of Earth 7.1 for side databases only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RefreshTimeout {
      get { if ((_hasBits0 & 16) != 0) { return refreshTimeout_; } else { return RefreshTimeoutDefaultValue; } }
      set {
        _hasBits0 |= 16;
        refreshTimeout_ = value;
      }
    }
    /// <summary>Gets whether the "refresh_timeout" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRefreshTimeout {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "refresh_timeout" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRefreshTimeout() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DbRootProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DbRootProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DatabaseName, other.DatabaseName)) return false;
      if (ImageryPresent != other.ImageryPresent) return false;
      if (ProtoImagery != other.ProtoImagery) return false;
      if (TerrainPresent != other.TerrainPresent) return false;
      if(!providerInfo_.Equals(other.providerInfo_)) return false;
      if(!nestedFeature_.Equals(other.nestedFeature_)) return false;
      if(!styleAttribute_.Equals(other.styleAttribute_)) return false;
      if(!styleMap_.Equals(other.styleMap_)) return false;
      if (!object.Equals(EndSnippet, other.EndSnippet)) return false;
      if(!translationEntry_.Equals(other.translationEntry_)) return false;
      if (Language != other.Language) return false;
      if (Version != other.Version) return false;
      if(!dbrootReference_.Equals(other.dbrootReference_)) return false;
      if (!object.Equals(DatabaseVersion, other.DatabaseVersion)) return false;
      if (RefreshTimeout != other.RefreshTimeout) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (databaseName_ != null) hash ^= DatabaseName.GetHashCode();
      if (HasImageryPresent) hash ^= ImageryPresent.GetHashCode();
      if (HasProtoImagery) hash ^= ProtoImagery.GetHashCode();
      if (HasTerrainPresent) hash ^= TerrainPresent.GetHashCode();
      hash ^= providerInfo_.GetHashCode();
      hash ^= nestedFeature_.GetHashCode();
      hash ^= styleAttribute_.GetHashCode();
      hash ^= styleMap_.GetHashCode();
      if (endSnippet_ != null) hash ^= EndSnippet.GetHashCode();
      hash ^= translationEntry_.GetHashCode();
      if (HasLanguage) hash ^= Language.GetHashCode();
      if (HasVersion) hash ^= Version.GetHashCode();
      hash ^= dbrootReference_.GetHashCode();
      if (databaseVersion_ != null) hash ^= DatabaseVersion.GetHashCode();
      if (HasRefreshTimeout) hash ^= RefreshTimeout.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasImageryPresent) {
        output.WriteRawTag(8);
        output.WriteBool(ImageryPresent);
      }
      if (HasTerrainPresent) {
        output.WriteRawTag(16);
        output.WriteBool(TerrainPresent);
      }
      providerInfo_.WriteTo(output, _repeated_providerInfo_codec);
      nestedFeature_.WriteTo(output, _repeated_nestedFeature_codec);
      styleAttribute_.WriteTo(output, _repeated_styleAttribute_codec);
      styleMap_.WriteTo(output, _repeated_styleMap_codec);
      if (endSnippet_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(EndSnippet);
      }
      translationEntry_.WriteTo(output, _repeated_translationEntry_codec);
      if (HasLanguage) {
        output.WriteRawTag(74);
        output.WriteString(Language);
      }
      if (HasVersion) {
        output.WriteRawTag(80);
        output.WriteInt32(Version);
      }
      dbrootReference_.WriteTo(output, _repeated_dbrootReference_codec);
      if (databaseVersion_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(DatabaseVersion);
      }
      if (HasProtoImagery) {
        output.WriteRawTag(112);
        output.WriteBool(ProtoImagery);
      }
      if (databaseName_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(DatabaseName);
      }
      if (HasRefreshTimeout) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(RefreshTimeout);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasImageryPresent) {
        output.WriteRawTag(8);
        output.WriteBool(ImageryPresent);
      }
      if (HasTerrainPresent) {
        output.WriteRawTag(16);
        output.WriteBool(TerrainPresent);
      }
      providerInfo_.WriteTo(ref output, _repeated_providerInfo_codec);
      nestedFeature_.WriteTo(ref output, _repeated_nestedFeature_codec);
      styleAttribute_.WriteTo(ref output, _repeated_styleAttribute_codec);
      styleMap_.WriteTo(ref output, _repeated_styleMap_codec);
      if (endSnippet_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(EndSnippet);
      }
      translationEntry_.WriteTo(ref output, _repeated_translationEntry_codec);
      if (HasLanguage) {
        output.WriteRawTag(74);
        output.WriteString(Language);
      }
      if (HasVersion) {
        output.WriteRawTag(80);
        output.WriteInt32(Version);
      }
      dbrootReference_.WriteTo(ref output, _repeated_dbrootReference_codec);
      if (databaseVersion_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(DatabaseVersion);
      }
      if (HasProtoImagery) {
        output.WriteRawTag(112);
        output.WriteBool(ProtoImagery);
      }
      if (databaseName_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(DatabaseName);
      }
      if (HasRefreshTimeout) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(RefreshTimeout);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (databaseName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DatabaseName);
      }
      if (HasImageryPresent) {
        size += 1 + 1;
      }
      if (HasProtoImagery) {
        size += 1 + 1;
      }
      if (HasTerrainPresent) {
        size += 1 + 1;
      }
      size += providerInfo_.CalculateSize(_repeated_providerInfo_codec);
      size += nestedFeature_.CalculateSize(_repeated_nestedFeature_codec);
      size += styleAttribute_.CalculateSize(_repeated_styleAttribute_codec);
      size += styleMap_.CalculateSize(_repeated_styleMap_codec);
      if (endSnippet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndSnippet);
      }
      size += translationEntry_.CalculateSize(_repeated_translationEntry_codec);
      if (HasLanguage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (HasVersion) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      size += dbrootReference_.CalculateSize(_repeated_dbrootReference_codec);
      if (databaseVersion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DatabaseVersion);
      }
      if (HasRefreshTimeout) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RefreshTimeout);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DbRootProto other) {
      if (other == null) {
        return;
      }
      if (other.databaseName_ != null) {
        if (databaseName_ == null) {
          DatabaseName = new global::Keyhole.Dbroot.StringIdOrValueProto();
        }
        DatabaseName.MergeFrom(other.DatabaseName);
      }
      if (other.HasImageryPresent) {
        ImageryPresent = other.ImageryPresent;
      }
      if (other.HasProtoImagery) {
        ProtoImagery = other.ProtoImagery;
      }
      if (other.HasTerrainPresent) {
        TerrainPresent = other.TerrainPresent;
      }
      providerInfo_.Add(other.providerInfo_);
      nestedFeature_.Add(other.nestedFeature_);
      styleAttribute_.Add(other.styleAttribute_);
      styleMap_.Add(other.styleMap_);
      if (other.endSnippet_ != null) {
        if (endSnippet_ == null) {
          EndSnippet = new global::Keyhole.Dbroot.EndSnippetProto();
        }
        EndSnippet.MergeFrom(other.EndSnippet);
      }
      translationEntry_.Add(other.translationEntry_);
      if (other.HasLanguage) {
        Language = other.Language;
      }
      if (other.HasVersion) {
        Version = other.Version;
      }
      dbrootReference_.Add(other.dbrootReference_);
      if (other.databaseVersion_ != null) {
        if (databaseVersion_ == null) {
          DatabaseVersion = new global::Keyhole.Dbroot.DatabaseVersionProto();
        }
        DatabaseVersion.MergeFrom(other.DatabaseVersion);
      }
      if (other.HasRefreshTimeout) {
        RefreshTimeout = other.RefreshTimeout;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ImageryPresent = input.ReadBool();
            break;
          }
          case 16: {
            TerrainPresent = input.ReadBool();
            break;
          }
          case 26: {
            providerInfo_.AddEntriesFrom(input, _repeated_providerInfo_codec);
            break;
          }
          case 34: {
            nestedFeature_.AddEntriesFrom(input, _repeated_nestedFeature_codec);
            break;
          }
          case 42: {
            styleAttribute_.AddEntriesFrom(input, _repeated_styleAttribute_codec);
            break;
          }
          case 50: {
            styleMap_.AddEntriesFrom(input, _repeated_styleMap_codec);
            break;
          }
          case 58: {
            if (endSnippet_ == null) {
              EndSnippet = new global::Keyhole.Dbroot.EndSnippetProto();
            }
            input.ReadMessage(EndSnippet);
            break;
          }
          case 66: {
            translationEntry_.AddEntriesFrom(input, _repeated_translationEntry_codec);
            break;
          }
          case 74: {
            Language = input.ReadString();
            break;
          }
          case 80: {
            Version = input.ReadInt32();
            break;
          }
          case 90: {
            dbrootReference_.AddEntriesFrom(input, _repeated_dbrootReference_codec);
            break;
          }
          case 106: {
            if (databaseVersion_ == null) {
              DatabaseVersion = new global::Keyhole.Dbroot.DatabaseVersionProto();
            }
            input.ReadMessage(DatabaseVersion);
            break;
          }
          case 112: {
            ProtoImagery = input.ReadBool();
            break;
          }
          case 122: {
            if (databaseName_ == null) {
              DatabaseName = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(DatabaseName);
            break;
          }
          case 128: {
            RefreshTimeout = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ImageryPresent = input.ReadBool();
            break;
          }
          case 16: {
            TerrainPresent = input.ReadBool();
            break;
          }
          case 26: {
            providerInfo_.AddEntriesFrom(ref input, _repeated_providerInfo_codec);
            break;
          }
          case 34: {
            nestedFeature_.AddEntriesFrom(ref input, _repeated_nestedFeature_codec);
            break;
          }
          case 42: {
            styleAttribute_.AddEntriesFrom(ref input, _repeated_styleAttribute_codec);
            break;
          }
          case 50: {
            styleMap_.AddEntriesFrom(ref input, _repeated_styleMap_codec);
            break;
          }
          case 58: {
            if (endSnippet_ == null) {
              EndSnippet = new global::Keyhole.Dbroot.EndSnippetProto();
            }
            input.ReadMessage(EndSnippet);
            break;
          }
          case 66: {
            translationEntry_.AddEntriesFrom(ref input, _repeated_translationEntry_codec);
            break;
          }
          case 74: {
            Language = input.ReadString();
            break;
          }
          case 80: {
            Version = input.ReadInt32();
            break;
          }
          case 90: {
            dbrootReference_.AddEntriesFrom(ref input, _repeated_dbrootReference_codec);
            break;
          }
          case 106: {
            if (databaseVersion_ == null) {
              DatabaseVersion = new global::Keyhole.Dbroot.DatabaseVersionProto();
            }
            input.ReadMessage(DatabaseVersion);
            break;
          }
          case 112: {
            ProtoImagery = input.ReadBool();
            break;
          }
          case 122: {
            if (databaseName_ == null) {
              DatabaseName = new global::Keyhole.Dbroot.StringIdOrValueProto();
            }
            input.ReadMessage(DatabaseName);
            break;
          }
          case 128: {
            RefreshTimeout = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Message that contains an encrypted and compressed version of dbroot.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class EncryptedDbRootProto : pb::IMessage<EncryptedDbRootProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EncryptedDbRootProto> _parser = new pb::MessageParser<EncryptedDbRootProto>(() => new EncryptedDbRootProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EncryptedDbRootProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keyhole.Dbroot.DbrootV2Reflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EncryptedDbRootProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EncryptedDbRootProto(EncryptedDbRootProto other) : this() {
      _hasBits0 = other._hasBits0;
      encryptionType_ = other.encryptionType_;
      encryptionData_ = other.encryptionData_;
      dbrootData_ = other.dbrootData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EncryptedDbRootProto Clone() {
      return new EncryptedDbRootProto(this);
    }

    /// <summary>Field number for the "encryption_type" field.</summary>
    public const int EncryptionTypeFieldNumber = 1;
    private readonly static global::Keyhole.Dbroot.EncryptedDbRootProto.Types.EncryptionType EncryptionTypeDefaultValue = global::Keyhole.Dbroot.EncryptedDbRootProto.Types.EncryptionType.EncryptionXor;

    private global::Keyhole.Dbroot.EncryptedDbRootProto.Types.EncryptionType encryptionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Keyhole.Dbroot.EncryptedDbRootProto.Types.EncryptionType EncryptionType {
      get { if ((_hasBits0 & 1) != 0) { return encryptionType_; } else { return EncryptionTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        encryptionType_ = value;
      }
    }
    /// <summary>Gets whether the "encryption_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEncryptionType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "encryption_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEncryptionType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "encryption_data" field.</summary>
    public const int EncryptionDataFieldNumber = 2;
    private readonly static pb::ByteString EncryptionDataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString encryptionData_;
    /// <summary>
    /// Depending on encryption type, this can contain information on the key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString EncryptionData {
      get { return encryptionData_ ?? EncryptionDataDefaultValue; }
      set {
        encryptionData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "encryption_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEncryptionData {
      get { return encryptionData_ != null; }
    }
    /// <summary>Clears the value of the "encryption_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEncryptionData() {
      encryptionData_ = null;
    }

    /// <summary>Field number for the "dbroot_data" field.</summary>
    public const int DbrootDataFieldNumber = 3;
    private readonly static pb::ByteString DbrootDataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString dbrootData_;
    /// <summary>
    /// Compressed and encrypted bytes of dbroot data. Once decompressed and
    /// decrypted, the bytes can be parsed as a DbRootProto message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString DbrootData {
      get { return dbrootData_ ?? DbrootDataDefaultValue; }
      set {
        dbrootData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "dbroot_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDbrootData {
      get { return dbrootData_ != null; }
    }
    /// <summary>Clears the value of the "dbroot_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDbrootData() {
      dbrootData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EncryptedDbRootProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EncryptedDbRootProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptionType != other.EncryptionType) return false;
      if (EncryptionData != other.EncryptionData) return false;
      if (DbrootData != other.DbrootData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEncryptionType) hash ^= EncryptionType.GetHashCode();
      if (HasEncryptionData) hash ^= EncryptionData.GetHashCode();
      if (HasDbrootData) hash ^= DbrootData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEncryptionType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EncryptionType);
      }
      if (HasEncryptionData) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptionData);
      }
      if (HasDbrootData) {
        output.WriteRawTag(26);
        output.WriteBytes(DbrootData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEncryptionType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EncryptionType);
      }
      if (HasEncryptionData) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptionData);
      }
      if (HasDbrootData) {
        output.WriteRawTag(26);
        output.WriteBytes(DbrootData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasEncryptionType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EncryptionType);
      }
      if (HasEncryptionData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptionData);
      }
      if (HasDbrootData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DbrootData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EncryptedDbRootProto other) {
      if (other == null) {
        return;
      }
      if (other.HasEncryptionType) {
        EncryptionType = other.EncryptionType;
      }
      if (other.HasEncryptionData) {
        EncryptionData = other.EncryptionData;
      }
      if (other.HasDbrootData) {
        DbrootData = other.DbrootData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EncryptionType = (global::Keyhole.Dbroot.EncryptedDbRootProto.Types.EncryptionType) input.ReadEnum();
            break;
          }
          case 18: {
            EncryptionData = input.ReadBytes();
            break;
          }
          case 26: {
            DbrootData = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EncryptionType = (global::Keyhole.Dbroot.EncryptedDbRootProto.Types.EncryptionType) input.ReadEnum();
            break;
          }
          case 18: {
            EncryptionData = input.ReadBytes();
            break;
          }
          case 26: {
            DbrootData = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the EncryptedDbRootProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// List of all known encryption types for the encrypted buffer.
      /// </summary>
      public enum EncryptionType {
        /// <summary>
        /// Modified XOR algorithm (used in flatfile protocol).
        /// </summary>
        [pbr::OriginalName("ENCRYPTION_XOR")] EncryptionXor = 0,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
