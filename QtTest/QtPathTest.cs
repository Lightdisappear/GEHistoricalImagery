using GEHistoricalImagery;
using System.Collections.ObjectModel;

namespace QtTest
{
	[TestClass]
	public class QtPathTest
	{
		private static readonly ReadOnlyDictionary<string, int> SubIndexDict = new Dictionary<string, int>()
		{
			{"0", 1},
			{"00", 2},
			{"000", 6},
			{"0000", 22},
			{"0001", 23},
			{"0002", 24},
			{"0003", 25},
			{"001", 7},
			{"0010", 26},
			{"0011", 27},
			{"0012", 28},
			{"0013", 29},
			{"002", 8},
			{"0020", 30},
			{"0021", 31},
			{"0022", 32},
			{"0023", 33},
			{"003", 9},
			{"0030", 34},
			{"0031", 35},
			{"0032", 36},
			{"0033", 37},
			{"01", 3},
			{"010", 10},
			{"0100", 38},
			{"0101", 39},
			{"0102", 40},
			{"0103", 41},
			{"011", 11},
			{"0110", 42},
			{"0111", 43},
			{"0112", 44},
			{"0113", 45},
			{"012", 12},
			{"0120", 46},
			{"0121", 47},
			{"0122", 48},
			{"0123", 49},
			{"013", 13},
			{"0130", 50},
			{"0131", 51},
			{"0132", 52},
			{"0133", 53},
			{"02", 4},
			{"020", 14},
			{"0200", 54},
			{"0201", 55},
			{"0202", 56},
			{"0203", 57},
			{"021", 15},
			{"0210", 58},
			{"0211", 59},
			{"0212", 60},
			{"0213", 61},
			{"022", 16},
			{"0220", 62},
			{"0221", 63},
			{"0222", 64},
			{"0223", 65},
			{"023", 17},
			{"0230", 66},
			{"0231", 67},
			{"0232", 68},
			{"0233", 69},
			{"03", 5},
			{"030", 18},
			{"0300", 70},
			{"0301", 71},
			{"0302", 72},
			{"0303", 73},
			{"031", 19},
			{"0310", 74},
			{"0311", 75},
			{"0312", 76},
			{"0313", 77},
			{"032", 20},
			{"0320", 78},
			{"0321", 79},
			{"0322", 80},
			{"0323", 81},
			{"033", 21},
			{"0330", 82},
			{"0331", 83},
			{"0332", 84},
			{"0333", 85},
			{"1", 86},
			{"10", 87},
			{"100", 91},
			{"1000", 107},
			{"1001", 108},
			{"1002", 109},
			{"1003", 110},
			{"101", 92},
			{"1010", 111},
			{"1011", 112},
			{"1012", 113},
			{"1013", 114},
			{"102", 93},
			{"1020", 115},
			{"1021", 116},
			{"1022", 117},
			{"1023", 118},
			{"103", 94},
			{"1030", 119},
			{"1031", 120},
			{"1032", 121},
			{"1033", 122},
			{"11", 88},
			{"110", 95},
			{"1100", 123},
			{"1101", 124},
			{"1102", 125},
			{"1103", 126},
			{"111", 96},
			{"1110", 127},
			{"1111", 128},
			{"1112", 129},
			{"1113", 130},
			{"112", 97},
			{"1120", 131},
			{"1121", 132},
			{"1122", 133},
			{"1123", 134},
			{"113", 98},
			{"1130", 135},
			{"1131", 136},
			{"1132", 137},
			{"1133", 138},
			{"12", 89},
			{"120", 99},
			{"1200", 139},
			{"1201", 140},
			{"1202", 141},
			{"1203", 142},
			{"121", 100},
			{"1210", 143},
			{"1211", 144},
			{"1212", 145},
			{"1213", 146},
			{"122", 101},
			{"1220", 147},
			{"1221", 148},
			{"1222", 149},
			{"1223", 150},
			{"123", 102},
			{"1230", 151},
			{"1231", 152},
			{"1232", 153},
			{"1233", 154},
			{"13", 90},
			{"130", 103},
			{"1300", 155},
			{"1301", 156},
			{"1302", 157},
			{"1303", 158},
			{"131", 104},
			{"1310", 159},
			{"1311", 160},
			{"1312", 161},
			{"1313", 162},
			{"132", 105},
			{"1320", 163},
			{"1321", 164},
			{"1322", 165},
			{"1323", 166},
			{"133", 106},
			{"1330", 167},
			{"1331", 168},
			{"1332", 169},
			{"1333", 170},
			{"2", 171},
			{"20", 172},
			{"200", 176},
			{"2000", 192},
			{"2001", 193},
			{"2002", 194},
			{"2003", 195},
			{"201", 177},
			{"2010", 196},
			{"2011", 197},
			{"2012", 198},
			{"2013", 199},
			{"202", 178},
			{"2020", 200},
			{"2021", 201},
			{"2022", 202},
			{"2023", 203},
			{"203", 179},
			{"2030", 204},
			{"2031", 205},
			{"2032", 206},
			{"2033", 207},
			{"21", 173},
			{"210", 180},
			{"2100", 208},
			{"2101", 209},
			{"2102", 210},
			{"2103", 211},
			{"211", 181},
			{"2110", 212},
			{"2111", 213},
			{"2112", 214},
			{"2113", 215},
			{"212", 182},
			{"2120", 216},
			{"2121", 217},
			{"2122", 218},
			{"2123", 219},
			{"213", 183},
			{"2130", 220},
			{"2131", 221},
			{"2132", 222},
			{"2133", 223},
			{"22", 174},
			{"220", 184},
			{"2200", 224},
			{"2201", 225},
			{"2202", 226},
			{"2203", 227},
			{"221", 185},
			{"2210", 228},
			{"2211", 229},
			{"2212", 230},
			{"2213", 231},
			{"222", 186},
			{"2220", 232},
			{"2221", 233},
			{"2222", 234},
			{"2223", 235},
			{"223", 187},
			{"2230", 236},
			{"2231", 237},
			{"2232", 238},
			{"2233", 239},
			{"23", 175},
			{"230", 188},
			{"2300", 240},
			{"2301", 241},
			{"2302", 242},
			{"2303", 243},
			{"231", 189},
			{"2310", 244},
			{"2311", 245},
			{"2312", 246},
			{"2313", 247},
			{"232", 190},
			{"2320", 248},
			{"2321", 249},
			{"2322", 250},
			{"2323", 251},
			{"233", 191},
			{"2330", 252},
			{"2331", 253},
			{"2332", 254},
			{"2333", 255},
			{"3", 256},
			{"30", 257},
			{"300", 261},
			{"3000", 277},
			{"3001", 278},
			{"3002", 279},
			{"3003", 280},
			{"301", 262},
			{"3010", 281},
			{"3011", 282},
			{"3012", 283},
			{"3013", 284},
			{"302", 263},
			{"3020", 285},
			{"3021", 286},
			{"3022", 287},
			{"3023", 288},
			{"303", 264},
			{"3030", 289},
			{"3031", 290},
			{"3032", 291},
			{"3033", 292},
			{"31", 258},
			{"310", 265},
			{"3100", 293},
			{"3101", 294},
			{"3102", 295},
			{"3103", 296},
			{"311", 266},
			{"3110", 297},
			{"3111", 298},
			{"3112", 299},
			{"3113", 300},
			{"312", 267},
			{"3120", 301},
			{"3121", 302},
			{"3122", 303},
			{"3123", 304},
			{"313", 268},
			{"3130", 305},
			{"3131", 306},
			{"3132", 307},
			{"3133", 308},
			{"32", 259},
			{"320", 269},
			{"3200", 309},
			{"3201", 310},
			{"3202", 311},
			{"3203", 312},
			{"321", 270},
			{"3210", 313},
			{"3211", 314},
			{"3212", 315},
			{"3213", 316},
			{"322", 271},
			{"3220", 317},
			{"3221", 318},
			{"3222", 319},
			{"3223", 320},
			{"323", 272},
			{"3230", 321},
			{"3231", 322},
			{"3232", 323},
			{"3233", 324},
			{"33", 260},
			{"330", 273},
			{"3300", 325},
			{"3301", 326},
			{"3302", 327},
			{"3303", 328},
			{"331", 274},
			{"3310", 329},
			{"3311", 330},
			{"3312", 331},
			{"3313", 332},
			{"332", 275},
			{"3320", 333},
			{"3321", 334},
			{"3322", 335},
			{"3323", 336},
			{"333", 276},
			{"3330", 337},
			{"3331", 338},
			{"3332", 339},
			{"3333", 340}
		}.AsReadOnly();
		private static readonly ReadOnlyDictionary<string, int> RootIndexDict = new Dictionary<string, int>()
		{
			{ "0", 0 },
			{ "00", 1 },
			{ "01", 2 },
			{ "02", 3 },
			{ "03", 4 },
			{ "000", 5 },
			{ "001", 6 },
			{ "002", 7 },
			{ "003", 8 },
			{ "010", 9 },
			{ "011", 10 },
			{ "012", 11 },
			{ "013", 12 },
			{ "020", 13 },
			{ "021", 14 },
			{ "022", 15 },
			{ "023", 16 },
			{ "030", 17 },
			{ "031", 18 },
			{ "032", 19 },
			{ "033", 20 },
			{ "0000", 21 },
			{ "0001", 22 },
			{ "0002", 23 },
			{ "0003", 24 },
			{ "0010", 25 },
			{ "0011", 26 },
			{ "0012", 27 },
			{ "0013", 28 },
			{ "0020", 29 },
			{ "0021", 30 },
			{ "0022", 31 },
			{ "0023", 32 },
			{ "0030", 33 },
			{ "0031", 34 },
			{ "0032", 35 },
			{ "0033", 36 },
			{ "0100", 37 },
			{ "0101", 38 },
			{ "0102", 39 },
			{ "0103", 40 },
			{ "0110", 41 },
			{ "0111", 42 },
			{ "0112", 43 },
			{ "0113", 44 },
			{ "0120", 45 },
			{ "0121", 46 },
			{ "0122", 47 },
			{ "0123", 48 },
			{ "0130", 49 },
			{ "0131", 50 },
			{ "0132", 51 },
			{ "0133", 52 },
			{ "0200", 53 },
			{ "0201", 54 },
			{ "0202", 55 },
			{ "0203", 56 },
			{ "0210", 57 },
			{ "0211", 58 },
			{ "0212", 59 },
			{ "0213", 60 },
			{ "0220", 61 },
			{ "0221", 62 },
			{ "0222", 63 },
			{ "0223", 64 },
			{ "0230", 65 },
			{ "0231", 66 },
			{ "0232", 67 },
			{ "0233", 68 },
			{ "0300", 69 },
			{ "0301", 70 },
			{ "0302", 71 },
			{ "0303", 72 },
			{ "0310", 73 },
			{ "0311", 74 },
			{ "0312", 75 },
			{ "0313", 76 },
			{ "0320", 77 },
			{ "0321", 78 },
			{ "0322", 79 },
			{ "0323", 80 },
			{ "0330", 81 },
			{ "0331", 82 },
			{ "0332", 83 },
			{ "0333", 84 }
		}.AsReadOnly();

		[DataTestMethod]
		[DataRow("0000")]
		[DataRow("00000000")]
		[DataRow("000000000000")]
		[DataRow("0000000000000000")]
		[DataRow("00000000000000000000")]
		[DataRow("000000000000000000000000")]
		public void SubIndices(string qtIndex)
		{

			for (int i = 0; i < 4; i++)
			{
				var iStr = i.ToString();
				var qtPath = qtIndex + iStr;
				Assert.IsTrue(QtPath.TryParse(qtPath, out var p));
				Assert.AreEqual(SubIndexDict[iStr], p.SubIndex);
				Assert.AreEqual(qtPath, p.Path);
				for (int j = 0; j < 4; j++)
				{	
					var jStr = iStr + j;
					qtPath = qtIndex + jStr;
					Assert.IsTrue(QtPath.TryParse(qtPath, out p));
					Assert.AreEqual(SubIndexDict[jStr], p.SubIndex);
					Assert.AreEqual(qtPath, p.Path);
					for (int k = 0; k < 4; k++)
					{
						var kStr = jStr + k;
						qtPath = qtIndex + kStr;
						Assert.IsTrue(QtPath.TryParse(qtPath, out p));
						Assert.AreEqual(SubIndexDict[kStr], p.SubIndex);
						Assert.AreEqual(qtPath, p.Path);
						for (int l = 0; l < 4; l++)
						{
							var lStr = kStr + l;
							qtPath = qtIndex + lStr;
							Assert.IsTrue(QtPath.TryParse(qtPath, out p));
							Assert.AreEqual(SubIndexDict[lStr], p.SubIndex);
							Assert.AreEqual(qtPath, p.Path);
						}
					}
				}
			}
		}


		[TestMethod]
		public void RootIndex()
		{
			for (int i = 0; i < 4; i++)
			{
				var iStr = "0" + i.ToString();
				Assert.IsTrue(QtPath.TryParse(iStr, out var p));
				Assert.AreEqual(RootIndexDict[iStr], p.SubIndex);
				Assert.AreEqual(iStr, p.Path);
				for (int j = 0; j < 4; j++)
				{
					var jStr = iStr + j;
					Assert.IsTrue(QtPath.TryParse(jStr, out p));
					Assert.AreEqual(RootIndexDict[jStr], p.SubIndex);
					Assert.AreEqual(jStr, p.Path);
					for (int k = 0; k < 4; k++)
					{
						var kStr = jStr + k;
						Assert.IsTrue(QtPath.TryParse(kStr, out p));
						Assert.AreEqual(RootIndexDict[kStr], p.SubIndex);
						Assert.AreEqual(kStr, p.Path);
					}
				}
			}
		}

		[TestMethod]
		public void RootIndex2()
		{
			Assert.IsTrue(QtPath.TryParse("0", out var p));
			Assert.IsTrue(p.IsRoot);
			Assert.AreEqual(0, p.SubIndex);
			Assert.AreEqual("0", p.Path);
		}

		[DataTestMethod]
		[DataRow("1")]
		[DataRow("01234")]
		[DataRow("012334")]
		[DataRow("0000134")]
		[DataRow("00001304")]
		[DataRow("10001304")]
		[DataRow(" 02322")]
		[DataRow("")]
		[DataRow(null)]
		public void BadPaths(string qtpath)
		{
			Assert.IsFalse(QtPath.TryParse(qtpath, out _));
		}

		[TestMethod]
		public void EnumerateIndices()
		{
			for (int i = 1; i < 25; i++)
			{
				var qtp = RandomQuadTreePath(i);

				Assert.IsTrue(QtPath.TryParse(qtp, out var p));
				Assert.AreEqual(qtp, p.Path);

				int index = 0;
				foreach (var qtpIndex in p.EnumerateIndices())
				{
					var expected = qtp.Substring(0, index += 4);
					Assert.AreEqual(expected, qtpIndex.Path);
				}

				var diff = qtp.Length - index;
				var expectedDiff = ((qtp.Length - 1) % 4) + 1;
				Assert.AreEqual(expectedDiff, diff);
			}
		}

		private static readonly Random random = new Random();
		private static string RandomQuadTreePath(int length)
		{
			char[] path = new char[length];
			path[0] = '0';

			for (int i = 1; i < length; i++)
				path[i] = (char)random.Next(0x30, 0x34);

			return new string(path);
		}
	}
}